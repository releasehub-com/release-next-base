{
  "title": "Components of a Successful IDP: Build a Product Your Developers Actually Want to Use",
  "summary": "Learn about different qualities and components of successful IDPs, and explore some ways IDPs could fail.",
  "publishDate": "Wed Aug 16 2023 16:18:56 GMT+0000 (Coordinated Universal Time)",
  "author": "sylvia-fronczak",
  "readingTime": 10,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/dbc2f9c040038b3d718491e42e3fa3ab.jpg",
  "imageAlt": "Photo Credit: Dan Cristian Paduree",
  "showCTA": true,
  "ctaCopy": "Build self-service solutions with automated environments using Release's platform for streamlined workflows and faster deployments.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/dbc2f9c040038b3d718491e42e3fa3ab.jpg",
  "excerpt": "Learn about different qualities and components of successful IDPs, and explore some ways IDPs could fail.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nAfter reading about the [Internal Developer Platforms (IDPs) and why you should build one](https://release.com/blog/what-is-an-internal-developer-platform-and-why-should-i-have-one), you might be seeing certain benefits your organization could use. At this point, you might already be considering the first moves towards implementing an IDP. After all, an internal developer platform that provides automated self-service solutions for developers to simplify and standardize software practices, infrastructure, environments, and operations sounds like a dream come true. But what specifically should an IDP do? What functionality should it cover? And how can you ensure that teams adopt the IDP and that it provides real benefits?\n\nIn this post, we’ll cover different qualities and components of a successful IDP, and share some ways in which IDPs can fail. Let’s dig in!\n\n### Qualities of successful IDPs\n\nBefore you roll up your sleeves and start building your IDP, consider a set of qualities a successful IDP needs to solve for. These are the high level objectives an IDP addresses, without accomplishing these can easily become yet another tool gathering dust on the shelf. When building an IDP keep these three qualities at the top of your mind:\n\n1.  IDPs provide self-service solutions\n2.  IDPs automate processes\n3.  IDPs enforce guardrails and standards\n\n#### **1\\. IDPs Provide Self-Service Solutions**\n\nFirst, let’s consider self-service. Successful IDPs enable developers to access resources without tying up resources and people in other groups.\n\nThe IDP should empower teams and developers to solve their own problems when it makes sense for the developer based on their timelines and needs.\n\nOf course, there’s a caveat with this as too much empowerment can lead to failure. For full self-service, this could mean that you give your development teams access to everything, allowing full self-service all the time. But that’s not going to go well.\n\nIf you were to just provide access to everything, development teams would need to learn the ins and outs of infrastructure, tooling, governance, and multiple standards to self-service everything they need. Sure, they’d be able to self-service. But they wouldn’t have time to ship features. And they would end up re-learning similar tools and remaking similar mistakes that other teams or developers already made.\n\nFor IDPs, we do need to provide self-service functionality. But **the surface area of the necessary knowledge for that self-service ability should be as small as possible.** That way, developers can focus on creating a product with their development tools, and not tinkering with infrastructure.\n\nSo how do we make that surface area small? Through automation and standards. In the next section, let’s consider automation.\n\n‍\n\n![](/blog-images/941d45aab99ced30f672f083a86f9cae.png)\n\n#### **2\\. IDPs Automate Processes**\n\nWhen you read the word _automation_, you may think you can skip this section. Let’s hold up a second, though.\n\nYou may say, “Sure, I know what automation is. I create scripts that build and deploy apps, for example.”\n\nYes, [CI/CD pipelines](https://prod.releasehub.com/blog/11-continuous-deployment-tools-and-how-to-choose-one) are oftentimes the first thing that comes to mind when we think about automation and the development process, which is essential. But we should consider automation outside of the basics.\n\nThe successful IDP is a product built for developers. It can provide solutions for all stages of a developer’s work, from the day they start at your company to the day they leave. And it involves automated self-service solutions that ideally do not require ticket queues, manual approvals, or reliance on other teams to complete the request.\n\nLet’s talk about approvals for a minute. In some cases, we do need manual approvals, and that’s OK for limited and special use cases. But the majority of the time, approvals don’t provide a lot of value. Consider access requests. If you need to manually approve every single request for access to your code repository, deployment tools, and monitoring solutions, then you will waste time. What developers on your team don’t need access to those tools—or can work without them? Probably all of them need some access.\n\nYou may say these approvals are needed for auditing and validation. But are there better ways to get what you need? If every developer is given required access automatically as part of their first day’s onboarding, as part of the standard automated process, then can that fulfill your requirements? Alternatively, can you implement automations that verify that developers have access to the proper resources, that they’ve taken the required training, and that automate attestation of need to access those resources? When solving for compliance or auditing requirements, there are different ways to automate based on your specific needs.\n\nFrequently, we automate parts of a process while not always automating the most significant [bottlenecks](https://release.com/blog/increase-developer-velocity-by-removing-environment-bottlenecks). For example, if you’ve automated a request process to provision new databases but do not automate standard configuration, you’ve saved only a few minutes of someone’s time. Or if you pull reports frequently to verify that databases continue to conform to standards or don’t have unused capacity, then there is still room for improvement.\n\nWhen you consider automation, do not just consider automating the simple button clicks or simple scripting. Think about how your whole development process works and where the time and effort is spent. And then iterate. Once you’ve improved one part of the process, continuously re-evaluate how your automations can further improve the whole processes.\n\n#### **3\\. IDPs Enforce Guardrails and Standards**\n\nOK, after the two previous sections, you may know where this is going.\n\nWith a successful IDP, your self-service tools and automation conform to the standards and practices that your subject matter experts have determined work best.\n\nNow, in some cases, we do need to provide more freedom to developers to work outside of the normal guardrails or standards. And these standards should not limit your development teams to current use cases, as needs change. To provide flexibility for niche use cases, consider how you can enforce these guardrails while providing workarounds or approved exceptions.\n\nHowever, consider the ways that IDPs can standardize not just tools like CI/CD, but basic provisioning, configuration, monitoring, and more.\n\nKeeping the Qualities in mind, let’s look at the specific Components you should consider.  \n\n![](/blog-images/094b8afc10a92ab374e4c478f504025c.png)\n\n### Components of successful IDPs\n\nThe components that make up successful IDPs vary and don’t all need to be used at the same time. In fact, when getting started, you should never attempt to use this as a checklist, assuming your IDP will be successful when you’ve added all the components.\n\nAdditionally, not all components need to be part of a central IDP deployment. They can involve other tools and bits of automation that work to improve the efficiency of your development teams, but function outside of the central IDP deployment.\n\nWhen you’re planning what to tackle first, consider which components of an IDP will provide your organization with the most value.\n\nSome components are necessary for all organizations, like code repositories, IDEs and CI/CD. Without them you’re missing the basics that all teams that write code need.\n\nOther components should be present, but not all orgs have automated them or added any integrations into the developer workflow to make them worthwhile just yet. This includes items like automated security scanning, typically integrated through your CI/CD pipeline.\n\nAnd then there are items specific to certain industries. For example, not every organization needs full integration with compliance and regulatory features.\n\nFinally, not all of these components need to be integrated through an IDP from the start. You can build upon and expand as the value becomes clear. But once you have a number of these components that need to work together, incorporating them and integrating them into your IDP will simplify the development workflow. These integrations can remove unnecessary cognitive load of configuring and context-switching for your dev team and allow them to focus on more valuable tasks.\n\nIDP components can include but are not limited to:\n\n1.  **Code repositories:** OK, so there are some of these components that are non-negotiable. And our repositories, like git, are # 1.\n2.  **Infrastructure:** This can include building, orchestrating, configuration management, [environment management](https://prod.releasehub.com/blog/a-simple-guide-to-software-environments), and monitoring of the infrastructure used by your development team.\n3.  **Development tools:** This includes IDEs, plugins, and extensions as well as stand-alone tools. A good IDP can integrate with other tools through plugins and extensions, all built out as part of the IDP.\n4.  **CI/CD:** As this is one of the basic tools IDPs use, consider ways to supercharge this functionality. In addition to the usual CI/CD functionality, can you automate changelogs, notify operations of deployments, and track failures and rollbacks?\n5.  **Automated testing:** In addition to automating unit tests, integration tests, and others, a successful IDP will drive advanced test features like flaky test detection, load testing, and even chaos engineering.\n6.  **Security:** The basics of security could involve static analysis tools in your CI/CD pipeline, [secrets management](https://release.com/blog/kubernetes-secrets-management-a-practical-guide), or live monitoring of security threats.\n7.  **Monitoring/observability:** Monitoring and observability provide your teams with the ability to ensure your code actually does what it is meant to do. It also can help teams not only identify problems (through monitoring alerts around availability or critical functionality) but also help find the root causes. We can also think about more than just a link from our IDP to our monitoring solutions, but integrations with our CI/CD tools to identify where problems occur and when the problems were introduced.\n8.  **Project management and collaboration tools:** When you’re looking at the IDP, do not just consider purely developer-focused tools. How can your IDP integrate your deployment processes with your project management and notifications?\n9.  **Compliance and governance tools and workflows:** We talked a bit about this when discussing access requests earlier. Consider what other manual processes and reporting could be automated and integrated into your IDP. And don’t think of this as just automating a report. Consider what can be done to remove the need for reports and manual intervention.\n10. **Workflow automation:** Workflow automation is a bit of a catchall for tools that automate workflows. Once you’ve covered the basic components, you can begin to automate processes like creating new services, upgrading systems, or creating changelogs and API versions. Since the IDP centers around improving developer workflows, you’ll need to look outside of the basic components and find new ways to reduce toil.\n\n### Common Failures of IDPs\n\nSo, if an IDP covers all or a majority of the key components, why do many still fail to provide value? Why do they struggle with adoption?\n\nWell, several things can go wrong. We’ll cover just four of them.\n\nFirst, the IDP may be **focused on niche activities and processes and not the 80% of functionality that most developers need**. For example, if you’re in a monolithic environment, automating project initiation for microservices obviously won’t add much value. On the other hand, if your [team struggles with getting fast feedback, slow velocity, or environment bottlenecks for testing](https://prod.releasehub.com/blog/improve-developer-velocity-with-ephemeral-environments), then spinning up [ephemeral environments](https://release.com/ephemeral-environments) might be worth your time.\n\nSecond, **to understand your developers, you must consider _all_ of your developers**. Do not consider just the strongest, newest, or loudest developers. Interview a wide sample of your teams and consider their entire processes, so that you build a truly user-centric product.\n\nThird, sometimes **in an effort to remove security risks, companies will remove flexibility or functionality that the development team relies on**. For example, in an attempt to automate environment provisioning, an IDP may lock down security on configuration that developers used to have access to. This may be the right move, but you have to have a way to adjust to specific use cases. There should be guardrails while still making it possible to work outside of those guardrails when necessary.\n\nAnd finally, perhaps you **haven’t considered or built a rollout strategy**. You will need to consider how to onboard teams, get feedback, and quickly adjust and pivot based on that feedback and data. You can’t just build it and assume everyone will start using the tools and integrations available. It will take time and effort.\n\n### Summary\n\nWhen considering your future IDP or finding the next component your IDP should cover, consider the 80% of the functionality that your development teams need frequently. Add automated, standardized, self-serve functionality that addresses the majority of development workflows. And make sure you have enough of a feedback loop to ensure you’re building the right platform and improving the development cycle. In our next chapter we will look at the Build vs Buy question. Stay tuned!\n",
    "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var n in e)a(o,n,{get:e[n],enumerable:!0})},r=(o,e,n,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of m(e))!f.call(o,s)&&s!==n&&a(o,s,{get:()=>e[s],enumerable:!(i=h(e,s))||i.enumerable});return o};var v=(o,e,n)=>(n=o!=null?u(p(o)):{},r(e||!o||!o.__esModule?a(n,\"default\",{value:o,enumerable:!0}):n,o)),w=o=>r(a({},\"__esModule\",{value:!0}),o);var d=g((C,l)=>{l.exports=_jsx_runtime});var D={};y(D,{default:()=>k,frontmatter:()=>b});var t=v(d()),b={title:\"Components of a Successful IDP: Build a Product Your Developers Actually Want to Use\",summary:\"Learn about different qualities and components of successful IDPs, and explore some ways IDPs could fail.\",publishDate:\"Wed Aug 16 2023 16:18:56 GMT+0000 (Coordinated Universal Time)\",author:\"sylvia-fronczak\",readingTime:10,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/dbc2f9c040038b3d718491e42e3fa3ab.jpg\",imageAlt:\"Photo Credit: Dan Cristian Paduree\",showCTA:!0,ctaCopy:\"Build self-service solutions with automated environments using Release's platform for streamlined workflows and faster deployments.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use\",relatedPosts:[\"\"],ogImage:\"/blog-images/dbc2f9c040038b3d718491e42e3fa3ab.jpg\",excerpt:\"Learn about different qualities and components of successful IDPs, and explore some ways IDPs could fail.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function c(o){let e=Object.assign({p:\"p\",a:\"a\",h3:\"h3\",span:\"span\",ol:\"ol\",li:\"li\",h4:\"h4\",strong:\"strong\",img:\"img\",em:\"em\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"After reading about the \",(0,t.jsx)(e.a,{href:\"https://release.com/blog/what-is-an-internal-developer-platform-and-why-should-i-have-one\",children:\"Internal Developer Platforms (IDPs) and why you should build one\"}),\", you might be seeing certain benefits your organization could use. At this point, you might already be considering the first moves towards implementing an IDP. After all, an internal developer platform that provides automated self-service solutions for developers to simplify and standardize software practices, infrastructure, environments, and operations sounds like a dream come true. But what specifically should an IDP do? What functionality should it cover? And how can you ensure that teams adopt the IDP and that it provides real benefits?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"In this post, we\\u2019ll cover different qualities and components of a successful IDP, and share some ways in which IDPs can fail. Let\\u2019s dig in!\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"qualities-of-successful-idps\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#qualities-of-successful-idps\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Qualities of successful IDPs\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Before you roll up your sleeves and start building your IDP, consider a set of qualities a successful IDP needs to solve for. These are the high level objectives an IDP addresses, without accomplishing these can easily become yet another tool gathering dust on the shelf. When building an IDP keep these three qualities at the top of your mind:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"IDPs provide self-service solutions\"}),`\n`,(0,t.jsx)(e.li,{children:\"IDPs automate processes\"}),`\n`,(0,t.jsx)(e.li,{children:\"IDPs enforce guardrails and standards\"}),`\n`]}),`\n`,(0,t.jsxs)(e.h4,{id:\"1-idps-provide-self-service-solutions\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#1-idps-provide-self-service-solutions\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),(0,t.jsx)(e.strong,{children:\"1. IDPs Provide Self-Service Solutions\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"First, let\\u2019s consider self-service. Successful IDPs enable developers to access resources without tying up resources and people in other groups.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The IDP should empower teams and developers to solve their own problems when it makes sense for the developer based on their timelines and needs.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Of course, there\\u2019s a caveat with this as too much empowerment can lead to failure. For full self-service, this could mean that you give your development teams access to everything, allowing full self-service all the time. But that\\u2019s not going to go well.\"}),`\n`,(0,t.jsx)(e.p,{children:\"If you were to just provide access to everything, development teams would need to learn the ins and outs of infrastructure, tooling, governance, and multiple standards to self-service everything they need. Sure, they\\u2019d be able to self-service. But they wouldn\\u2019t have time to ship features. And they would end up re-learning similar tools and remaking similar mistakes that other teams or developers already made.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For IDPs, we do need to provide self-service functionality. But \",(0,t.jsx)(e.strong,{children:\"the surface area of the necessary knowledge for that self-service ability should be as small as possible.\"}),\" That way, developers can focus on creating a product with their development tools, and not tinkering with infrastructure.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"So how do we make that surface area small? Through automation and standards. In the next section, let\\u2019s consider automation.\"}),`\n`,(0,t.jsx)(e.p,{children:\"\\u200D\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/941d45aab99ced30f672f083a86f9cae.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h4,{id:\"2-idps-automate-processes\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#2-idps-automate-processes\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),(0,t.jsx)(e.strong,{children:\"2. IDPs Automate Processes\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"When you read the word \",(0,t.jsx)(e.em,{children:\"automation\"}),\", you may think you can skip this section. Let\\u2019s hold up a second, though.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"You may say, \\u201CSure, I know what automation is. I create scripts that build and deploy apps, for example.\\u201D\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Yes, \",(0,t.jsx)(e.a,{href:\"https://prod.releasehub.com/blog/11-continuous-deployment-tools-and-how-to-choose-one\",children:\"CI/CD pipelines\"}),\" are oftentimes the first thing that comes to mind when we think about automation and the development process, which is essential. But we should consider automation outside of the basics.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The successful IDP is a product built for developers. It can provide solutions for all stages of a developer\\u2019s work, from the day they start at your company to the day they leave. And it involves automated self-service solutions that ideally do not require ticket queues, manual approvals, or reliance on other teams to complete the request.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Let\\u2019s talk about approvals for a minute. In some cases, we do need manual approvals, and that\\u2019s OK for limited and special use cases. But the majority of the time, approvals don\\u2019t provide a lot of value. Consider access requests. If you need to manually approve every single request for access to your code repository, deployment tools, and monitoring solutions, then you will waste time. What developers on your team don\\u2019t need access to those tools\\u2014or can work without them? Probably all of them need some access.\"}),`\n`,(0,t.jsx)(e.p,{children:\"You may say these approvals are needed for auditing and validation. But are there better ways to get what you need? If every developer is given required access automatically as part of their first day\\u2019s onboarding, as part of the standard automated process, then can that fulfill your requirements? Alternatively, can you implement automations that verify that developers have access to the proper resources, that they\\u2019ve taken the required training, and that automate attestation of need to access those resources? When solving for compliance or auditing requirements, there are different ways to automate based on your specific needs.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Frequently, we automate parts of a process while not always automating the most significant \",(0,t.jsx)(e.a,{href:\"https://release.com/blog/increase-developer-velocity-by-removing-environment-bottlenecks\",children:\"bottlenecks\"}),\". For example, if you\\u2019ve automated a request process to provision new databases but do not automate standard configuration, you\\u2019ve saved only a few minutes of someone\\u2019s time. Or if you pull reports frequently to verify that databases continue to conform to standards or don\\u2019t have unused capacity, then there is still room for improvement.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"When you consider automation, do not just consider automating the simple button clicks or simple scripting. Think about how your whole development process works and where the time and effort is spent. And then iterate. Once you\\u2019ve improved one part of the process, continuously re-evaluate how your automations can further improve the whole processes.\"}),`\n`,(0,t.jsxs)(e.h4,{id:\"3-idps-enforce-guardrails-and-standards\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#3-idps-enforce-guardrails-and-standards\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),(0,t.jsx)(e.strong,{children:\"3. IDPs Enforce Guardrails and Standards\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"OK, after the two previous sections, you may know where this is going.\"}),`\n`,(0,t.jsx)(e.p,{children:\"With a successful IDP, your self-service tools and automation conform to the standards and practices that your subject matter experts have determined work best.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Now, in some cases, we do need to provide more freedom to developers to work outside of the normal guardrails or standards. And these standards should not limit your development teams to current use cases, as needs change. To provide flexibility for niche use cases, consider how you can enforce these guardrails while providing workarounds or approved exceptions.\"}),`\n`,(0,t.jsx)(e.p,{children:\"However, consider the ways that IDPs can standardize not just tools like CI/CD, but basic provisioning, configuration, monitoring, and more.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Keeping the Qualities in mind, let\\u2019s look at the specific Components you should consider. \\xA0\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/094b8afc10a92ab374e4c478f504025c.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"components-of-successful-idps\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#components-of-successful-idps\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Components of successful IDPs\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The components that make up successful IDPs vary and don\\u2019t all need to be used at the same time. In fact, when getting started, you should never attempt to use this as a checklist, assuming your IDP will be successful when you\\u2019ve added all the components.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Additionally, not all components need to be part of a central IDP deployment. They can involve other tools and bits of automation that work to improve the efficiency of your development teams, but function outside of the central IDP deployment.\"}),`\n`,(0,t.jsx)(e.p,{children:\"When you\\u2019re planning what to tackle first, consider which components of an IDP will provide your organization with the most value.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Some components are necessary for all organizations, like code repositories, IDEs and CI/CD. Without them you\\u2019re missing the basics that all teams that write code need.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Other components should be present, but not all orgs have automated them or added any integrations into the developer workflow to make them worthwhile just yet. This includes items like automated security scanning, typically integrated through your CI/CD pipeline.\"}),`\n`,(0,t.jsx)(e.p,{children:\"And then there are items specific to certain industries. For example, not every organization needs full integration with compliance and regulatory features.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Finally, not all of these components need to be integrated through an IDP from the start. You can build upon and expand as the value becomes clear. But once you have a number of these components that need to work together, incorporating them and integrating them into your IDP will simplify the development workflow. These integrations can remove unnecessary cognitive load of configuring and context-switching for your dev team and allow them to focus on more valuable tasks.\"}),`\n`,(0,t.jsx)(e.p,{children:\"IDP components can include but are not limited to:\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Code repositories:\"}),\" OK, so there are some of these components that are non-negotiable. And our repositories, like git, are # 1.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Infrastructure:\"}),\" This can include building, orchestrating, configuration management, \",(0,t.jsx)(e.a,{href:\"https://prod.releasehub.com/blog/a-simple-guide-to-software-environments\",children:\"environment management\"}),\", and monitoring of the infrastructure used by your development team.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Development tools:\"}),\" This includes IDEs, plugins, and extensions as well as stand-alone tools. A good IDP can integrate with other tools through plugins and extensions, all built out as part of the IDP.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"CI/CD:\"}),\" As this is one of the basic tools IDPs use, consider ways to supercharge this functionality. In addition to the usual CI/CD functionality, can you automate changelogs, notify operations of deployments, and track failures and rollbacks?\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Automated testing:\"}),\" In addition to automating unit tests, integration tests, and others, a successful IDP will drive advanced test features like flaky test detection, load testing, and even chaos engineering.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Security:\"}),\" The basics of security could involve static analysis tools in your CI/CD pipeline, \",(0,t.jsx)(e.a,{href:\"https://release.com/blog/kubernetes-secrets-management-a-practical-guide\",children:\"secrets management\"}),\", or live monitoring of security threats.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Monitoring/observability:\"}),\" Monitoring and observability provide your teams with the ability to ensure your code actually does what it is meant to do. It also can help teams not only identify problems (through monitoring alerts around availability or critical functionality) but also help find the root causes. We can also think about more than just a link from our IDP to our monitoring solutions, but integrations with our CI/CD tools to identify where problems occur and when the problems were introduced.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Project management and collaboration tools:\"}),\" When you\\u2019re looking at the IDP, do not just consider purely developer-focused tools. How can your IDP integrate your deployment processes with your project management and notifications?\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Compliance and governance tools and workflows:\"}),\" We talked a bit about this when discussing access requests earlier. Consider what other manual processes and reporting could be automated and integrated into your IDP. And don\\u2019t think of this as just automating a report. Consider what can be done to remove the need for reports and manual intervention.\"]}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:\"Workflow automation:\"}),\"\\xA0Workflow automation is a bit of a catchall for tools that automate workflows. Once you\\u2019ve covered the basic components, you can begin to automate processes like creating new services, upgrading systems, or creating changelogs and API versions. Since the IDP centers around improving developer workflows, you\\u2019ll need to look outside of the basic components and find new ways to reduce toil.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.h3,{id:\"common-failures-of-idps\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#common-failures-of-idps\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Common Failures of IDPs\"]}),`\n`,(0,t.jsx)(e.p,{children:\"So, if an IDP covers all or a majority of the key components, why do many still fail to provide value? Why do they struggle with adoption?\"}),`\n`,(0,t.jsx)(e.p,{children:\"Well, several things can go wrong. We\\u2019ll cover just four of them.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"First, the IDP may be \",(0,t.jsx)(e.strong,{children:\"focused on niche activities and processes and not the 80% of functionality that most developers need\"}),\". For example, if you\\u2019re in a monolithic environment, automating project initiation for microservices obviously won\\u2019t add much value. On the other hand, if your \",(0,t.jsx)(e.a,{href:\"https://prod.releasehub.com/blog/improve-developer-velocity-with-ephemeral-environments\",children:\"team struggles with getting fast feedback, slow velocity, or environment bottlenecks for testing\"}),\", then spinning up \",(0,t.jsx)(e.a,{href:\"https://release.com/ephemeral-environments\",children:\"ephemeral environments\"}),\" might be worth your time.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Second, \",(0,t.jsxs)(e.strong,{children:[\"to understand your developers, you must consider \",(0,t.jsx)(e.em,{children:\"all\"}),\" of your developers\"]}),\". Do not consider just the strongest, newest, or loudest developers. Interview a wide sample of your teams and consider their entire processes, so that you build a truly user-centric product.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Third, sometimes \",(0,t.jsx)(e.strong,{children:\"in an effort to remove security risks, companies will remove flexibility or functionality that the development team relies on\"}),\". For example, in an attempt to automate environment provisioning, an IDP may lock down security on configuration that developers used to have access to. This may be the right move, but you have to have a way to adjust to specific use cases. There should be guardrails while still making it possible to work outside of those guardrails when necessary.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"And finally, perhaps you \",(0,t.jsx)(e.strong,{children:\"haven\\u2019t considered or built a rollout strategy\"}),\". You will need to consider how to onboard teams, get feedback, and quickly adjust and pivot based on that feedback and data. You can\\u2019t just build it and assume everyone will start using the tools and integrations available. It will take time and effort.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"summary\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#summary\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Summary\"]}),`\n`,(0,t.jsx)(e.p,{children:\"When considering your future IDP or finding the next component your IDP should cover, consider the 80% of the functionality that your development teams need frequently. Add automated, standardized, self-serve functionality that addresses the majority of development workflows. And make sure you have enough of a feedback loop to ensure you\\u2019re building the right platform and improving the development cycle. In our next chapter we will look at the Build vs Buy question. Stay tuned!\"})]})}function I(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(c,o)})):c(o)}var k=I;return w(D);})();\n;return Component;"
  },
  "_id": "blog/posts/components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use.mdx",
    "sourceFileName": "components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use"
  },
  "type": "BlogPost",
  "computedSlug": "components-of-a-successful-idp-build-a-product-your-developers-actually-want-to-use"
}