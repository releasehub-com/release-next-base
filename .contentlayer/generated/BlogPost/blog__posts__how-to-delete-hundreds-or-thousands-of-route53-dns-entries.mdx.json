{
  "title": "How to Delete Hundreds or Thousands of Route53 DNS Entries",
  "summary": "How do Delete Hundreds, or Possibly Thousands of Route53 DNS Entries Quickly and Easily",
  "publishDate": "Wed Feb 03 2021 05:21:12 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 6,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/a40c6571d6ad435527d1213a49721a90.jpg",
  "imageAlt": "Hundreds of bright candy representing Route53 DNS Entries",
  "showCTA": true,
  "ctaCopy": "Simplify DNS management with Release: automate bulk Route53 operations and streamline environment setup effortlessly.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-delete-hundreds-or-thousands-of-route53-dns-entries",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/a40c6571d6ad435527d1213a49721a90.jpg",
  "excerpt": "How do Delete Hundreds, or Possibly Thousands of Route53 DNS Entries Quickly and Easily",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\n### How to Delete Hundreds (or Thousands) of Route53 Entries Quickly on the Command Line\n\n### Overview\n\nAt Release, we make Staging environments easy by quickly creating and updating environments to run, test, and share your application code in full fledged, isolated environments. In previous versions of our product, we were able to quickly roll out new environments and features by creating tons of AWS Route53 DNS entries for each new application and environment. Unfortunately, that meant that we were quickly creating over 5,000 Route53 entries.\n\nThe maximum number of Route53 entries you can have by default in one hosted zone is 10,000, so we needed to fix this before we ran out. Luckily, we added new features to create smart wildcard entries and a routing system to drastically reduce the number of entries we needed to create for ourselves and our customers.\n\nBut then we were stuck with a legacy of over 5,000 entries that needed to be deleted (carefully!) in a reasonable timeframe and preferably automatically, rather than by hand. This article will show you how we accomplished the task and how this relatively obscure and niche problem (we hope!) can be solved relatively quickly and painlessly.\n\n### Investigation\n\nThe initial approach is to simply come up with a command-line query to list Route53 entries and then parse them one by one to delete them. Unfortunately, the documentation quickly shows this to be the wrong method, since Route53 entry “upserts” (additions or changes) or “deletes” (as you would expect) need to be batched and uploaded in a transaction. There is no simple “delete one Route53 entry” command on the CLI as of the time of this writing. In point of fact, this naive approach is actually not a good way to do this type of bulk update anyway. Route53 will correctly handle each batch of operations as a transaction; so that if one entry fails to update or delete for some reason, the whole batch will be rolled back to preserve the integrity of your records.\n\nI therefore started with one of my favourite Stack Overflow answers that I turn to way more often than I should: [How to Export Route53 Zone File](https://stackoverflow.com/a/48498598). This was one of those copy-paste answers I would blindly use when approaching a Route53 use-case and it happily contained enough of a starting solution to building out the entire point of this blog post.\n\n### A Slight Tangent on JQ\n\n[JQ](https://stedolan.github.io/jq/) is a [JSON query language](https://stackoverflow.com/a/56114895) and is billed as “[sed](https://en.wikipedia.org/wiki/Sed) for JSON”. For me, jq has always been a bit opaque and I usually just copy-paste whatever a Stack Overflow answer has provided. In the case of the problem presented in this blog post, I needed to really dive in and learn about the power jq offers to help me solve this problem. It is, indeed, part of the core solution the above Stack Overflow answer is based on.\n\nThe first thing to note is that jq can be used to extract, transform, output, rollup, and filter JSON objects or text in a programmatic fashion. In this way, I have started changing my pitch to be that jq is “[awk](https://en.wikipedia.org/wiki/AWK) for JSON”. I have found jq syntax and structure to be a bit difficult to test or grasp, so I was delighted to find [jq Play](https://jqplay.org/), an online resource for testing and visualising jq syntax and test inputs. I will use the screenshots from jq play to display my steps as we go along.\n\n#### Step 1, Gather Test Data\n\nThe first step, as exactly described above in Stack Overflow, is to run the AWS CLI to output a JSON list of all of your Route53 entries (in our case, over 5,000+!!!). Take a few lines of the first part of the output to play with. You can grab a few entries by limiting the --max-items option in the list-resource-record-sets command. Take those and paste them into the jq play screen on the left, then select “.” as the operator to output everything. You can follow along with this [snippet](https://jqplay.org/s/0EWB_zhjvG). Here is what it looks like initially:\n\n![](/blog-images/d9b85c1e4277baadf503ebec1565f804.png)\n\nThis is a good starting point but we need to first start with unwrapping the outer layer of the “ResourceRecords” key to find the list of entries as [follows](https://jqplay.org/s/PM3uM757DE) (turn on the “Compact View” to make it easier to understand and see more of what’s happening:\n\n![](/blog-images/8e36c46777593174cef0867a6c03390b.png)\n\n#### Step 2, Filter Records\n\nNow we need to filter out records so that only the “AliasTarget -> DNSName” keys matching a particular endpoint get deleted. That is relatively easy to do by filtering results with the pipe (“|”) character and using the “Select” operator as [follows](https://jqplay.org/s/cKEL8vTJHr):\n\n![](/blog-images/8059997113e53a00e0f627bd481eb3bb.png)\n\nKeep in mind that in practice, we will be filtering way more than 2 records from 4 records, but this is just a test before we run the full solution. Also, keep in mind that you could use any number of filters and selector operators (for example on the “Type” field) to choose which entries to act upon. The world is your oyster!\n\nWhich is a silly saying, of course. If the world is your oyster, then that is a salty, squishy, goey, messy, muscly world. And where is the pearl in your world? Some hard round misshapen thing rolling around in your bedroom so you can’t sleep comfortably? I suppose it’s better than sand everywhere, but really. “The world is your oyster”?\n\n#### Step 3, Manipulate Rows for Delete\n\nThe next step is to manipulate the rows we’re filtering/selecting to create the individual records that will become the batch delete operation. To do this, we will need to construct the output record form for each individual delete action using the schema that Route53 is going to expect. In this case, we extract several fields from each record and wrap them inside an “Action: DELETE” key as [follows](https://jqplay.org/s/hsZ65XuciY):\n\n![](/blog-images/1b31c9ae6788a3eeae8ce3da27bed79f.png)\n\nNotice how the JSON in the right hand pane is looking like the output that we will be able to pipe back into an AWS CLI call to delete entries. We’re coming along nicely!\n\nAlso keep in mind that you could extend this example to manipulate entries in any way you like, for example, changing record types, or bulk-changing TTLs or some other field.\n\nNotice how the outputs are newline-separated? This initially confused me, but you can easily create a list or map by wrapping the whole query inside either square brackets (for a list) or curly brackets for a map:\n\n![](/blog-images/d20d696ffc43a5907c4edc33838c3613.png)\n\n#### Step 4, Mind the Max Batch Size\n\nWe’re almost done, but since we’re deleting multiple hundreds (thousands, actually) of records, we want to set a batch size that is reasonable and that Route53 will accept. According to the documentation, the maximum batch size is 1000. I arbitrarily chose a batch size of 100 that is more reasonable and manageable for the CLI, so layer on the \\_nwise() operator as [follows](https://jqplay.org/s/uu649cb-BM):\n\n![](/blog-images/d5376d45a40fa7c9a2a0caa01234e4fd.png)\n\nKeep in mind that in this example, I’m playing with 4 records, filtered to 2, and then batched into sizes of 1. In reality, we’re going to apply this to 5,000+ records, filtered to ~4,000 records, and batched at 100. The question you will want to ask yourself is, “How many records do I want to hassle with (possibly manually) if something explodes in the middle? Or if some intervention is required in a batch to add/remove/massage form one or more batches?” I settled on about 100.\n\nHopefully you’re not as crazy as I am and in a similar predicament. You should be smart enough to avoid this situation in the first place. But if you are as crazy as I am, welcome to the club; we’re very sympathetic to your problems around here. I also really appreciate you reading all the way through to this spot, you crazy, wonderful, patient soul.\n\n#### Step 5, Wrap It Up\n\nEach batch is ready to be delivered on one line as shown above, however, before we’re done we need to add a “Changes” key at the top level for Route53 to accept. This is easy to accomplish by just piping the results into a map with one key and using the period (“.”) to select “everything” as [follows](https://jqplay.org/s/lYveGGoUwC):\n\n![](/blog-images/871187d03e4505b812bc462a9a0d1a5e.png)\n\n#### Step 6, Apply\n\nNow we are ready to actually apply the records and see how much damage we can do! Take the entire output of your records with this kind of query:\n\n```yaml\naws route53 list-resource-record-sets \\\n--hosted-zone-id ${hostedzoneid} \\\n--max-items 10000 \\\n--output json\n```\n\nAnd pipe it into the handy command line options provided at the bottom of your screen in the jq player application:\n\n```yaml\n\njq --compact-output '[.ResourceRecordSets[] |\n  select(.AliasTarget.DNSName == \"something.us-west-2.elb.amazonaws.com.\") |\n  {Action: \"DELETE\", ResourceRecordSet: {Name: .Name, Type: .Type, AliasTarget: .AliasTarget}}] |\n  _nwise(1) |\n  {Changes: .}'\n  \n```\n\nAnd use split to create a bunch of individual files:\n\n```yaml\nsplit -l 1\n```\n\nThen loop over all your files to apply them in Route53:\n\n```yaml\nfor file in x*; do\naws route53 change-resource-record-sets \\\n--hosted-zone-id=${hostedzoneid} \\\n--cange-batch=file://${file}\ndone\n```\n\n#### Step 7, Profit\n\nI hope you enjoyed this exploration and how quickly you can manipulate JSON data with jq to produce a fast, efficient, and automated method of clearing out a bunch of old Route53 entries in your zones!\n\nhero image: [Sharon McCutcheon via Unsplash.com](https://unsplash.com/photos/1wz7cN1XTmk)‍\n",
    "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),g=(a,e)=>{for(var o in e)i(a,o,{get:e[o],enumerable:!0})},s=(a,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of u(e))!f.call(a,n)&&n!==o&&i(a,n,{get:()=>e[n],enumerable:!(r=p(e,n))||r.enumerable});return a};var w=(a,e,o)=>(o=a!=null?d(m(a)):{},s(e||!a||!a.__esModule?i(o,\"default\",{value:a,enumerable:!0}):o,a)),b=a=>s(i({},\"__esModule\",{value:!0}),a);var h=y((S,l)=>{l.exports=_jsx_runtime});var T={};g(T,{default:()=>N,frontmatter:()=>v});var t=w(h()),v={title:\"How to Delete Hundreds or Thousands of Route53 DNS Entries\",summary:\"How do Delete Hundreds, or Possibly Thousands of Route53 DNS Entries Quickly and Easily\",publishDate:\"Wed Feb 03 2021 05:21:12 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:6,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/a40c6571d6ad435527d1213a49721a90.jpg\",imageAlt:\"Hundreds of bright candy representing Route53 DNS Entries\",showCTA:!0,ctaCopy:\"Simplify DNS management with Release: automate bulk Route53 operations and streamline environment setup effortlessly.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-delete-hundreds-or-thousands-of-route53-dns-entries\",relatedPosts:[\"\"],ogImage:\"/blog-images/a40c6571d6ad435527d1213a49721a90.jpg\",excerpt:\"How do Delete Hundreds, or Possibly Thousands of Route53 DNS Entries Quickly and Easily\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function c(a){let e=Object.assign({h3:\"h3\",a:\"a\",span:\"span\",p:\"p\",h4:\"h4\",img:\"img\",pre:\"pre\",code:\"code\"},a.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h3,{id:\"how-to-delete-hundreds-or-thousands-of-route53-entries-quickly-on-the-command-line\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#how-to-delete-hundreds-or-thousands-of-route53-entries-quickly-on-the-command-line\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to Delete Hundreds (or Thousands) of Route53 Entries Quickly on the Command Line\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"overview\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#overview\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Overview\"]}),`\n`,(0,t.jsx)(e.p,{children:\"At Release, we make Staging environments easy by quickly creating and updating environments to run, test, and share your application code in full fledged, isolated environments. In previous versions of our product, we were able to quickly roll out new environments and features by creating tons of AWS Route53 DNS entries for each new application and environment. Unfortunately, that meant that we were quickly creating over 5,000 Route53 entries.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The maximum number of Route53 entries you can have by default in one hosted zone is 10,000, so we needed to fix this before we ran out. Luckily, we added new features to create smart wildcard entries and a routing system to drastically reduce the number of entries we needed to create for ourselves and our customers.\"}),`\n`,(0,t.jsx)(e.p,{children:\"But then we were stuck with a legacy of over 5,000 entries that needed to be deleted (carefully!) in a reasonable timeframe and preferably automatically, rather than by hand. This article will show you how we accomplished the task and how this relatively obscure and niche problem (we hope!) can be solved relatively quickly and painlessly.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"investigation\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#investigation\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Investigation\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The initial approach is to simply come up with a command-line query to list Route53 entries and then parse them one by one to delete them. Unfortunately, the documentation quickly shows this to be the wrong method, since Route53 entry \\u201Cupserts\\u201D (additions or changes) or \\u201Cdeletes\\u201D (as you would expect) need to be batched and uploaded in a transaction. There is no simple \\u201Cdelete one Route53 entry\\u201D command on the CLI as of the time of this writing. In point of fact, this naive approach is actually not a good way to do this type of bulk update anyway. Route53 will correctly handle each batch of operations as a transaction; so that if one entry fails to update or delete for some reason, the whole batch will be rolled back to preserve the integrity of your records.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"I therefore started with one of my favourite Stack Overflow answers that I turn to way more often than I should: \",(0,t.jsx)(e.a,{href:\"https://stackoverflow.com/a/48498598\",children:\"How to Export Route53 Zone File\"}),\". This was one of those copy-paste answers I would blindly use when approaching a Route53 use-case and it happily contained enough of a starting solution to building out the entire point of this blog post.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"a-slight-tangent-on-jq\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#a-slight-tangent-on-jq\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"A Slight Tangent on JQ\"]}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.a,{href:\"https://stedolan.github.io/jq/\",children:\"JQ\"}),\" is a \",(0,t.jsx)(e.a,{href:\"https://stackoverflow.com/a/56114895\",children:\"JSON query language\"}),\" and is billed as \\u201C\",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Sed\",children:\"sed\"}),\" for JSON\\u201D. For me, jq has always been a bit opaque and I usually just copy-paste whatever a Stack Overflow answer has provided. In the case of the problem presented in this blog post, I needed to really dive in and learn about the power jq offers to help me solve this problem. It is, indeed, part of the core solution the above Stack Overflow answer is based on.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first thing to note is that jq can be used to extract, transform, output, rollup, and filter JSON objects or text in a programmatic fashion. In this way, I have started changing my pitch to be that jq is \\u201C\",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/AWK\",children:\"awk\"}),\" for JSON\\u201D. I have found jq syntax and structure to be a bit difficult to test or grasp, so I was delighted to find \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/\",children:\"jq Play\"}),\", an online resource for testing and visualising jq syntax and test inputs. I will use the screenshots from jq play to display my steps as we go along.\"]}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-1-gather-test-data\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-1-gather-test-data\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 1, Gather Test Data\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first step, as exactly described above in Stack Overflow, is to run the AWS CLI to output a JSON list of all of your Route53 entries (in our case, over 5,000+!!!). Take a few lines of the first part of the output to play with. You can grab a few entries by limiting the --max-items option in the list-resource-record-sets command. Take those and paste them into the jq play screen on the left, then select \\u201C.\\u201D as the operator to output everything. You can follow along with this \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/s/0EWB_zhjvG\",children:\"snippet\"}),\". Here is what it looks like initially:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/d9b85c1e4277baadf503ebec1565f804.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is a good starting point but we need to first start with unwrapping the outer layer of the \\u201CResourceRecords\\u201D key to find the list of entries as \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/s/PM3uM757DE\",children:\"follows\"}),\" (turn on the \\u201CCompact View\\u201D to make it easier to understand and see more of what\\u2019s happening:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/8e36c46777593174cef0867a6c03390b.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-2-filter-records\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-2-filter-records\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 2, Filter Records\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now we need to filter out records so that only the \\u201CAliasTarget -> DNSName\\u201D keys matching a particular endpoint get deleted. That is relatively easy to do by filtering results with the pipe (\\u201C|\\u201D) character and using the \\u201CSelect\\u201D operator as \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/s/cKEL8vTJHr\",children:\"follows\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/8059997113e53a00e0f627bd481eb3bb.png\",alt:\"\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Keep in mind that in practice, we will be filtering way more than 2 records from 4 records, but this is just a test before we run the full solution. Also, keep in mind that you could use any number of filters and selector operators (for example on the \\u201CType\\u201D field) to choose which entries to act upon. The world is your oyster!\"}),`\n`,(0,t.jsx)(e.p,{children:\"Which is a silly saying, of course. If the world is your oyster, then that is a salty, squishy, goey, messy, muscly world. And where is the pearl in your world? Some hard round misshapen thing rolling around in your bedroom so you can\\u2019t sleep comfortably? I suppose it\\u2019s better than sand everywhere, but really. \\u201CThe world is your oyster\\u201D?\"}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-3-manipulate-rows-for-delete\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-3-manipulate-rows-for-delete\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 3, Manipulate Rows for Delete\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The next step is to manipulate the rows we\\u2019re filtering/selecting to create the individual records that will become the batch delete operation. To do this, we will need to construct the output record form for each individual delete action using the schema that Route53 is going to expect. In this case, we extract several fields from each record and wrap them inside an \\u201CAction: DELETE\\u201D key as \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/s/hsZ65XuciY\",children:\"follows\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/1b31c9ae6788a3eeae8ce3da27bed79f.png\",alt:\"\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Notice how the JSON in the right hand pane is looking like the output that we will be able to pipe back into an AWS CLI call to delete entries. We\\u2019re coming along nicely!\"}),`\n`,(0,t.jsx)(e.p,{children:\"Also keep in mind that you could extend this example to manipulate entries in any way you like, for example, changing record types, or bulk-changing TTLs or some other field.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Notice how the outputs are newline-separated? This initially confused me, but you can easily create a list or map by wrapping the whole query inside either square brackets (for a list) or curly brackets for a map:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/d20d696ffc43a5907c4edc33838c3613.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-4-mind-the-max-batch-size\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-4-mind-the-max-batch-size\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 4, Mind the Max Batch Size\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We\\u2019re almost done, but since we\\u2019re deleting multiple hundreds (thousands, actually) of records, we want to set a batch size that is reasonable and that Route53 will accept. According to the documentation, the maximum batch size is 1000. I arbitrarily chose a batch size of 100 that is more reasonable and manageable for the CLI, so layer on the _nwise() operator as \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/s/uu649cb-BM\",children:\"follows\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/d5376d45a40fa7c9a2a0caa01234e4fd.png\",alt:\"\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Keep in mind that in this example, I\\u2019m playing with 4 records, filtered to 2, and then batched into sizes of 1. In reality, we\\u2019re going to apply this to 5,000+ records, filtered to ~4,000 records, and batched at 100. The question you will want to ask yourself is, \\u201CHow many records do I want to hassle with (possibly manually) if something explodes in the middle? Or if some intervention is required in a batch to add/remove/massage form one or more batches?\\u201D I settled on about 100.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Hopefully you\\u2019re not as crazy as I am and in a similar predicament. You should be smart enough to avoid this situation in the first place. But if you are as crazy as I am, welcome to the club; we\\u2019re very sympathetic to your problems around here. I also really appreciate you reading all the way through to this spot, you crazy, wonderful, patient soul.\"}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-5-wrap-it-up\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-5-wrap-it-up\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 5, Wrap It Up\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Each batch is ready to be delivered on one line as shown above, however, before we\\u2019re done we need to add a \\u201CChanges\\u201D key at the top level for Route53 to accept. This is easy to accomplish by just piping the results into a map with one key and using the period (\\u201C.\\u201D) to select \\u201Ceverything\\u201D as \",(0,t.jsx)(e.a,{href:\"https://jqplay.org/s/lYveGGoUwC\",children:\"follows\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/871187d03e4505b812bc462a9a0d1a5e.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-6-apply\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-6-apply\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 6, Apply\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Now we are ready to actually apply the records and see how much damage we can do! Take the entire output of your records with this kind of query:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`aws route53 list-resource-record-sets \\\\\n--hosted-zone-id \\${hostedzoneid} \\\\\n--max-items 10000 \\\\\n--output json\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"And pipe it into the handy command line options provided at the bottom of your screen in the jq player application:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`\njq --compact-output '[.ResourceRecordSets[] |\n \\xA0select(.AliasTarget.DNSName == \"something.us-west-2.elb.amazonaws.com.\") |\n \\xA0{Action: \"DELETE\", ResourceRecordSet: {Name: .Name, Type: .Type, AliasTarget: .AliasTarget}}] |\n \\xA0_nwise(1) |\n \\xA0{Changes: .}'\n \\xA0\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"And use split to create a bunch of individual files:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`split -l 1\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Then loop over all your files to apply them in Route53:\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`for file in x*; do\naws route53 change-resource-record-sets \\\\\n--hosted-zone-id=\\${hostedzoneid} \\\\\n--cange-batch=file://\\${file}\ndone\n`})}),`\n`,(0,t.jsxs)(e.h4,{id:\"step-7-profit\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#step-7-profit\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 7, Profit\"]}),`\n`,(0,t.jsx)(e.p,{children:\"I hope you enjoyed this exploration and how quickly you can manipulate JSON data with jq to produce a fast, efficient, and automated method of clearing out a bunch of old Route53 entries in your zones!\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"hero image: \",(0,t.jsx)(e.a,{href:\"https://unsplash.com/photos/1wz7cN1XTmk\",children:\"Sharon McCutcheon via Unsplash.com\"}),\"\\u200D\"]})]})}function k(a={}){let{wrapper:e}=a.components||{};return e?(0,t.jsx)(e,Object.assign({},a,{children:(0,t.jsx)(c,a)})):c(a)}var N=k;return b(T);})();\n;return Component;"
  },
  "_id": "blog/posts/how-to-delete-hundreds-or-thousands-of-route53-dns-entries.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/how-to-delete-hundreds-or-thousands-of-route53-dns-entries.mdx",
    "sourceFileName": "how-to-delete-hundreds-or-thousands-of-route53-dns-entries.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/how-to-delete-hundreds-or-thousands-of-route53-dns-entries"
  },
  "type": "BlogPost",
  "computedSlug": "how-to-delete-hundreds-or-thousands-of-route53-dns-entries"
}