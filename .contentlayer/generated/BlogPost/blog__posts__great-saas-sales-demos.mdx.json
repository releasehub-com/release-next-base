{
  "title": "Great SaaS Sales Demos - 3 Game Changers",
  "summary": "Great SaaS sales demos using these three game changers enabled by Release environments.",
  "publishDate": "Thu Mar 18 2021 20:48:40 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 7,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/d86fb94eb5fdceaf27ec8fe22a1f131f.jpg",
  "imageAlt": "A man playing chess representing game changers in SaaS Sales Demos",
  "showCTA": true,
  "ctaCopy": "Improve SaaS demos with Release's on-demand environments for seamless collaboration, faster bug resolution, and consistent deployments.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=great-saas-sales-demos",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/d86fb94eb5fdceaf27ec8fe22a1f131f.jpg",
  "excerpt": "Great SaaS sales demos using these three game changers enabled by Release environments.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\n### Great SaaS Sales Demos\n\nSales demos for Software as a Service (SaaS) products are vital to introducing your product to customers and gaining their interest or desire to use your product. The typical way that a SaaS product is demonstrated, especially in this day and age of remote work, is by presenting the application remotely, showing off features and highlighting use cases for the potential customer. A good demo can show the customer that your product is a good fit for them, but it can also do the opposite: a demonstration might reveal problems, shortcomings, or gaps that your SaaS product has that your customer might pick up on.\n\nAs a DevOps engineer, I’ve received and viewed many demonstrations for a wide variety of products over many years. I’ve never had to present a sales demonstration myself (at least, not directly), but I have had to do setup and perform internal demonstrations, and I’ve also had to participate in designing or configuring SaaS product demonstrations. There are two SaaS demonstrations that I’ve participated in that were so memorable, they always come to mind even years later and after hundreds of demonstrations I’ve witnessed. The first demonstration was an unmitigated disaster and the second was one of the best that I ever witnessed thus far. Both of these examples lead to the 3 ways that you can make your SaaS sales demo the best it can possibly be.\n\n### The Bad Example\n\nOne of the worst examples of a SaaS sales demo disaster happened quite a long time ago when a SaaS company was in the middle of releasing a new version of their software. They were also going public and the combination of these two events was a source of great fanfare in the industry and at the SaaS company. The company I worked for had tested the previous version of the product—let’s say the “1.0” product—and we were prospecting to get a very good deal on a one year implementation. The new “2.0” product was being released and our company was one of the customers that would  be a “logo” used to promote how well the product worked and that was trusted by our brand.\n\nThe problem was that internally, many of us engineers and even some of the leadership, agreed that the product wasn’t very good. We were excited to try out the new version but were a bit skeptical the product would be vastly different than the 1.0 product. In our view, the product was large, bloated, unstable, and crashed often. In preparation for the big 2.0 sales demonstration, I sat across from an executive at the SaaS company and listed a long laundry list of issues that I considered important to be fixed in the new product. The executive (who turned out to be the SaaS provider’s CTO!!!) agreed with me completely and reassured me that “all of the issues” had been resolved in the new version.\n\nThe large conference room lights dimmed and in a standing-room-only hush, the product demonstration started and was displayed on the projection screen. It was obvious the product was slow: noticeably slower than even the original. It also crashed almost immediately. The sales person started the demonstration again with a smooth cover-up. I remember the mood was still forgiving because it had crashed so suddenly and so quickly, nobody had really invested too much time yet. The sales demo started again and the product was slightly better. However, I could tell from the tics and movements on the screen that the sales person was purposely avoiding certain features and buttons that I personally knew were problematic in the old version. I knew he was avoiding them because they were likely to be buggy or cause issues.\n\nDespite such careful choreography, the product crashed yet again, in fact, it crashed numerous times to the point where the demonstration simply couldn’t continue. The executives from the SaaS company who were there to personally oversee the demonstration were flabbergasted. I personally heard one of the sales engineers speaking in hushed tones into his cell phone telling his operations folks to try to reboot the demo server, again.\n\nThese are a sample of the types of excuses we were offered:\n\n- “Oh, the new version hasn’t been deployed yet, this is a pre-release demo.”\n- “You know, the dataset is wrong, we need to load more data.”\n- “The internet connection is really laggy and we have a production network environment for the real product.”\n- “The demo server isn’t ready for production yet, we’ve been upgrading our systems as fast as we can.”\n- “We haven’t fully tested this new feature, and it wasn’t supposed to appear in this demonstration. Sorry.”\n\nBut eventually the truth was that the sales demo itself had failed. This had almost nothing to do with the product in actual practice, but that didn’t matter. The demonstration was unable to satisfactorily show what the product could do.\n\n### The Good Example\n\nOn the opposite side of the spectrum, one of the best sales SaaS demos I witnessed was nearly perfect and stood out how great the process was. The SaaS product was a monitoring tool that provided metrics and log events for a running application, and would be used to drill down and into metrics, events, logs, and so forth. This demonstration occurred many years ago and does not reflect on any present companies or products you may think of. I just want to clarify this so that you do not form an impression of any existing company or product today.\n\nThe SaaS salesperson ran the demonstration by logging into the actual live product with a special demonstration credential, and showed real, live data that were flowing from a fake application that was written specifically for the demonstration. It ran on a ten-minute cycle of generating pre-created events, metrics, logs, and so forth. The salesperson was able to look at “real,” “live,” and updated data as events happened in the application. Because the data were pregenerated and ran continuously, it seemed like the product worked perfectly and would do exactly what the salesperson seemed to make so easy.\n\nThere was one flaw that I spotted and confirmed but it was relatively minor. This flaw does demonstrate one of the key points I will discuss later on for a successful SaaS demonstration. The salesperson was unable to change or update any of the data or the layout of the screen. They were unable to demonstrate the ability to create and edit reports for the product. They were using what was essentially a “read-only” demonstration of the product and could not change anything inside the account. The reason for this is to perfectly preserve the demonstration process so that the next time the product is reviewed, it would be exactly the way it was before without any possible changes.\n\nBased on these examples, I will now detail the 3 most important ways to pull off a perfect SaaS sales demonstration.\n\n### Game Changer 1: Provide a “Real” Experience\n\nYour SaaS demonstration must be as “real” as possible. I use the word “real” in scare quotes because often you cannot provide any actual “real” customer data since the prospects aren’t customers yet. Even if you do have some customer data or can use actual real data of some sort, the customers are not interacting in any real way with the product yet, so let’s just use the scare quotes. Never-the-less, the data that you use in the sales demonstration needs to be realistic enough to provide a valid reflection of what your product can do and what the customer needs, in a way that the product actually works.\n\nThere is no other way to perform this than to use your actual live product in its actual live state. There are a lot of excuses and corners you will want to cut around this issue, but believe me when I tell you that this is critical. You must use your actual product in its actual state to perform the SaaS demonstration. When a customer test drives a car at the dealership, they are driving a real car that can be sold, not a fake or reproduction or toy model. You must do the same with your SaaS product.\n\nYou will need a stable, performant, fully functional, and fully capable product that functions exactly the way it will function when the customer logs in and starts using the product. It must function perfectly the first time, the second time, and the _nth_ time you demonstrate your product. It must not conflict with someone else when two salespeople perform a demonstration at the same time, and it must not have any leftover or incorrect settings from a previous demonstration. It also must be stable and not be updated or rebooted or crash because of normal operations of the live site.\n\nThis is where a [Release](https://releasehub.com) sales demonstration environment comes into play. A salesperson or organization that uses Release would have an environment setup and ready to deploy at a moment’s notice with pre-populated data, user accounts, and features fixed to a particular time or branch set. A few minutes before the demonstration, the salesperson would simply start a new, completely isolated and perfectly preserved application stack and dataset, ready to fully demonstrate the full, live, exact duplicate SaaS product to the customer. There is no chance for shared environments to conflict; the demonstrations can be tailored to each customer industry or feature set (if applicable); and there is no possibility of having incorrect settings or data present that can disrupt the demonstration.\n\nBecause the scale of the application can be set for one person or only one small subset of a customer, the application can be tuned to perform perfectly and for very little cost compared to the production environment. As soon as the demonstration is finished, the environment can be destroyed so that any hosting costs stop immediately.\n\n### Game Changer 2: Provide a Live Experience\n\nNotice I did not use scare quotes in this section for the word “live.” The demonstration experience can be faked to some extent in terms of pre-populated data or accounts, but it cannot be faked in terms of actual functionality. You cannot just show a static video of your product demonstration and expect customers to buy into it. The potential customers must be able to intervene, interject, ask “what if,” or (even better) take over the controls and “see what happens.”\n\nI already can hear some objections from salespeople who say that when an application is truly live then it is subject to unknown influences and problems. This is true, except that if you have a product experience that is well-tested and fixed in place at a particular time and version, then the demonstration can be well-rehearsed and practiced. This is directly at odds with the usual organization's push to release new features and update the product regularly. How is it possible to be able to have completely stable, well-populated, isolated environments at the same time that the development cycle needs to be fast, regularly spaced, and turn quickly?\n\nThis is where [Release](https://releasehub.com) sales demonstration environments come into play. An application template can be set to a stable version or branch that is well-tested and cleaned for use to show to customers. It will be prepopulated with well-known, well-tested data. When a salesperson or sales organization is ready to show off new features or product enhancements, those features can be versioned and configured for use either as a separate application or as an existing branch of the Release application so that it can be spun up on demand for a customer. Once the branch and application template are tested, that version can be used by anyone in the sales organization to demonstrate the new features or product experiences and data.\n\nIn this scenario, it doesn’t matter if the production application is running on version 0.9 or 1.1 or even 2.0, the sales demonstration environment can be configured to run exactly the same version 1.0 every single time it is deployed and demonstrated to potential customers. Also, it could be devastating if the product version were to change in the middle of the demonstration or during the customer demonstration time period. Conversely, if the production environment is running on a delayed version and a customer wants to see the new features, the new sales environments can be configured and tested for potential preview customers to give early feedback, advice, or to gain other valuable information.\n\nIn fact, all of these scenarios could be in play at any one time: some sales environments could be set behind on an extremely stable, well-tested product experience while some sales environments can be spun up on demand at exactly the same version of the production experience, while yet other environments can be ahead of production to showcase new features and product experiences. The sales person or organization could pick and choose which scenario they would like to demonstrate and create the new environment tailored to their exact requirements and customer profile.\n\nEach environment would be isolated and stable without any contention or changes interfering.\n\n### Game Changer 3: Provide a Malleable, Persistent Experience—Which Can be Recreated\n\nEven in the best SaaS sales demonstrations I have experienced, there was always a critical and nagging worry I had that the environment was not going to persist and that anything that I was working on or being demonstrated would not last for long after the demo. Strangely, the reverse is true as well: oftentimes the customer might want to revert all their changes back to a pristine state after “messing around” with things. How can you resolve this tension between two extremes?\n\nThis is where [Release](https://releasehub.com) sales demonstration environments come into play. The salesperson or organization can spin up entire environments for one or more customers and allow the customer(s) to “play” with the product without any fear of damaging or impacting anything else. If the customer wants to start over, a new environment could be created, or the exact same environment could be duplicated to start over. In fact, the salesperson could construct several accounts for the customer to use if that is appropriate, or if multiple employees or departments could be interacting with each other or the demonstration. All of this can happen in such a way that the isolated environment can be snapshot or ported to production once everything is set up the way it should be. Alternatively, the snapshot could be ported to a new sales demonstration environment for a “reset.”\n\nEven better, in some cases, the new sales demonstration environment could become a staging or testing environment for the customer to use indefinitely or on-demand when they need to test possible scenarios or possibilities. All of this can occur without any impact or conflicts with the live production product. In a few rare cases, the SaaS product could become so customized to an industry vertical or customer that it may become a standalone environment live in production for use by that customer or industry.\n\nThis brings up a great point about environments at Release: they are all identical in design and spirit, and can be used for any and for all purposes. A software engineer’s local development idea can become a testing ground for product development, which can easily be deployed for a sales demonstration, which could easily become a live production environment running live paying customers. With Release, your environments are not limited by even the sky above or the ground below!\n\nPhoto by [Carlos Esteves](https://unsplash.com/@dimage_carlos?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText) on [Unsplash](/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText)\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var y=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),w=(a,e)=>{for(var o in e)s(a,o,{get:e[o],enumerable:!0})},i=(a,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of p(e))!f.call(a,n)&&n!==o&&s(a,n,{get:()=>e[n],enumerable:!(r=u(e,n))||r.enumerable});return a};var g=(a,e,o)=>(o=a!=null?h(m(a)):{},i(e||!a||!a.__esModule?s(o,\"default\",{value:a,enumerable:!0}):o,a)),v=a=>i(s({},\"__esModule\",{value:!0}),a);var l=y((I,d)=>{d.exports=_jsx_runtime});var T={};w(T,{default:()=>x,frontmatter:()=>b});var t=g(l()),b={title:\"Great SaaS Sales Demos - 3 Game Changers\",summary:\"Great SaaS sales demos using these three game changers enabled by Release environments.\",publishDate:\"Thu Mar 18 2021 20:48:40 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:7,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/d86fb94eb5fdceaf27ec8fe22a1f131f.jpg\",imageAlt:\"A man playing chess representing game changers in SaaS Sales Demos\",showCTA:!0,ctaCopy:\"Improve SaaS demos with Release's on-demand environments for seamless collaboration, faster bug resolution, and consistent deployments.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=great-saas-sales-demos\",relatedPosts:[\"\"],ogImage:\"/blog-images/d86fb94eb5fdceaf27ec8fe22a1f131f.jpg\",excerpt:\"Great SaaS sales demos using these three game changers enabled by Release environments.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function c(a){let e=Object.assign({h3:\"h3\",a:\"a\",span:\"span\",p:\"p\",ul:\"ul\",li:\"li\",em:\"em\"},a.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.h3,{id:\"great-saassales-demos\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#great-saassales-demos\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Great SaaS\\xA0Sales Demos\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Sales demos for Software as a Service (SaaS) products are vital to introducing your product to customers and gaining their interest or desire to use your product. The typical way that a SaaS product is demonstrated, especially in this day and age of remote work, is by presenting the application remotely, showing off features and highlighting use cases for the potential customer. A good demo can show the customer that your product is a good fit for them, but it can also do the opposite: a demonstration might reveal problems, shortcomings, or gaps that your SaaS product has that your customer might pick up on.\"}),`\n`,(0,t.jsx)(e.p,{children:\"As a DevOps engineer, I\\u2019ve received and viewed many demonstrations for a wide variety of products over many years. I\\u2019ve never had to present a sales demonstration myself (at least, not directly), but I have had to do setup and perform internal demonstrations, and I\\u2019ve also had to participate in designing or configuring SaaS product demonstrations. There are two SaaS demonstrations that I\\u2019ve participated in that were so memorable, they always come to mind even years later and after hundreds of demonstrations I\\u2019ve witnessed. The first demonstration was an unmitigated disaster and the second was one of the best that I ever witnessed thus far. Both of these examples lead to the 3 ways that you can make your SaaS sales demo the best it can possibly be.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"the-bad-example\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#the-bad-example\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Bad Example\"]}),`\n`,(0,t.jsx)(e.p,{children:\"One of the worst examples of a SaaS sales demo disaster happened quite a long time ago when a SaaS company was in the middle of releasing a new version of their software. They were also going public and the combination of these two events was a source of great fanfare in the industry and at the SaaS company. The company I worked for had tested the previous version of the product\\u2014let\\u2019s say the \\u201C1.0\\u201D product\\u2014and we were prospecting to get a very good deal on a one year implementation. The new \\u201C2.0\\u201D product was being released and our company was one of the customers that would\\xA0 be a \\u201Clogo\\u201D used to promote how well the product worked and that was trusted by our brand.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The problem was that internally, many of us engineers and even some of the leadership, agreed that the product wasn\\u2019t very good. We were excited to try out the new version but were a bit skeptical the product would be vastly different than the 1.0 product. In our view, the product was large, bloated, unstable, and crashed often. In preparation for the big 2.0 sales demonstration, I sat across from an executive at the SaaS company and listed a long laundry list of issues that I considered important to be fixed in the new product. The executive (who turned out to be the SaaS provider\\u2019s CTO!!!) agreed with me completely and reassured me that \\u201Call of the issues\\u201D had been resolved in the new version.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The large conference room lights dimmed and in a standing-room-only hush, the product demonstration started and was displayed on the projection screen. It was obvious the product was slow: noticeably slower than even the original. It also crashed almost immediately. The sales person started the demonstration again with a smooth cover-up. I remember the mood was still forgiving because it had crashed so suddenly and so quickly, nobody had really invested too much time yet. The sales demo started again and the product was slightly better. However, I could tell from the tics and movements on the screen that the sales person was purposely avoiding certain features and buttons that I personally knew were problematic in the old version. I knew he was avoiding them because they were likely to be buggy or cause issues.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Despite such careful choreography, the product crashed yet again, in fact, it crashed numerous times to the point where the demonstration simply couldn\\u2019t continue. The executives from the SaaS company who were there to personally oversee the demonstration were flabbergasted. I personally heard one of the sales engineers speaking in hushed tones into his cell phone telling his operations folks to try to reboot the demo server, again.\"}),`\n`,(0,t.jsx)(e.p,{children:\"These are a sample of the types of excuses we were offered:\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"\\u201COh, the new version hasn\\u2019t been deployed yet, this is a pre-release demo.\\u201D\"}),`\n`,(0,t.jsx)(e.li,{children:\"\\u201CYou know, the dataset is wrong, we need to load more data.\\u201D\"}),`\n`,(0,t.jsx)(e.li,{children:\"\\u201CThe internet connection is really laggy and we have a production network environment for the real product.\\u201D\"}),`\n`,(0,t.jsx)(e.li,{children:\"\\u201CThe demo server isn\\u2019t ready for production yet, we\\u2019ve been upgrading our systems as fast as we can.\\u201D\"}),`\n`,(0,t.jsx)(e.li,{children:\"\\u201CWe haven\\u2019t fully tested this new feature, and it wasn\\u2019t supposed to appear in this demonstration. Sorry.\\u201D\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"But eventually the truth was that the sales demo itself had failed. This had almost nothing to do with the product in actual practice, but that didn\\u2019t matter. The demonstration was unable to satisfactorily show what the product could do.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"the-good-example\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#the-good-example\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Good Example\"]}),`\n`,(0,t.jsx)(e.p,{children:\"On the opposite side of the spectrum, one of the best sales SaaS demos I witnessed was nearly perfect and stood out how great the process was. The SaaS product was a monitoring tool that provided metrics and log events for a running application, and would be used to drill down and into metrics, events, logs, and so forth. This demonstration occurred many years ago and does not reflect on any present companies or products you may think of. I just want to clarify this so that you do not form an impression of any existing company or product today.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The SaaS salesperson ran the demonstration by logging into the actual live product with a special demonstration credential, and showed real, live data that were flowing from a fake application that was written specifically for the demonstration. It ran on a ten-minute cycle of generating pre-created events, metrics, logs, and so forth. The salesperson was able to look at \\u201Creal,\\u201D \\u201Clive,\\u201D and updated data as events happened in the application. Because the data were pregenerated and ran continuously, it seemed like the product worked perfectly and would do exactly what the salesperson seemed to make so easy.\"}),`\n`,(0,t.jsx)(e.p,{children:\"There was one flaw that I spotted and confirmed but it was relatively minor. This flaw does demonstrate one of the key points I will discuss later on for a successful SaaS demonstration. The salesperson was unable to change or update any of the data or the layout of the screen. They were unable to demonstrate the ability to create and edit reports for the product. They were using what was essentially a \\u201Cread-only\\u201D demonstration of the product and could not change anything inside the account. The reason for this is to perfectly preserve the demonstration process so that the next time the product is reviewed, it would be exactly the way it was before without any possible changes.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Based on these examples, I will now detail the 3 most important ways to pull off a perfect SaaS sales demonstration.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"game-changer-1-provide-a-real-experience\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#game-changer-1-provide-a-real-experience\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Game Changer 1: Provide a \\u201CReal\\u201D Experience\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Your SaaS demonstration must be as \\u201Creal\\u201D as possible. I use the word \\u201Creal\\u201D in scare quotes because often you cannot provide any actual \\u201Creal\\u201D customer data since the prospects aren\\u2019t customers yet. Even if you do have some customer data or can use actual real data of some sort, the customers are not interacting in any real way with the product yet, so let\\u2019s just use the scare quotes. Never-the-less, the data that you use in the sales demonstration needs to be realistic enough to provide a valid reflection of what your product can do and what the customer needs, in a way that the product actually works.\"}),`\n`,(0,t.jsx)(e.p,{children:\"There is no other way to perform this than to use your actual live product in its actual live state. There are a lot of excuses and corners you will want to cut around this issue, but believe me when I tell you that this is critical. You must use your actual product in its actual state to perform the SaaS demonstration. When a customer test drives a car at the dealership, they are driving a real car that can be sold, not a fake or reproduction or toy model. You must do the same with your SaaS product.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"You will need a stable, performant, fully functional, and fully capable product that functions exactly the way it will function when the customer logs in and starts using the product. It must function perfectly the first time, the second time, and the \",(0,t.jsx)(e.em,{children:\"nth\"}),\" time you demonstrate your product. It must not conflict with someone else when two salespeople perform a demonstration at the same time, and it must not have any leftover or incorrect settings from a previous demonstration. It also must be stable and not be updated or rebooted or crash because of normal operations of the live site.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is where a \",(0,t.jsx)(e.a,{href:\"https://releasehub.com\",children:\"Release\"}),\" sales demonstration environment comes into play. A salesperson or organization that uses Release would have an environment setup and ready to deploy at a moment\\u2019s notice with pre-populated data, user accounts, and features fixed to a particular time or branch set. A few minutes before the demonstration, the salesperson would simply start a new, completely isolated and perfectly preserved application stack and dataset, ready to fully demonstrate the full, live, exact duplicate SaaS product to the customer. There is no chance for shared environments to conflict; the demonstrations can be tailored to each customer industry or feature set (if applicable); and there is no possibility of having incorrect settings or data present that can disrupt the demonstration.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Because the scale of the application can be set for one person or only one small subset of a customer, the application can be tuned to perform perfectly and for very little cost compared to the production environment. As soon as the demonstration is finished, the environment can be destroyed so that any hosting costs stop immediately.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"game-changer-2-provide-a-live-experience\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#game-changer-2-provide-a-live-experience\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Game Changer 2: Provide a Live Experience\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Notice I did not use scare quotes in this section for the word \\u201Clive.\\u201D The demonstration experience can be faked to some extent in terms of pre-populated data or accounts, but it cannot be faked in terms of actual functionality. You cannot just show a static video of your product demonstration and expect customers to buy into it. The potential customers must be able to intervene, interject, ask \\u201Cwhat if,\\u201D or (even better) take over the controls and \\u201Csee what happens.\\u201D\"}),`\n`,(0,t.jsx)(e.p,{children:\"I already can hear some objections from salespeople who say that when an application is truly live then it is subject to unknown influences and problems. This is true, except that if you have a product experience that is well-tested and fixed in place at a particular time and version, then the demonstration can be well-rehearsed and practiced. This is directly at odds with the usual organization's push to release new features and update the product regularly. How is it possible to be able to have completely stable, well-populated, isolated environments at the same time that the development cycle needs to be fast, regularly spaced, and turn quickly?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is where \",(0,t.jsx)(e.a,{href:\"https://releasehub.com\",children:\"Release\"}),\" sales demonstration environments come into play. An application template can be set to a stable version or branch that is well-tested and cleaned for use to show to customers. It will be prepopulated with well-known, well-tested data. When a salesperson or sales organization is ready to show off new features or product enhancements, those features can be versioned and configured for use either as a separate application or as an existing branch of the Release application so that it can be spun up on demand for a customer. Once the branch and application template are tested, that version can be used by anyone in the sales organization to demonstrate the new features or product experiences and data.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"In this scenario, it doesn\\u2019t matter if the production application is running on version 0.9 or 1.1 or even 2.0, the sales demonstration environment can be configured to run exactly the same version 1.0 every single time it is deployed and demonstrated to potential customers. Also, it could be devastating if the product version were to change in the middle of the demonstration or during the customer demonstration time period. Conversely, if the production environment is running on a delayed version and a customer wants to see the new features, the new sales environments can be configured and tested for potential preview customers to give early feedback, advice, or to gain other valuable information.\"}),`\n`,(0,t.jsx)(e.p,{children:\"In fact, all of these scenarios could be in play at any one time: some sales environments could be set behind on an extremely stable, well-tested product experience while some sales environments can be spun up on demand at exactly the same version of the production experience, while yet other environments can be ahead of production to showcase new features and product experiences. The sales person or organization could pick and choose which scenario they would like to demonstrate and create the new environment tailored to their exact requirements and customer profile.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Each environment would be isolated and stable without any contention or changes interfering.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"game-changer-3-provide-a-malleable-persistent-experiencewhich-can-be-recreated\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#game-changer-3-provide-a-malleable-persistent-experiencewhich-can-be-recreated\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Game Changer 3: Provide a Malleable, Persistent Experience\\u2014Which Can be Recreated\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Even in the best SaaS sales demonstrations I have experienced, there was always a critical and nagging worry I had that the environment was not going to persist and that anything that I was working on or being demonstrated would not last for long after the demo. Strangely, the reverse is true as well: oftentimes the customer might want to revert all their changes back to a pristine state after \\u201Cmessing around\\u201D with things. How can you resolve this tension between two extremes?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is where \",(0,t.jsx)(e.a,{href:\"https://releasehub.com\",children:\"Release\"}),\" sales demonstration environments come into play. The salesperson or organization can spin up entire environments for one or more customers and allow the customer(s) to \\u201Cplay\\u201D with the product without any fear of damaging or impacting anything else. If the customer wants to start over, a new environment could be created, or the exact same environment could be duplicated to start over. In fact, the salesperson could construct several accounts for the customer to use if that is appropriate, or if multiple employees or departments could be interacting with each other or the demonstration. All of this can happen in such a way that the isolated environment can be snapshot or ported to production once everything is set up the way it should be. Alternatively, the snapshot could be ported to a new sales demonstration environment for a \\u201Creset.\\u201D\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Even better, in some cases, the new sales demonstration environment could become a staging or testing environment for the customer to use indefinitely or on-demand when they need to test possible scenarios or possibilities. All of this can occur without any impact or conflicts with the live production product. In a few rare cases, the SaaS product could become so customized to an industry vertical or customer that it may become a standalone environment live in production for use by that customer or industry.\"}),`\n`,(0,t.jsx)(e.p,{children:\"This brings up a great point about environments at Release: they are all identical in design and spirit, and can be used for any and for all purposes. A software engineer\\u2019s local development idea can become a testing ground for product development, which can easily be deployed for a sales demonstration, which could easily become a live production environment running live paying customers. With Release, your environments are not limited by even the sky above or the ground below!\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Photo by \",(0,t.jsx)(e.a,{href:\"https://unsplash.com/@dimage_carlos?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\",children:\"Carlos Esteves\"}),\" on \",(0,t.jsx)(e.a,{href:\"/?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\",children:\"Unsplash\"})]})]})}function S(a={}){let{wrapper:e}=a.components||{};return e?(0,t.jsx)(e,Object.assign({},a,{children:(0,t.jsx)(c,a)})):c(a)}var x=S;return v(T);})();\n;return Component;"
  },
  "_id": "blog/posts/great-saas-sales-demos.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/great-saas-sales-demos.mdx",
    "sourceFileName": "great-saas-sales-demos.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/great-saas-sales-demos"
  },
  "type": "BlogPost",
  "computedSlug": "great-saas-sales-demos"
}