{
  "title": "Kubernetes Jobs: How to Create, Schedule, Run, and More",
  "summary": "How to use Kubernetes Jobs and a tutorial on how to create, schedule, configure, and run K8 Jobs.\n",
  "publishDate": "Tue Feb 28 2023 17:42:53 GMT+0000 (Coordinated Universal Time)",
  "author": "ira-casteel",
  "readingTime": 7,
  "categories": [
    "kubernetes",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/37f786a88f65ffdbf93fb90b24f05d72.jpg",
  "imageAlt": "Image with a lot of containers",
  "showCTA": true,
  "ctaCopy": "Automate Kubernetes job environment setup with Release for seamless collaboration, faster testing, and consistent deployments.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-jobs-how-to-create-schedule-run-and-more-2",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/37f786a88f65ffdbf93fb90b24f05d72.jpg",
  "excerpt": "How to use Kubernetes Jobs and a tutorial on how to create, schedule, configure, and run K8 Jobs.\n",
  "tags": [
    "kubernetes",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nKubernetes jobs have many real-life applications. For example, you can use jobs to execute a process for data backup. Once the backup is successful, the job stops running the pods. \n\nIn this post, you'll learn how to use Kubernetes jobs. We'll walk you through a tutorial on how to create, schedule, configure, and run Kubernetes Jobs. \n\n### What Is Kubernetes Jobs?\n\nKubernetes jobs are controllers that create one or more [pods](https://release.com/blog/kubernetes-environment-variables#:~:text=Configuration%20for%20Your%20Pods) that will run until execution successfully terminates for a specific number of pods. Once the task assigned to a job completes without any error, the task(job) stops running. In case of a failure, the job attempts to retry until all pods run successfully. You can limit how many times a job retries execution using configurations like **activeDeadline** and **backoffLimit**. \n\n### Use Cases of Kubernetes Jobs (When to Use It)\n\nNow that we know some examples of tasks we can execute using jobs, let's walk through a brief tutorial on how to work with Kubernetes jobs. \n\n#### 1\\. Backups\n\nYou can use Kubernetes jobs to perform a task like the periodic backup of data on your server or application. For example, if you want a backup, you set up a job and run it one time. The job will continue running its pods until the backup completes. If the job fails, it will retry. Hence, you can just start the job and not worry about it stopping until the backup completes. Also, you don't have to worry about the task executing again after the backup succeeds. \n\n#### 2\\. Installing and Uninstalling Services\n\nAnother good example of a task you can perform with Kubernetes jobs is installing new services for your application. Likewise, you can use jobs to remove existing services that you no longer need. Similar to our backup example, these jobs will run and stop executing their pods as soon as they successfully add or remove the target services. If they don’t succeed, the jobs retry the tasks. \n\n### How to Use Kubernetes Jobs\n\nNow that we know some examples of tasks we can execute using jobs, let's walk through a brief tutorial on how to work with Kubernetes jobs. \n\n#### Prerequisites\n\nIn order to follow along better, you'll need to have the following tools and experience: \n\n- Kubernetes installation on your target machine\n- Basic knowledge of [Docker](https://release.com/blog/6-docker-compose-best-practices-for-dev-and-prod) and Kubernetes\n- Knowledge of Terminal and CLI\n\nWith that out of the way, let's walk through the actual steps for using jobs. \n\n#### Step 1: Creating a Job\n\nJust like most operations in Kubernetes, you create jobs using a [**YAML file**](https://en.wikipedia.org/wiki/YAML). The YAML file will contain all the details about your job, like the name of the job, what should happen when a pod fails, and so on. In later steps, we'll take a closer look at the various job configuration options. \n\nOn your machine, create a new file with the name **hello_world_job.yaml** and paste the configuration for your new job into it. For this tutorial, we'll use the following code: \n\n`apiVersion: batch/v1 kind: Job metadata:   name: hello-world-job spec:   template:     metadata:       name: hello-world-job     spec:       containers:       - name: hello-world         image: centos:7         command:          - \"bin/bash\"          - \"-c\"          - \"echo hello world\"       restartPolicy: Never`\n\nThe above configuration is for a job that simply prints \"hello world.\" Next, finish up creating the job by running the following command: \n\n`kubectl apply -f hello_world_job.yaml`\n\nYou should get the following message on your terminal if the command runs successfully: \n\n`job.batch/hello-world-job created`\n\nAlso, you can verify that your job was created by running this command: \n\n`kubectl get jobs`\n\nThe output of this command is a list of all your jobs, similar to the following: \n\n![](/blog-images/3c42d4157cff405812e144cf7c56d89d.svg)\n\nFrom the above photo, we can see that we created our **hello-world-job** successfully. \n\n#### Step 2: Configuring a Job\n\nFrom the previous step, we already have a few configurations for our job. However, let's walk through a few more complex configurations. In order to do that, let's create a new job. Create a new **hello_world_4x.yaml** file and add the following code to it: \n\n`apiVersion: batch/v1 kind: Job metadata:   name: hello-world-4x-job spec:   completions: 4   template:     metadata:       name: hello-world-4x-job     spec:       containers:       - name: hello-world-4x         image: centos:7         command:          - \"bin/bash\"          - \"-c\"          - \"echo hello world\"       restartPolicy: Never`\n\n**Completion**: In this bit of code, we introduce a new configuration (i.e., completions). In step 1, Kubernetes created a single pod that runs our task once. However, using completions, we can perform the same task multiple times. Completions run multiple pods one after the other. \n\nLet's take a look at another configuration option. Again, create a new **hello_world_4x_parallel.yaml** file and add the following code to it: \n\n`apiVersion: batch/v1 kind: Job metadata:   name: hello-world-parallel-job spec:   completions: 4   parallelism: 2   template:     metadata:       name: hello-world-parallel-job     spec:       containers:       - name: hello-world-parallel         image: centos:7         command:          - \"bin/bash\"          - \"-c\"          - \"echo hello world\"       restartPolicy: Never`\n\n**Parallelism**: Notice the new configuration item, parallelism. The previous job executed pods one after another. However, we can configure a job to run pods in parallel using this new configuration. \n\n#### Step 3: Schedule a Job\n\nIf you need to start jobs at a specific time in the future, or you want to run them in a repetitive pattern at specific intervals, you should consider using a **CronJob**. A CronJob creates jobs that repeat using a schedule. You can schedule the job using the cron format and can set the schedule in the **schedule** object. \n\nThe following example YAML file shows a CronJob: \n\n`apiVersion: batch/v1 kind: CronJob metadata:   name: hello-world-cron spec:   schedule: \"*/5 * * * *\"   jobTemplate:     spec:       template:         spec:           containers:           - name: hello-world             image: centos:7             imagePullPolicy: IfNotPresent             command:             - /bin/sh             - -c             - \"echo Hello World\"           restartPolicy: OnFailure`\n\nIn this code, the cron schedule format is the string \"\\*/5 \\* \\* \\* \\*.\" It contains 5 sections (separated with white spaces), representing a minute, hour, day of the month, and day of the week in that order. \"\\*/5\" means the task will run every 5 minutes. To explain the schedule format further, if you change the schedule to \"0 \\*/5 \\* \\* \\*\", the job will execute every 5 hours. Also, setting all 5 fields to \"\\*\" means a job will run every minute. \n\nTo create the job on your machine, run the following command: \n\n`kubectl create -f your-cronjob-yaml-file`\n\nTo see the cronjob you just created, run the **kubectl create -f cronjob.yaml** command. \n\n#### Step 4: Running a Job\n\nTo run a job after creating the YAML file for it, run the **kubectl apply -f \\[yaml-file\\]** command. Replace \\[yaml-file\\] with the actual file name for your job configuration. \n\nYou can verify the status of your job by running the **kubectl get jobs** command. For an even more detailed report, you can run **kubectl describe job \\[job-name\\]**. \n\n#### Step 5: Deleting a Job\n\nFor logging and tracking purposes, jobs and the pods they create do not get deleted even after they stop running. However, when you no longer need them, you can clean old jobs and their pods up. To do this you can use the **kubectl delete jobs/\\[job-name\\]** command.   \n\n### Summing Everything up\n\nIn this post, we've covered what Kubernetes Jobs are—resources that create pods that keep running until successful completion. \n\nYou also learned how to create, configure and run Kubernetes jobs. For jobs that need to run at a specific time or repetitively, you can use the CronJob Kubernetes resource. \n\nFinally, you learned how to delete Kubernetes jobs after they complete. Since a record of jobs and their pods remain even after completion, if you no longer need a specific record, you can delete it by deleting the job.\n\n‍\n",
    "code": "var Component=(()=>{var d=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var t in e)r(o,t,{get:e[t],enumerable:!0})},s=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!m.call(o,a)&&a!==t&&r(o,a,{get:()=>e[a],enumerable:!(i=u(e,a))||i.enumerable});return o};var w=(o,e,t)=>(t=o!=null?d(b(o)):{},s(e||!o||!o.__esModule?r(t,\"default\",{value:o,enumerable:!0}):t,o)),j=o=>s(r({},\"__esModule\",{value:!0}),o);var c=g((K,l)=>{l.exports=_jsx_runtime});var x={};f(x,{default:()=>v,frontmatter:()=>y});var n=w(c()),y={title:\"Kubernetes Jobs: How to Create, Schedule, Run, and More\",summary:`How to use Kubernetes Jobs and a tutorial on how to create, schedule, configure, and run K8 Jobs.\n`,publishDate:\"Tue Feb 28 2023 17:42:53 GMT+0000 (Coordinated Universal Time)\",author:\"ira-casteel\",readingTime:7,categories:[\"kubernetes\",\"platform-engineering\"],mainImage:\"/blog-images/37f786a88f65ffdbf93fb90b24f05d72.jpg\",imageAlt:\"Image with a lot of containers\",showCTA:!0,ctaCopy:\"Automate Kubernetes job environment setup with Release for seamless collaboration, faster testing, and consistent deployments.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-jobs-how-to-create-schedule-run-and-more-2\",relatedPosts:[\"\"],ogImage:\"/blog-images/37f786a88f65ffdbf93fb90b24f05d72.jpg\",excerpt:`How to use Kubernetes Jobs and a tutorial on how to create, schedule, configure, and run K8 Jobs.\n`,tags:[\"kubernetes\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function h(o){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",strong:\"strong\",h4:\"h4\",ul:\"ul\",li:\"li\",code:\"code\",img:\"img\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Kubernetes jobs have many real-life applications. For example, you can use jobs to execute a process for data backup. Once the backup is successful, the job stops running the pods.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this post, you'll learn how to use Kubernetes jobs. We'll walk you through a tutorial on how to create, schedule, configure, and run Kubernetes Jobs.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-kubernetes-jobs\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-kubernetes-jobs\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What Is Kubernetes Jobs?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Kubernetes jobs are controllers that create one or more \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/kubernetes-environment-variables#:~:text=Configuration%20for%20Your%20Pods\",children:\"pods\"}),\" that will run until execution successfully terminates for a specific number of pods. Once the task assigned to a job completes without any error, the task(job) stops running. In case of a failure, the job attempts to retry until all pods run successfully. You can limit how many times a job retries execution using configurations like \",(0,n.jsx)(e.strong,{children:\"activeDeadline\"}),\" and \",(0,n.jsx)(e.strong,{children:\"backoffLimit\"}),\".\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"use-cases-of-kubernetes-jobs-when-to-use-it\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#use-cases-of-kubernetes-jobs-when-to-use-it\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Use Cases of Kubernetes Jobs (When to Use It)\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we know some examples of tasks we can execute using jobs, let's walk through a brief tutorial on how to work with Kubernetes jobs.\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"1-backups\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#1-backups\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"1. Backups\"]}),`\n`,(0,n.jsx)(e.p,{children:\"You can use Kubernetes jobs to perform a task like the periodic backup of data on your server or application. For example, if you want a backup, you set up a job and run it one time. The job will continue running its pods until the backup completes. If the job fails, it will retry. Hence, you can just start the job and not worry about it stopping until the backup completes. Also, you don't have to worry about the task executing again after the backup succeeds.\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"2-installing-and-uninstalling-services\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#2-installing-and-uninstalling-services\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"2. Installing and Uninstalling Services\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Another good example of a task you can perform with Kubernetes jobs is installing new services for your application. Likewise, you can use jobs to remove existing services that you no longer need. Similar to our backup example, these jobs will run and stop executing their pods as soon as they successfully add or remove the target services. If they don\\u2019t succeed, the jobs retry the tasks.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"how-to-use-kubernetes-jobs\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#how-to-use-kubernetes-jobs\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to Use Kubernetes Jobs\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we know some examples of tasks we can execute using jobs, let's walk through a brief tutorial on how to work with Kubernetes jobs.\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"prerequisites\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#prerequisites\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Prerequisites\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In order to follow along better, you'll need to have the following tools and experience:\\xA0\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Kubernetes installation on your target machine\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Basic knowledge of \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/6-docker-compose-best-practices-for-dev-and-prod\",children:\"Docker\"}),\" and Kubernetes\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Knowledge of Terminal and CLI\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"With that out of the way, let's walk through the actual steps for using jobs.\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"step-1-creating-a-job\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-1-creating-a-job\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 1: Creating a Job\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Just like most operations in Kubernetes, you create jobs using a \",(0,n.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/YAML\",children:(0,n.jsx)(e.strong,{children:\"YAML file\"})}),\". The YAML file will contain all the details about your job, like the name of the job, what should happen when a pod fails, and so on. In later steps, we'll take a closer look at the various job configuration options.\\xA0\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"On your machine, create a new file with the name \",(0,n.jsx)(e.strong,{children:\"hello_world_job.yaml\"}),\" and paste the configuration for your new job into it. For this tutorial, we'll use the following code:\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:'apiVersion: batch/v1 kind: Job metadata:  \\xA0name: hello-world-job spec:  \\xA0template:  \\xA0 \\xA0metadata:  \\xA0 \\xA0 \\xA0name: hello-world-job  \\xA0 \\xA0spec:  \\xA0 \\xA0 \\xA0containers:  \\xA0 \\xA0 \\xA0- name: hello-world  \\xA0 \\xA0 \\xA0 \\xA0image: centos:7  \\xA0 \\xA0 \\xA0 \\xA0command:  \\xA0 \\xA0 \\xA0 \\xA0 - \"bin/bash\"  \\xA0 \\xA0 \\xA0 \\xA0 - \"-c\"  \\xA0 \\xA0 \\xA0 \\xA0 - \"echo hello world\"  \\xA0 \\xA0 \\xA0restartPolicy: Never'})}),`\n`,(0,n.jsx)(e.p,{children:'The above configuration is for a job that simply prints \"hello world.\" Next, finish up creating the job by running the following command:\\xA0'}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"kubectl apply -f hello_world_job.yaml\"})}),`\n`,(0,n.jsx)(e.p,{children:\"You should get the following message on your terminal if the command runs successfully:\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"job.batch/hello-world-job created\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Also, you can verify that your job was created by running this command:\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"kubectl get jobs\"})}),`\n`,(0,n.jsx)(e.p,{children:\"The output of this command is a list of all your jobs, similar to the following:\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/3c42d4157cff405812e144cf7c56d89d.svg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"From the above photo, we can see that we created our \",(0,n.jsx)(e.strong,{children:\"hello-world-job\"}),\" successfully.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"step-2-configuring-a-job\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-2-configuring-a-job\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 2: Configuring a Job\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"From the previous step, we already have a few configurations for our job. However, let's walk through a few more complex configurations. In order to do that, let's create a new job. Create a new \",(0,n.jsx)(e.strong,{children:\"hello_world_4x.yaml\"}),\" file and add the following code to it:\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:'apiVersion: batch/v1 kind: Job metadata:  \\xA0name: hello-world-4x-job spec:  \\xA0completions: 4  \\xA0template:  \\xA0 \\xA0metadata:  \\xA0 \\xA0 \\xA0name: hello-world-4x-job  \\xA0 \\xA0spec:  \\xA0 \\xA0 \\xA0containers:  \\xA0 \\xA0 \\xA0- name: hello-world-4x  \\xA0 \\xA0 \\xA0 \\xA0image: centos:7  \\xA0 \\xA0 \\xA0 \\xA0command:  \\xA0 \\xA0 \\xA0 \\xA0 - \"bin/bash\"  \\xA0 \\xA0 \\xA0 \\xA0 - \"-c\"  \\xA0 \\xA0 \\xA0 \\xA0 - \"echo hello world\"  \\xA0 \\xA0 \\xA0restartPolicy: Never'})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Completion\"}),\": In this bit of code, we introduce a new configuration (i.e., completions). In step 1, Kubernetes created a single pod that runs our task once. However, using completions, we can perform the same task multiple times. Completions run multiple pods one after the other.\\xA0\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Let's take a look at another configuration option. Again, create a new \",(0,n.jsx)(e.strong,{children:\"hello_world_4x_parallel.yaml\"}),\" file and add the following code to it:\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:'apiVersion: batch/v1 kind: Job metadata:  \\xA0name: hello-world-parallel-job spec:  \\xA0completions: 4  \\xA0parallelism: 2  \\xA0template:  \\xA0 \\xA0metadata:  \\xA0 \\xA0 \\xA0name: hello-world-parallel-job  \\xA0 \\xA0spec:  \\xA0 \\xA0 \\xA0containers:  \\xA0 \\xA0 \\xA0- name: hello-world-parallel  \\xA0 \\xA0 \\xA0 \\xA0image: centos:7  \\xA0 \\xA0 \\xA0 \\xA0command:  \\xA0 \\xA0 \\xA0 \\xA0 - \"bin/bash\"  \\xA0 \\xA0 \\xA0 \\xA0 - \"-c\"  \\xA0 \\xA0 \\xA0 \\xA0 - \"echo hello world\"  \\xA0 \\xA0 \\xA0restartPolicy: Never'})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Parallelism\"}),\": Notice the new configuration item, parallelism. The previous job executed pods one after another. However, we can configure a job to run pods in parallel using this new configuration.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"step-3-schedule-a-job\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-3-schedule-a-job\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 3: Schedule a Job\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you need to start jobs at a specific time in the future, or you want to run them in a repetitive pattern at specific intervals, you should consider using a \",(0,n.jsx)(e.strong,{children:\"CronJob\"}),\". A CronJob creates jobs that repeat using a schedule. You can schedule the job using the cron format and can set the schedule in the \",(0,n.jsx)(e.strong,{children:\"schedule\"}),\" object.\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The following example YAML file shows a CronJob:\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:'apiVersion: batch/v1 kind: CronJob metadata:  \\xA0name: hello-world-cron spec:  \\xA0schedule: \"*/5 * * * *\"  \\xA0jobTemplate:  \\xA0 \\xA0spec:  \\xA0 \\xA0 \\xA0template:  \\xA0 \\xA0 \\xA0 \\xA0spec:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0containers:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- name: hello-world  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0image: centos:7  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0imagePullPolicy: IfNotPresent  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0command:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- /bin/sh  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- -c  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- \"echo Hello World\"  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0restartPolicy: OnFailure'})}),`\n`,(0,n.jsx)(e.p,{children:'In this code, the cron schedule format is the string \"*/5 * * * *.\" It contains 5 sections (separated with white spaces), representing a minute, hour, day of the month, and day of the week in that order. \"*/5\" means the task will run every 5 minutes. To explain the schedule format further, if you change the schedule to \"0 */5 * * *\", the job will execute every 5 hours. Also, setting all 5 fields to \"*\" means a job will run every minute.\\xA0'}),`\n`,(0,n.jsx)(e.p,{children:\"To create the job on your machine, run the following command:\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"kubectl create -f your-cronjob-yaml-file\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To see the cronjob you just created, run the \",(0,n.jsx)(e.strong,{children:\"kubectl create -f cronjob.yaml\"}),\" command.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"step-4-running-a-job\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-4-running-a-job\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 4: Running a Job\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To run a job after creating the YAML file for it, run the \",(0,n.jsx)(e.strong,{children:\"kubectl apply -f [yaml-file]\"}),\" command. Replace [yaml-file] with the actual file name for your job configuration.\\xA0\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can verify the status of your job by running the \",(0,n.jsx)(e.strong,{children:\"kubectl get jobs\"}),\" command. For an even more detailed report, you can run \",(0,n.jsx)(e.strong,{children:\"kubectl describe job [job-name]\"}),\".\\xA0\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"step-5-deleting-a-job\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-5-deleting-a-job\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Step 5: Deleting a Job\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For logging and tracking purposes, jobs and the pods they create do not get deleted even after they stop running. However, when you no longer need them, you can clean old jobs and their pods up. To do this you can use the \",(0,n.jsx)(e.strong,{children:\"kubectl delete jobs/[job-name]\"}),\" command. \\xA0\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"summing-everything-up\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#summing-everything-up\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Summing Everything up\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In this post, we've covered what Kubernetes Jobs are\\u2014resources that create pods that keep running until successful completion.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"You also learned how to create, configure and run Kubernetes jobs. For jobs that need to run at a specific time or repetitively, you can use the CronJob Kubernetes resource.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Finally, you learned how to delete Kubernetes jobs after they complete. Since a record of jobs and their pods remain even after completion, if you no longer need a specific record, you can delete it by deleting the job.\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u200D\"})]})}function k(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var v=k;return j(x);})();\n;return Component;"
  },
  "_id": "blog/posts/kubernetes-jobs-how-to-create-schedule-run-and-more-2.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/kubernetes-jobs-how-to-create-schedule-run-and-more-2.mdx",
    "sourceFileName": "kubernetes-jobs-how-to-create-schedule-run-and-more-2.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/kubernetes-jobs-how-to-create-schedule-run-and-more-2"
  },
  "type": "BlogPost",
  "computedSlug": "kubernetes-jobs-how-to-create-schedule-run-and-more-2"
}