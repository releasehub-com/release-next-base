{
  "title": "What is GitOps and how to get started with GitOps",
  "summary": "We recently joined a panel on Gitops. This blog will summarize the key nuggets and share tips on where to start",
  "publishDate": "Wed Jan 26 2022 02:47:33 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 7,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/c3d3cfa735e4839ea2755b862e3e913f.jpg",
  "imageAlt": "GitOps Panel",
  "showCTA": true,
  "ctaCopy": "Unlock streamlined GitOps workflows with Release's ephemeral environments. Ensure consistent deployments and zero configuration drift.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=what-is-gitops",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/c3d3cfa735e4839ea2755b862e3e913f.jpg",
  "excerpt": "We recently joined a panel on Gitops. This blog will summarize the key nuggets and share tips on where to start",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\n**We recently joined Kong, Stackhawk, Fairwinds and Devops.com to discuss GitOps. You can click** [**here**](https://www.youtube.com/watch?v=m1VN-RjTHHo&feature=youtu.be) **to watch the panel discussion. If you prefer reading, we summarized some of the nuggets for you.**  \n**Does GitOps replace DevOps or is it just an opinionated instance using more declarative tools?**\n\nIn short, \n\n1.  GitOps is a theory, a way to operate: the philosophy that DevOps people use in response to the challenges of operating distributed applications.\n2.  GitOps = XaC (X=infrastructure, configuration or any dependencies) + DevOps\n\nMore in length, GitOps is a tool in the DevOps toolbox. If you want to stretch it a bit, you could say that GitOps is a philosophical bent of DevOps practitioners. The mantra for several years has been “X as code” where “X” could be infrastructure, configuration, policy, and so forth. The meaning of GitOps is usually understood as “check in X and Y happens”.\n\nUnfortunately, as is usually the case with such broad strokes, there are a few places where this falls down. For example, the most oft-cited example of Infrastructure as Code is usually declarative configuration files that are not code. These “Infrastructure as Code” imposters (to use a negative term) are actually static text files that are copy-pasted and littered about the repository as if they were code. Often, these configuration files are whole directories and subtrees full of hardcoded boilerplate that need to be copy-paste-edited.\n\nEven worse, these configuration files often get stale and freeze-dried into branches and can’t be merged due to overlapping changes or schema adaptations that lag behind current versions or upstream fixes.\n\nThe actual practice of GitOps should not be reduced to an overly simple saying like, “X as code,” but rather should be restated as “X in version control with good templating and deployment strategies”. What is the difference? Well, consider the usual case of configuration files sitting in a repository with names like “env.production”, “env.staging”, “env.qa”, and so on. Is this a good GitOps practice?\n\nWhat happens when we need a new environment like “env.qa2”, or even worse, “env.alice_dev”, “env.bob_dev”, “env.caden_dev”, etc.? Instead, you would prefer there be one, maybe two configurations with names like “production” and “testing” where “production” is instantiated many times as staging, qa1, qa2, and so on; and “testing” is instantiated N number of times by anyone and any environment that needs to be created. The “diff” between production and testing configurations should approach zero as time advances to infinity.\n\nThis is why GitOps should not be the only philosophy or tool in the DevOps practitioner’s toolbox. It should be balanced as well by the [twelve factors](https://12factor.net/) of good application development, including “one codebase, many deploys,” “store config in the environment,” and “keep dev, stage, and prod as similar as possible”.\n**Is GitOps it just about managing infrastructure as code or is that just one pain point?**\n\nGitOps is not just about infrastructure. It’s about all dependencies, internal and external. However, infrastructure is the main pain point that people address first.\n\n- More of a means to an end. IaaC gives you the option to automate your infrastructure. DevOps teams can then do whatever automation they need. \n- Leverage the GitFlow to apply to infrastructure. Rigor of dev process to your infrastructure methodology.\n- IaaC is the biggest and most. Don’t have data as code, security policy as code. As infra gets checked in, you’ll end up with needs outside of infra.\n\n‍**Is GitOps a response to continuous delivery obstacles?**\n\nGitOps is an extension of CD. Automating your release process requires many ingredients in place. One such example is automated testing. The same way continuous testing is an extension of CI, GitOps an extension of CD. Automating version control, code reviews, testing and many other aspects of CI/CD relay on the premise that you have the right environments available at the right time in the release cycle.\n\n- It is a response in part, and a necessary part. Because infra is needed, when you make a code change that needs an S3 bucket, you can define it in IaaC alongside your code. Making sure all of that works adds another layer of complexity.\n- It is part of the process to get to CD. Let’s get our config into Git. \n- You don’t have to do GitOps to get to CD. \n- It’s a philosophy… Other tools can be used: Ansible, Puppet, Chef.\n- Build additional tooling is really required (Release, ah hem)\n\nIt would almost be impossible to accomplish continuous delivery without something like GitOps.\n\nBy the way, CD is probably the most challenging part of GitOps and we’re still figuring it out. Testing code we’ve been doing for years. Testing infrastructure is more challenging.\n**How to get started with GitOps? Where do you learn and find the right communities?**\n\nThe two most common tools are [Argo](https://argoproj.github.io/cd/) and Flask. Each supports different applications. If you want to get your hands dirty, try them out and see which one better fits your needs. If you don’t have a Kubernetes cluster, [Release](https://release.com) is the place to go to get started.  \n‍  \nFor the full panel discussion click [here](https://www.youtube.com/watch?v=m1VN-RjTHHo&feature=youtu.be).\n\n### Additional Resources\n\n- [Increase Developer Velocity by Removing Environment Bottlenecks](https://release.com/blog/increase-developer-velocity-by-removing-environment-bottlenecks)\n- [What is an Ephemeral Environment?](https://release.com/ephemeral-environments)\n- [Using Release GitOps](https://docs.releasehub.com/reference-guide/gitops)\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var o in e)a(n,o,{get:e[o],enumerable:!0})},r=(n,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!m.call(n,i)&&i!==o&&a(n,i,{get:()=>e[i],enumerable:!(s=p(e,i))||s.enumerable});return n};var b=(n,e,o)=>(o=n!=null?h(g(n)):{},r(e||!n||!n.__esModule?a(o,\"default\",{value:n,enumerable:!0}):o,n)),w=n=>r(a({},\"__esModule\",{value:!0}),n);var c=f((x,l)=>{l.exports=_jsx_runtime});var k={};y(k,{default:()=>G,frontmatter:()=>v});var t=b(c()),v={title:\"What is GitOps and how to get started with GitOps\",summary:\"We recently joined a panel on Gitops. This blog will summarize the key nuggets and share tips on where to start\",publishDate:\"Wed Jan 26 2022 02:47:33 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:7,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/c3d3cfa735e4839ea2755b862e3e913f.jpg\",imageAlt:\"GitOps Panel\",showCTA:!0,ctaCopy:\"Unlock streamlined GitOps workflows with Release's ephemeral environments. Ensure consistent deployments and zero configuration drift.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=what-is-gitops\",relatedPosts:[\"\"],ogImage:\"/blog-images/c3d3cfa735e4839ea2755b862e3e913f.jpg\",excerpt:\"We recently joined a panel on Gitops. This blog will summarize the key nuggets and share tips on where to start\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function d(n){let e=Object.assign({p:\"p\",strong:\"strong\",a:\"a\",br:\"br\",ol:\"ol\",li:\"li\",ul:\"ul\",h3:\"h3\",span:\"span\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"We recently joined Kong, Stackhawk, Fairwinds and Devops.com to discuss GitOps. You can click\"}),\" \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=m1VN-RjTHHo&feature=youtu.be\",children:(0,t.jsx)(e.strong,{children:\"here\"})}),\" \",(0,t.jsx)(e.strong,{children:\"to watch the panel discussion. If you prefer reading, we summarized some of the nuggets for you.\"}),(0,t.jsx)(e.br,{}),`\n`,(0,t.jsx)(e.strong,{children:\"Does GitOps replace DevOps or is it just an opinionated instance using more declarative tools?\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"In short,\\xA0\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsx)(e.li,{children:\"GitOps is a theory, a way to operate: the philosophy that DevOps people use in response to the challenges of operating distributed applications.\"}),`\n`,(0,t.jsx)(e.li,{children:\"GitOps = XaC (X=infrastructure, configuration or any dependencies) + DevOps\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"More in length, GitOps is a tool in the DevOps toolbox. If you want to stretch it a bit, you could say that GitOps is a philosophical bent of DevOps practitioners. The mantra for several years has been \\u201CX as code\\u201D where \\u201CX\\u201D could be infrastructure, configuration, policy, and so forth. The meaning of GitOps is usually understood as \\u201Ccheck in X and Y happens\\u201D.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Unfortunately, as is usually the case with such broad strokes, there are a few places where this falls down. For example, the most oft-cited example of Infrastructure as Code is usually declarative configuration files that are not code. These \\u201CInfrastructure as Code\\u201D imposters (to use a negative term) are actually static text files that are copy-pasted and littered about the repository as if they were code. Often, these configuration files are whole directories and subtrees full of hardcoded boilerplate that need to be copy-paste-edited.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Even worse, these configuration files often get stale and freeze-dried into branches and can\\u2019t be merged due to overlapping changes or schema adaptations that lag behind current versions or upstream fixes.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The actual practice of GitOps should not be reduced to an overly simple saying like, \\u201CX as code,\\u201D but rather should be restated as \\u201CX in version control with good templating and deployment strategies\\u201D. What is the difference? Well, consider the usual case of configuration files sitting in a repository with names like \\u201Cenv.production\\u201D, \\u201Cenv.staging\\u201D, \\u201Cenv.qa\\u201D, and so on. Is this a good GitOps practice?\"}),`\n`,(0,t.jsx)(e.p,{children:\"What happens when we need a new environment like \\u201Cenv.qa2\\u201D, or even worse, \\u201Cenv.alice_dev\\u201D, \\u201Cenv.bob_dev\\u201D, \\u201Cenv.caden_dev\\u201D, etc.? Instead, you would prefer there be one, maybe two configurations with names like \\u201Cproduction\\u201D and \\u201Ctesting\\u201D where \\u201Cproduction\\u201D is instantiated many times as staging, qa1, qa2, and so on; and \\u201Ctesting\\u201D is instantiated N number of times by anyone and any environment that needs to be created. The \\u201Cdiff\\u201D between production and testing configurations should approach zero as time advances to infinity.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"This is why GitOps should not be the only philosophy or tool in the DevOps practitioner\\u2019s toolbox. It should be balanced as well by the \",(0,t.jsx)(e.a,{href:\"https://12factor.net/\",children:\"twelve factors\"}),` of good application development, including \\u201Cone codebase, many deploys,\\u201D \\u201Cstore config in the environment,\\u201D and \\u201Ckeep dev, stage, and prod as similar as possible\\u201D.\n`,(0,t.jsx)(e.strong,{children:\"Is GitOps it just about managing infrastructure as code or is that just one pain point?\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"GitOps is not just about infrastructure. It\\u2019s about all dependencies, internal and external. However, infrastructure is the main pain point that people address first.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"More of a means to an end. IaaC gives you the option to automate your infrastructure. DevOps teams can then do whatever automation they need.\\xA0\"}),`\n`,(0,t.jsx)(e.li,{children:\"Leverage the GitFlow to apply to infrastructure. Rigor of dev process to your infrastructure methodology.\"}),`\n`,(0,t.jsx)(e.li,{children:\"IaaC is the biggest and most. Don\\u2019t have data as code, security policy as code. As infra gets checked in, you\\u2019ll end up with needs outside of infra.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"\\u200D\",(0,t.jsx)(e.strong,{children:\"Is GitOps a response to continuous delivery obstacles?\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"GitOps is an extension of CD. Automating your release process requires many ingredients in place. One such example is automated testing. The same way continuous testing is an extension of CI, GitOps an extension of CD. Automating version control, code reviews, testing and many other aspects of CI/CD relay on the premise that you have the right environments available at the right time in the release cycle.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:\"It is a response in part, and a necessary part. Because infra is needed, when you make a code change that needs an S3 bucket, you can define it in IaaC alongside your code. Making sure all of that works adds another layer of complexity.\"}),`\n`,(0,t.jsx)(e.li,{children:\"It is part of the process to get to CD. Let\\u2019s get our config into Git.\\xA0\"}),`\n`,(0,t.jsx)(e.li,{children:\"You don\\u2019t have to do GitOps to get to CD.\\xA0\"}),`\n`,(0,t.jsx)(e.li,{children:\"It\\u2019s a philosophy\\u2026 Other tools can be used: Ansible, Puppet, Chef.\"}),`\n`,(0,t.jsx)(e.li,{children:\"Build additional tooling is really required (Release, ah hem)\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"It would almost be impossible to accomplish continuous delivery without something like GitOps.\"}),`\n`,(0,t.jsxs)(e.p,{children:[`By the way, CD is probably the most challenging part of GitOps and we\\u2019re still figuring it out. Testing code we\\u2019ve been doing for years. Testing infrastructure is more challenging.\n`,(0,t.jsx)(e.strong,{children:\"How to get started with GitOps? Where do you learn and find the right communities?\"})]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The two most common tools are \",(0,t.jsx)(e.a,{href:\"https://argoproj.github.io/cd/\",children:\"Argo\"}),\" and Flask. Each supports different applications. If you want to get your hands dirty, try them out and see which one better fits your needs. If you don\\u2019t have a Kubernetes cluster, \",(0,t.jsx)(e.a,{href:\"https://release.com\",children:\"Release\"}),\" is the place to go to get started.\",(0,t.jsx)(e.br,{}),`\n`,\"\\u200D\",(0,t.jsx)(e.br,{}),`\n`,\"For the full panel discussion click \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=m1VN-RjTHHo&feature=youtu.be\",children:\"here\"}),\".\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"additional-resources\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#additional-resources\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Additional Resources\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://release.com/blog/increase-developer-velocity-by-removing-environment-bottlenecks\",children:\"Increase Developer Velocity by Removing Environment Bottlenecks\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://release.com/ephemeral-environments\",children:\"What is an Ephemeral Environment?\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://docs.releasehub.com/reference-guide/gitops\",children:\"Using Release GitOps\"})}),`\n`]})]})}function O(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(d,n)})):d(n)}var G=O;return w(k);})();\n;return Component;"
  },
  "_id": "blog/posts/what-is-gitops.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/what-is-gitops.mdx",
    "sourceFileName": "what-is-gitops.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/what-is-gitops"
  },
  "type": "BlogPost",
  "computedSlug": "what-is-gitops"
}