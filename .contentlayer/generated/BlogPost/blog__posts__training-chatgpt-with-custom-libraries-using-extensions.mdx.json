{
  "title": "Training ChatGPT with Custom Libraries Using Extensions",
  "summary": "How we are now leveraging embeddings and vector databases to generate prompts for ChatGPT.",
  "publishDate": "Mon Apr 24 2023 21:20:19 GMT+0000 (Coordinated Universal Time)",
  "author": "david-giffin",
  "readingTime": 6,
  "categories": [
    "ai",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/c66a474523317a52c700e3703639fe54.png",
  "imageAlt": "A huge book shelf full of books",
  "showCTA": true,
  "ctaCopy": "Enhance ChatGPT training with Release's dynamic environments for accurate AI model generation and testing.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=training-chatgpt-with-custom-libraries-using-extensions",
  "relatedPosts": [
    "rainbow-deployment-why-and-how-to-do-it"
  ],
  "ogImage": "/blog-images/c66a474523317a52c700e3703639fe54.png",
  "excerpt": "How we are now leveraging embeddings and vector databases to generate prompts for ChatGPT.",
  "tags": [
    "ai",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nI'm excited to share with you some of the fascinating work we've been doing here at Release. Our team has been exploring the power of embeddings, vector databases, and language models to create innovative product features. In this post, I'll explain our journey as we explored OpenAI and ChatGPT and how we are now leveraging **embeddings and vector databases** to **generate prompts for ChatGPT**.\n\nWe began to look into various ways to leverage AI in our product. We were hoping that we could have ChatGPT generate Release Application Templates, the blueprints that we use to describe an application in Release. We quickly realized that ChatGPT is only trained on data before September 2021 and it was questionable if it knew anything about Release. \n\n![Image of a solicitiation in ChatGPT](/blog-images/5518599a59a79501590504565f7715e9.png)\n\nRelease supports using both Docker and Docker Compose so you would be able to use these files in Release to generate an Application Template.  But it was clear that ChatGPT needed to be trained using the Release documentation or a large corpus Release Application Templates  if it was going to generate one from scratch.\n\n### Exploring ChatGPT Plugins\n\nChatGPT Plugins seemed like the best way to give ChatGPT outside knowledge from its training set. We signed up for the ChatGPT Plugin waitlist and eventually got access to [ChatGPT Plugins](https://openai.com/blog/chatgpt-plugins). The [ChatGPT Retrieval Plugin](https://github.com/openai/chatgpt-retrieval-plugin) seemed like a place to start experimenting with ChatGPT Plugins and get an understanding of how they work.\n\nAfter adding a few files to the [chatgpt-retrival-plugin](https://github.com/openai/chatgpt-retrieval-plugin/compare/main...davidgiffin:chatgpt-retrieval-plugin:main?expand=1) we had it running Release. Then we started working on loading the data into the plugin, converting all of our docs into JSON and uploading them into the retrieval plugin using the \\`/upsert\\` endpoint. Once the plugin was configured ChatGPT we were able to ask ChatGPT to \"How do I create an application template in Release\"\n\n![Image of a solicitiation in ChatGPT](/blog-images/2dee5aa12a753b1dbd6e6f6dda136721.png)\n\n The retrieval plugin works well for asking a question that can be answered using the documentation it has access to. However it was unclear when plug-ins are going to be generally available for all users to access. We plan to develop a ChatGPT Plugin that everyone can use once that happens. \n\n### Using Embeddings and Prompt Generation\n\nAs our team continued to explore the AI space we came across an article from the [Supabase Blog](https://supabase.com/blog/chatgpt-supabase-docs). The article explained a different approach to \"train\" ChatGPT. Instead of ChatGPT having access to our documentation directly you could feed snippets of the docs to ChatGPT in the prompt. Here is the prompt template that takes the users question and the relevant snippets from the docs to answer a users question:\n\n```none\n\n`\n      You are a very enthusiastic Release representative who loves\n      to help people! Given the following sections from the Release\n      documentation, answer the question using only that information,\n      outputted in markdown format. If you are unsure and the answer\n      is not explicitly written in the documentation, say\n      \"Sorry, I don't know how to help with that.\"\n      \n      Context sections:\n      ${contextText}\nx\n\n      \"\"\"\n      Answer as markdown (including related code snippets if available):\n`\n\n```\n\nThe folks who helped build the Supabase AI functionality also created an open source standalone project [next.js OpenAI Search Starter.](https://github.com/supabase-community/nextjs-openai-doc-search) We have been using this project as a starting point for our AI based documentation search.\n\n### What are Embeddings?\n\nBoth the ChatGPT Retrieval Plugin and Supabase's AI Documentation Search rely on generating, storing and searching embeddings. So what is an embedding?\n\nEmbeddings are a way to represent text, images, or other types of data in a numerical format that can be easily processed by machine learning algorithms. In the context of natural language processing (NLP), word embeddings are vector representations of words, where each word is mapped to a fixed-size vector in a high-dimensional space. These vectors capture the semantic and syntactic relationships between words, allowing us to perform mathematical operations on them. The following diagram shows the relationship between various sentences:\n\n![](/blog-images/7d710cf63d90a88defe3050c4c710f39.png)\n\n[image of sentence embeddings - from DeepAI](https://deepai.org/publication/in-search-for-linear-relations-in-sentence-embedding-spaces)\n\nEmbeddings can be used to find words that are semantically similar to a given word. By calculating the cosine similarity between the vectors of two words, we can determine how similar their meanings are. This is a powerful tool for tasks such as text classification, sentiment analysis, and language translation. \n\n### What are Vector Databases?\n\nVector databases, also known as vector search engines, are specialized databases designed to store and search for high-dimensional vectors efficiently. They enable fast similarity search and nearest neighbor search, which are essential operations when working with embeddings.\n\nSupabase's AI Documentation Search uses [pgvector](https://github.com/pgvector/pgvector) to store and retrieve embeddings. But many other vector databases exist today:\n\n[Pinecone](https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/pinecone), a fully managed vector database\n\n‍[Weaviate](https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/weaviate), an open-source vector search engine\n\n[Redis](https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/redis), a vector database\n\n[Qdrant](https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/qdrant), a vector search engine\n\n[Milvus](https://github.com/openai/openai-cookbook/blob/main/examples/vector_databases/Using_vector_databases_for_embeddings_search.ipynb), a vector database built for scalable similarity search\n\n[Chroma](https://github.com/chroma-core/chroma), an open-source embeddings store\n\n[Typesense](https://typesense.org/docs/0.24.0/api/vector-search.html), fast open source vector search\n\nAll of these databases support three basic things: storing embeddings as vectors, the ability to search the embedding/vectors and finally sorting the results based on similarity. When using OpenAI's \\`text-embedding-ada-002\\` model to generate embeddings OpenAI recommends using [cosine similarity](https://typesense.org/docs/0.24.0/api/vector-search.html) which is built into most of the vector databases listed above. \n\n### How to Generate, Store and Search Embeddings\n\n[OpenAI provides an API endpoint](https://platform.openai.com/docs/api-reference/embeddings) to generate embeddings from any text string. \n\n````ruby\n\n```ruby\n        # OpenAI recommends replacing newlines with spaces\n        # for best results (specific to embeddings)\n        input = section.gsub(/\\n/m, ' ')\n        response = openai.embeddings(parameters: { input: input, model: \"text-embedding-ada-002\"})\n\n        token_count = response['usage']['total_tokens'] # number of tokens used\n        embedding = response['data'].first['embedding'] # array of 1536 floats\n````\n\n````\n\nStoring this data in Redis [redis-stack-server](https://redis.io/docs/stack/) and making it searchable requires an index. To create an index using redis-stack-server you need to issue the following command:\n\n```ruby\n\n````\n\nFT.CREATE index ON JSON PREFIX 1 item: SCHEMA $.id AS id TEXT $.content AS content TEXT $.token_count AS token_count NUMERIC $.embedding AS embedding VECTOR FLAT 6 DIM 1536 DISTANCE_METRIC COSINE TYPE FLOAT64\n\n```\n\n```\n\nNow we can store items into Redis and havethem indexed with the following command:\n\n```JSON\n{\n  \"id\": \"963a2117895ec9a29f242f906fd188c6\",\n  \"content\": \"# App Imports: …\",\n  \"embedding\": [0.008565563, 0.012807296]\n}\n```\n\n````\n\nNote that if you don't provide all 1536 dimensions of the vector your data will not be indexed by Redis and it will give you no error response.\n\nSearching Redis for results and sorting them can be done with the following command:\n\n```redis\nFT.SEARCH index @embedding:[VECTOR_RANGE $r $BLOB]=>{$YIELD_DISTANCE_AS: my_scores} \\\n  PARAMS 4 BLOB \\x00\\x00\\x00 r 5 LIMIT 0 10 SORTBY my_scores DIALECT 2\n````\n\n```\n\nNote that BLOB provided is in binary format and needs to have all 1536 dimensions of vector data as well. We use the OpenAI Embeddings API to generate the embedding vector and convert it to a binary in Ruby using \\`embedding.pack(\"E\\*\")\\`.\n\n### Release ChatGPT Powered Documentation Search\n\nWe have replaced the backend [next.js OpenAI Search Starter](https://github.com/supabase-community/nextjs-openai-doc-search) with Ruby and Redis. We will be releasing our project as an open source Gem that will allow anyone to quickly add AI based document searching to their site.\n\n![](/blog-images/21df17a7235a67ebe788dd7d1ea3d26b.png)\n\nWe have a [working example](https://frontend-vapey-prod.releaseapp.gethandsup.com/) of the Release AI Powered Documentation Search using slightly modified version of the [next.js OpenAI Search Starter.](https://github.com/supabase-community/nextjs-openai-doc-search\\)) We've added support for scrolling, better rendering of markdown (which the Supabase version had) and the ability to plugin your search API backend.\n\n### Conclusion\n\nBy combining the power of embeddings, vector databases, and language models like ChatGPT, we've been able to create product features that provide valuable insights and enhance user experiences. Whether it's answering customer queries, generating personalized content, or providing recommendations, our approach has opened up new possibilities for innovation.\n\nWe're excited about the potential of this technology, and we're looking forward to exploring new ways to leverage it in the future. As we continue to develop and refine our product offerings, we're committed to staying at the forefront of AI and NLP research. Our goal is to create tools and solutions that empower businesses and individuals to harness the power of language models in meaningful and impactful ways.\n\nThank you for taking the time to read our blog post. We hope you found it informative and that it sparked your curiosity about the exciting possibilities that embeddings, vector databases, and language models like ChatGPT have to offer. If you have any questions or would like to learn more about our work at Release, [please feel free to reach out to us or book a demo.](https://release.com/book-a-demo) We'd love to hear from you!\n```\n",
    "code": "var Component=(()=>{var l=Object.create;var i=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var b=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),f=(a,e)=>{for(var t in e)i(a,t,{get:e[t],enumerable:!0})},r=(a,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!u.call(a,o)&&o!==t&&i(a,o,{get:()=>e[o],enumerable:!(s=p(e,o))||s.enumerable});return a};var w=(a,e,t)=>(t=a!=null?l(m(a)):{},r(e||!a||!a.__esModule?i(t,\"default\",{value:a,enumerable:!0}):t,a)),v=a=>r(i({},\"__esModule\",{value:!0}),a);var c=b((C,d)=>{d.exports=_jsx_runtime});var x={};f(x,{default:()=>k,frontmatter:()=>y});var n=w(c()),y={title:\"Training ChatGPT with Custom Libraries Using Extensions\",summary:\"How we are now leveraging embeddings and vector databases to generate prompts for ChatGPT.\",publishDate:\"Mon Apr 24 2023 21:20:19 GMT+0000 (Coordinated Universal Time)\",author:\"david-giffin\",readingTime:6,categories:[\"ai\",\"platform-engineering\"],mainImage:\"/blog-images/c66a474523317a52c700e3703639fe54.png\",imageAlt:\"A huge book shelf full of books\",showCTA:!0,ctaCopy:\"Enhance ChatGPT training with Release's dynamic environments for accurate AI model generation and testing.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=training-chatgpt-with-custom-libraries-using-extensions\",relatedPosts:[\"rainbow-deployment-why-and-how-to-do-it\"],ogImage:\"/blog-images/c66a474523317a52c700e3703639fe54.png\",excerpt:\"How we are now leveraging embeddings and vector databases to generate prompts for ChatGPT.\",tags:[\"ai\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function h(a){let e=Object.assign({p:\"p\",strong:\"strong\",img:\"img\",h3:\"h3\",a:\"a\",span:\"span\",pre:\"pre\",code:\"code\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I'm excited to share with you some of the fascinating work we've been doing here at Release. Our team has been exploring the power of embeddings, vector databases, and language models to create innovative product features. In this post, I'll explain our journey as we explored OpenAI and ChatGPT and how we are now leveraging \",(0,n.jsx)(e.strong,{children:\"embeddings and vector databases\"}),\" to \",(0,n.jsx)(e.strong,{children:\"generate prompts for ChatGPT\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We began to look into various ways to leverage AI in our product. We were hoping that we could have ChatGPT generate Release Application Templates, the blueprints that we use to describe an application in Release. We quickly realized that ChatGPT is only trained on data before September 2021 and it was questionable if it knew anything about Release.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/5518599a59a79501590504565f7715e9.png\",alt:\"Image of a solicitiation in ChatGPT\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Release supports using both Docker and Docker Compose so you would be able to use these files in Release to generate an Application Template.\\xA0 But it was clear that ChatGPT needed to be trained using the Release documentation or a large corpus Release Application Templates\\xA0 if it was going to generate one from scratch.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"exploring-chatgpt-plugins\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#exploring-chatgpt-plugins\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Exploring ChatGPT Plugins\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"ChatGPT Plugins seemed like the best way to give ChatGPT outside knowledge from its training set. We signed up for the ChatGPT Plugin waitlist and eventually got access to \",(0,n.jsx)(e.a,{href:\"https://openai.com/blog/chatgpt-plugins\",children:\"ChatGPT Plugins\"}),\". The \",(0,n.jsx)(e.a,{href:\"https://github.com/openai/chatgpt-retrieval-plugin\",children:\"ChatGPT Retrieval Plugin\"}),\" seemed like a place to start experimenting with ChatGPT Plugins and get an understanding of how they work.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"After adding a few files to the \",(0,n.jsx)(e.a,{href:\"https://github.com/openai/chatgpt-retrieval-plugin/compare/main...davidgiffin:chatgpt-retrieval-plugin:main?expand=1\",children:\"chatgpt-retrival-plugin\"}),' we had it running Release. Then we started working on loading the data into the plugin, converting all of our docs into JSON and uploading them into the retrieval plugin using the `/upsert` endpoint. Once the plugin was configured ChatGPT we were able to ask ChatGPT to \"How do I create an application template in Release\"']}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/2dee5aa12a753b1dbd6e6f6dda136721.png\",alt:\"Image of a solicitiation in ChatGPT\"})}),`\n`,(0,n.jsx)(e.p,{children:\"\\xA0The retrieval plugin works well for asking a question that can be answered using the documentation it has access to. However it was unclear when plug-ins are going to be generally available for all users to access. We plan to develop a ChatGPT Plugin that everyone can use once that happens.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"using-embeddings-and-prompt-generation\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#using-embeddings-and-prompt-generation\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Using Embeddings and Prompt Generation\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"As our team continued to explore the AI space we came across an article from the \",(0,n.jsx)(e.a,{href:\"https://supabase.com/blog/chatgpt-supabase-docs\",children:\"Supabase Blog\"}),'. The article explained a different approach to \"train\" ChatGPT. Instead of ChatGPT having access to our documentation directly you could feed snippets of the docs to ChatGPT in the prompt. Here is the prompt template that takes the users question and the relevant snippets from the docs to answer a users question:']}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-none\",children:`\n\\`\n \\xA0 \\xA0 \\xA0You are a very enthusiastic Release representative who loves\n \\xA0 \\xA0 \\xA0to help people! Given the following sections from the Release\n \\xA0 \\xA0 \\xA0documentation, answer the question using only that information,\n \\xA0 \\xA0 \\xA0outputted in markdown format. If you are unsure and the answer\n \\xA0 \\xA0 \\xA0is not explicitly written in the documentation, say\n \\xA0 \\xA0 \\xA0\"Sorry, I don't know how to help with that.\"\n \\xA0 \\xA0 \\xA0\n \\xA0 \\xA0 \\xA0Context sections:\n \\xA0 \\xA0 \\xA0\\${contextText}\nx\n\n \\xA0 \\xA0 \\xA0\"\"\"\n \\xA0 \\xA0 \\xA0Answer as markdown (including related code snippets if available):\n\\`\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The folks who helped build the Supabase AI functionality also created an open source standalone project \",(0,n.jsx)(e.a,{href:\"https://github.com/supabase-community/nextjs-openai-doc-search\",children:\"next.js OpenAI Search Starter.\"}),\" We have been using this project as a starting point for our AI based documentation search.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-are-embeddings\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-are-embeddings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What are Embeddings?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Both the ChatGPT Retrieval Plugin and Supabase's AI Documentation Search rely on generating, storing and searching embeddings. So what is an embedding?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Embeddings are a way to represent text, images, or other types of data in a numerical format that can be easily processed by machine learning algorithms. In the context of natural language processing (NLP), word embeddings are vector representations of words, where each word is mapped to a fixed-size vector in a high-dimensional space. These vectors capture the semantic and syntactic relationships between words, allowing us to perform mathematical operations on them. The following diagram shows the relationship between various sentences:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/7d710cf63d90a88defe3050c4c710f39.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:\"https://deepai.org/publication/in-search-for-linear-relations-in-sentence-embedding-spaces\",children:\"image of sentence embeddings - from DeepAI\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Embeddings can be used to find words that are semantically similar to a given word. By calculating the cosine similarity between the vectors of two words, we can determine how similar their meanings are. This is a powerful tool for tasks such as text classification, sentiment analysis, and language translation.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-are-vector-databases\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-are-vector-databases\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What are Vector Databases?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Vector databases, also known as vector search engines, are specialized databases designed to store and search for high-dimensional vectors efficiently. They enable fast similarity search and nearest neighbor search, which are essential operations when working with embeddings.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Supabase's AI Documentation Search uses \",(0,n.jsx)(e.a,{href:\"https://github.com/pgvector/pgvector\",children:\"pgvector\"}),\" to store and retrieve embeddings. But many other vector databases exist today:\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/pinecone\",children:\"Pinecone\"}),\", a fully managed vector database\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u200D\",(0,n.jsx)(e.a,{href:\"https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/weaviate\",children:\"Weaviate\"}),\", an open-source vector search engine\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/redis\",children:\"Redis\"}),\", a vector database\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/openai/openai-cookbook/tree/main/examples/vector_databases/qdrant\",children:\"Qdrant\"}),\", a vector search engine\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/openai/openai-cookbook/blob/main/examples/vector_databases/Using_vector_databases_for_embeddings_search.ipynb\",children:\"Milvus\"}),\", a vector database built for scalable similarity search\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://github.com/chroma-core/chroma\",children:\"Chroma\"}),\", an open-source embeddings store\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://typesense.org/docs/0.24.0/api/vector-search.html\",children:\"Typesense\"}),\", fast open source vector search\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"All of these databases support three basic things: storing embeddings as vectors, the ability to search the embedding/vectors and finally sorting the results based on similarity. When using OpenAI's `text-embedding-ada-002` model to generate embeddings OpenAI recommends using \",(0,n.jsx)(e.a,{href:\"https://typesense.org/docs/0.24.0/api/vector-search.html\",children:\"cosine similarity\"}),\" which is built into most of the vector databases listed above.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"how-to-generate-store-and-search-embeddings\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#how-to-generate-store-and-search-embeddings\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to Generate, Store and Search Embeddings\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://platform.openai.com/docs/api-reference/embeddings\",children:\"OpenAI provides an API endpoint\"}),\" to generate embeddings from any text string.\\xA0\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-ruby\",children:`\n\\`\\`\\`ruby\n \\xA0 \\xA0 \\xA0 \\xA0# OpenAI recommends replacing newlines with spaces\n \\xA0 \\xA0 \\xA0 \\xA0# for best results (specific to embeddings)\n \\xA0 \\xA0 \\xA0 \\xA0input = section.gsub(/\\\\n/m, ' ')\n \\xA0 \\xA0 \\xA0 \\xA0response = openai.embeddings(parameters: { input: input, model: \"text-embedding-ada-002\"})\n\n \\xA0 \\xA0 \\xA0 \\xA0token_count = response['usage']['total_tokens'] # number of tokens used\n \\xA0 \\xA0 \\xA0 \\xA0embedding = response['data'].first['embedding'] # array of 1536 floats\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\nStoring this data in Redis [redis-stack-server](https://redis.io/docs/stack/) and making it searchable requires an index. To create an index using redis-stack-server you need to issue the following command:\n\n\\`\\`\\`ruby\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"FT.CREATE index ON JSON PREFIX 1 item: SCHEMA $.id AS id TEXT $.content AS content TEXT $.token_count AS token_count NUMERIC $.embedding AS embedding VECTOR FLAT 6 DIM 1536 DISTANCE_METRIC COSINE TYPE FLOAT64\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{})}),`\n`,(0,n.jsx)(e.p,{children:\"Now we can store items into Redis and havethem indexed with the following command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-JSON\",children:`{\n  \"id\": \"963a2117895ec9a29f242f906fd188c6\",\n  \"content\": \"# App Imports: \\u2026\",\n  \"embedding\": [0.008565563, 0.012807296]\n}\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\nNote that if you don't provide all 1536 dimensions of the vector your data will not be indexed by Redis and it will give you no error response.\n\nSearching Redis for results and sorting them can be done with the following command:\n\n\\`\\`\\`redis\nFT.SEARCH index @embedding:[VECTOR_RANGE $r $BLOB]=>{$YIELD_DISTANCE_AS: my_scores} \\\\\n  PARAMS 4 BLOB \\\\x00\\\\x00\\\\x00 r 5 LIMIT 0 10 SORTBY my_scores DIALECT 2\n`})}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{children:`\nNote that BLOB provided is in binary format and needs to have all 1536 dimensions of vector data as well. We use the OpenAI Embeddings API to generate the embedding vector and convert it to a binary in Ruby using \\\\\\`embedding.pack(\"E\\\\*\")\\\\\\`.\n\n### Release ChatGPT Powered Documentation Search\n\nWe have replaced the backend [next.js OpenAI Search Starter](https://github.com/supabase-community/nextjs-openai-doc-search) with Ruby and Redis. We will be releasing our project as an open source Gem that will allow anyone to quickly add AI based document searching to their site.\n\n![](/blog-images/21df17a7235a67ebe788dd7d1ea3d26b.png)\n\nWe have a [working example](https://frontend-vapey-prod.releaseapp.gethandsup.com/) of the Release AI Powered Documentation Search using slightly modified version of the [next.js OpenAI Search Starter.](https://github.com/supabase-community/nextjs-openai-doc-search\\\\)) We've added support for scrolling, better rendering of markdown (which the Supabase version had) and the ability to plugin your search API backend.\n\n### Conclusion\n\nBy combining the power of embeddings, vector databases, and language models like ChatGPT, we've been able to create product features that provide valuable insights and enhance user experiences. Whether it's answering customer queries, generating personalized content, or providing recommendations, our approach has opened up new possibilities for innovation.\n\nWe're excited about the potential of this technology, and we're looking forward to exploring new ways to leverage it in the future. As we continue to develop and refine our product offerings, we're committed to staying at the forefront of AI and NLP research. Our goal is to create tools and solutions that empower businesses and individuals to harness the power of language models in meaningful and impactful ways.\n\nThank you for taking the time to read our blog post. We hope you found it informative and that it sparked your curiosity about the exciting possibilities that embeddings, vector databases, and language models like ChatGPT have to offer. If you have any questions or would like to learn more about our work at Release, [please feel free to reach out to us or book a demo.](https://release.com/book-a-demo) We'd love to hear from you!\n`})})]})}function T(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(h,a)})):h(a)}var k=T;return v(x);})();\n;return Component;"
  },
  "_id": "blog/posts/training-chatgpt-with-custom-libraries-using-extensions.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/training-chatgpt-with-custom-libraries-using-extensions.mdx",
    "sourceFileName": "training-chatgpt-with-custom-libraries-using-extensions.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/training-chatgpt-with-custom-libraries-using-extensions"
  },
  "type": "BlogPost",
  "computedSlug": "training-chatgpt-with-custom-libraries-using-extensions"
}