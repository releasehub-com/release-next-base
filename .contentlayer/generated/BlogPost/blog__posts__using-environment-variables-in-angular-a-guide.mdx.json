{
  "title": "Using Environment Variables in Angular: A Guide",
  "summary": "What are environments? Why do you need them? And how do you correctly use environment variables in an Angular app?",
  "publishDate": "Mon Jan 23 2023 14:06:16 GMT+0000 (Coordinated Universal Time)",
  "author": "",
  "readingTime": 5,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/9de6930e0d988897966633594a3cfe34.png",
  "imageAlt": "Using Environment Variables in Angular: A Guide",
  "showCTA": true,
  "ctaCopy": "By automating environment setup like Angular, Release simplifies managing different environments for seamless deployment and testing.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=using-environment-variables-in-angular-a-guide",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/9de6930e0d988897966633594a3cfe34.png",
  "excerpt": "Learn how to effectively use environment variables in your Angular applications for better configuration management.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "date": "2024-02-05",
  "body": {
    "raw": "\n![angular environment](/blog-images/c4635aef1048ce157456670de7326463.png)\n\nAngular is one of the most popular and preferred frontend frameworks today, especially among large engineering teams. It's backed by a robust open-source community that makes it an ideal choice for building scalable web applications.\n\nHowever, being a frontend framework, your Angular application at some point needs to communicate with an external API or a third-party service application.\n\nFor verifying authentic communication between your Angular application and the server, you'll need to use API keys and URLs that may change based on the environment of your Angular application.\n\nIn this post, I'll walk you through how to use environment variables in an Angular application.\n\n![](/blog-images/6e56bd2300ad21054eb696f30be767e8.png)\n\n## **What are Environments in Angular?**\n\nBefore we get into what environment variables are, let's quickly understand what an environment means for Angular. Angular by default provides a way to detect and modify some files in your application based on where the application is running.\n\nBroadly speaking, Angular considers two environments for any application. One is the development environment, which means you're running Angular locally on your own system. This is when you're actually writing code for your Angular application.\n\nThe other environment is production. This is where your Angular application is running for the end users on a domain or a server. This environment comes into the picture when you create a JavaScript bundle for your Angular application and deploy it to production.\n\n## **How Does Angular Know Which Environment?**\n\nNow that we understand what environments are in Angular, let's see how Angular maintains and keeps track of them.\n\nCreate a fresh Angular app by running the following:\n\nng new angular-environment-variables\n\nTo keep track of different environments, Angular maintains an environment directory in the src directory:\n\n![](/blog-images/f825bb67f75affcad84aca257f1ff2a4.png)\n\nNotice that Angular maintains two environment files called **environment.ts** and **environment.prod.ts**.\n\nNow, let's go to the **angular.json** file in the root directory. If you look closely at the **configurations** section, you'll notice it has some configurations declared for **production** and **development**.\n\n![angular environment](/blog-images/b7ee3bff372e7733bef1883ec4284b1f.png)\n\nIf you take a look at the **fileReplacements** array in this file, you'll see it instructs Angular to replace the **environment.ts** file with the **environment.prod.ts** file for production. So, when you run the **ng build** command and deploy your Angular application in production, Angular automatically switches these two files so that the production bundle uses the production environment.\n\n## **Detecting Environment in Angular**\n\nAngular makes it really easy for you to detect the environment you're running it in. There are also other ways you can do this, including by checking the URL of your application's domain. But Angular provides an out-of-the-box solution for this.\n\nLet's explore this a bit.\n\nIn the **src/app/app.component.ts** file, import the **isDevMode** from **@angular/core**:\n\n```typescript\nimport { Component, isDevMode } from \"@angular/core\";\n```\n\nThen, create a variable called **environment** inside the AppComponent:\n\n```typescript\n@Component({\n  selector: \"app-root\",\n  template: \"<h1>{{title}}</h1>\",\n})\nexport class AppComponent {\n  title = \"angular-environment-variables\";\n  environment = \"\";\n}\n```\n\nNow we can use the **isDevMode** to populate the **environment** variable above:\n\n```typescript\n@Component({\n  selector: \"app-root\",\n  template: \"<h1>{{title}}</h1>\",\n})\nexport class AppComponent {\n  title = \"angular-environment-variables\";\n  environment = \"\";\n\n  ngOnInit() {\n    if (isDevMode()) {\n      this.environment = \"Development\";\n    } else {\n      this.environment = \"Production\";\n    }\n  }\n}\n```\n\nLet's now render the **environment** variable in the component's HTML:\n\n```html\n<h1>This is Angular app running in {{environment}} Environment</h1>\n```\n\nIf you visit your Angular development server, it should tell you that your Angular app is running in a development environment:\n\n![](/blog-images/5edfe8892fb6dacc5f586f73cfba9ce5.png)\n\nGreat!\n\nNow let's look at how we can modify or update our environment files to use environment variables in our Angular application.\n\n## **Using Environment Variables in Angular**\n\nNow that you understand how Angular maintains and keeps track of the environment, let's play around with the environment directory that we have in the root directory.\n\nFirst, let's look at the default contents of each. The **/src/environments/environment.ts** file contains the following code by default:\n\n```typescript\n// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';\n// Included with Angular CLI.\n```\n\nSimilarly, if we look at the **/src/environmnets/environment.prod.ts** file, we see this:\n\n```typescript\nexport const environment = {\n  production: true,\n};\n```\n\nNow, let's say you wish to add API URLs for the development and production environment. Here's how the **/src/environments/environment.ts** file could look:\n\n```typescript\nexport const environment = {\n  production: false,\n  apiUrl: \"local api url\",\n};\n```\n\nAnd your **/src/environments/environments.prod.ts** file could look like this:\n\n```typescript\nexport const environment = {\n  production: true,\n  apiUrl: \"production api url\",\n};\n```\n\nNow, let's go and use these environment variables in our app component. Update the **app.component.ts** file with the following:\n\n```typescript\n// app.component.ts\nimport { Component, isDevMode } from \"@angular/core\";\nimport { environment } from \"../environments/environment\";\n\n@Component({\n  selector: \"app-root\",\n  template: \"<h1>{{title}}</h1>\",\n})\nexport class AppComponent {\n  title = \"angular-environment-variables\";\n  environment = \"\";\n  apiUrl = environment.apiUrl;\n\n  ngOnInit() {\n    if (isDevMode()) {\n      this.environment = \"Development\";\n    } else {\n      this.environment = \"Production\";\n    }\n  }\n}\n```\n\nThen, we can update the template:\n\n```html\n<h1>\n  This is Angular app running in {% raw %}{{environment}}{% endraw %}\n  Environment\n</h1>\n<h3>API URL: {% raw %}{{apiUrl}}{% endraw %}</h3>\n```\n\nAnd we should now see the **apiUrl** referring to the development environment on the page:\n\n![](/blog-images/3fd86c11ab5c50104e9886c3487f5b28.png)\n\nBut if you close the Angular development server and run it in production mode using this command:\n\n```bash\nng serve --configuration=production\n```\n\nthat should render the template for the production environment as shown below:\n\n![](/blog-images/7d5165a066fd2b04a67c3cd389720232.png)\n\nGreat!\n\nBut what if we had another environment called staging or QA, where we occasionally test our applications?\n\n## **Using Staging Environment Variables**\n\nWe can add as many custom environments in Angular as we want. All we need to do is define the relevant environment configuration in the **angular.json** file and then create that environment file in the **/src/environments** directory.\n\nLet's say we were to add a new staging environment.\n\nFirst, under the **build** configurations, we'll add the following **fileReplacements** array for our staging environment:\n\n```json\n{\n  \"staging\": {\n    \"fileReplacements\": [\n      {\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.stage.ts\"\n      }\n    ]\n  }\n}\n```\n\nThen, under the **serve** configurations, we'll add the **browserTarget** configuration for our staging environment:\n\n```json\n{\n  \"staging\": {\n    \"browserTarget\": \"angular-environment-variables:build:staging\"\n  }\n}\n```\n\nAlmost there!\n\nNow, we'll create a new file called **environment.stage.ts** inside the **/src/environments** directory with the following contents:\n\n```typescript\nexport const environment = {\n  production: false,\n  apiUrl: \"staging api url\",\n};\n```\n\nAwesome!\n\nThen, all we need to do is run the following command:\n\nng serve --configuration=staging\n\nAnd you should see your Angular app running in the newly defined staging environment. The **apiUrl** will resolve to the value you specified in the **environment.stage.ts** file:\n\n![angular environment](/blog-images/3db3b8412406cdd6d8b7a470aff3dccd.png)\n\n## **Security Considerations**\n\nThe concept of environments we've explored in Angular helps us dynamically inject some variables based on the run-time environment of our application.\n\nHowever, this is quite different from the environment variables you use in a backend server or a system. Typically, environment variables are defined in the system or on a server where they can't be accessed by anyone else.\n\nIn this case, our environment variables are exported for other components and files to work with. This exposes these environment variables to anyone who's using the frontend application.\n\nFor this reason, you shouldn't store any sensitive credentials in your Angular app's environment variables. For instance, if you have an API key that, if exposed, could cause an attacker to use APIs on your behalf, you shouldn't store them here.\n\n![](/blog-images/2e2aac8a10bd455c521dbd4923699549.png)\n\n## **Conclusion**\n\nAngular's default support for environments makes it really convenient for developers and testers to build and test the application in different environments.\n\nYou can pretty much create your own custom environment and use it any way you like, as we did here for the staging environment.\n\nFinally, remember to keep security considerations in mind when using environment variables in any frontend application. If you don't want to manage environments on your own, you can also use an automated environment management service from Release. Learn more about it [here](https://releasehub.com/ebook/the-complete-guide-to-automated-software-environments).\n\nWe've explored what environments are, why you need them, and how to correctly use environment variables in an Angular application. Hopefully, this has given you the starting point you need to dive deeper into environments and explore further use cases for environment variables in your applications.\n",
    "code": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var v=(r,n)=>()=>(n||r((n={exports:{}}).exports,n),n.exports),f=(r,n)=>{for(var i in n)t(r,i,{get:n[i],enumerable:!0})},l=(r,n,i,a)=>{if(n&&typeof n==\"object\"||typeof n==\"function\")for(let o of m(n))!g.call(r,o)&&o!==i&&t(r,o,{get:()=>n[o],enumerable:!(a=p(n,o))||a.enumerable});return r};var y=(r,n,i)=>(i=r!=null?h(u(r)):{},l(n||!r||!r.__esModule?t(i,\"default\",{value:r,enumerable:!0}):i,r)),w=r=>l(t({},\"__esModule\",{value:!0}),r);var c=v((x,s)=>{s.exports=_jsx_runtime});var N={};f(N,{default:()=>k,frontmatter:()=>b});var e=y(c()),b={title:\"Using Environment Variables in Angular: A Guide\",excerpt:\"Learn how to effectively use environment variables in your Angular applications for better configuration management.\",date:\"2024-02-05\",ogImage:\"/blog-images/9de6930e0d988897966633594a3cfe34.png\",summary:\"What are environments? Why do you need them? And how do you correctly use environment variables in an Angular app?\",publishDate:\"Mon Jan 23 2023 14:06:16 GMT+0000 (Coordinated Universal Time)\",author:\"\",readingTime:5,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/9de6930e0d988897966633594a3cfe34.png\",imageAlt:\"Using Environment Variables in Angular: A Guide\",showCTA:!0,ctaCopy:\"By automating environment setup like Angular, Release simplifies managing different environments for seamless deployment and testing.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=using-environment-variables-in-angular-a-guide\",relatedPosts:[\"\"],tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function d(r){let n=Object.assign({p:\"p\",img:\"img\",h2:\"h2\",a:\"a\",span:\"span\",strong:\"strong\",pre:\"pre\",code:\"code\"},r.components);return(0,e.jsxs)(e.Fragment,{children:[(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/c4635aef1048ce157456670de7326463.png\",alt:\"angular environment\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Angular is one of the most popular and preferred frontend frameworks today, especially among large engineering teams. It's backed by a robust open-source community that makes it an ideal choice for building scalable web applications.\"}),`\n`,(0,e.jsx)(n.p,{children:\"However, being a frontend framework, your Angular application at some point needs to communicate with an external API or a third-party service application.\"}),`\n`,(0,e.jsx)(n.p,{children:\"For verifying authentic communication between your Angular application and the server, you'll need to use API keys and URLs that may change based on the environment of your Angular application.\"}),`\n`,(0,e.jsx)(n.p,{children:\"In this post, I'll walk you through how to use environment variables in an Angular application.\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/6e56bd2300ad21054eb696f30be767e8.png\",alt:\"\"})}),`\n`,(0,e.jsxs)(n.h2,{id:\"what-are-environments-in-angular\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#what-are-environments-in-angular\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"What are Environments in Angular?\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"Before we get into what environment variables are, let's quickly understand what an environment means for Angular. Angular by default provides a way to detect and modify some files in your application based on where the application is running.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Broadly speaking, Angular considers two environments for any application. One is the development environment, which means you're running Angular locally on your own system. This is when you're actually writing code for your Angular application.\"}),`\n`,(0,e.jsx)(n.p,{children:\"The other environment is production. This is where your Angular application is running for the end users on a domain or a server. This environment comes into the picture when you create a JavaScript bundle for your Angular application and deploy it to production.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"how-does-angular-know-which-environment\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#how-does-angular-know-which-environment\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"How Does Angular Know Which Environment?\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"Now that we understand what environments are in Angular, let's see how Angular maintains and keeps track of them.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Create a fresh Angular app by running the following:\"}),`\n`,(0,e.jsx)(n.p,{children:\"ng new angular-environment-variables\"}),`\n`,(0,e.jsx)(n.p,{children:\"To keep track of different environments, Angular maintains an environment directory in the src directory:\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/f825bb67f75affcad84aca257f1ff2a4.png\",alt:\"\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Notice that Angular maintains two environment files called \",(0,e.jsx)(n.strong,{children:\"environment.ts\"}),\" and \",(0,e.jsx)(n.strong,{children:\"environment.prod.ts\"}),\".\"]}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now, let's go to the \",(0,e.jsx)(n.strong,{children:\"angular.json\"}),\" file in the root directory. If you look closely at the \",(0,e.jsx)(n.strong,{children:\"configurations\"}),\" section, you'll notice it has some configurations declared for \",(0,e.jsx)(n.strong,{children:\"production\"}),\" and \",(0,e.jsx)(n.strong,{children:\"development\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/b7ee3bff372e7733bef1883ec4284b1f.png\",alt:\"angular environment\"})}),`\n`,(0,e.jsxs)(n.p,{children:[\"If you take a look at the \",(0,e.jsx)(n.strong,{children:\"fileReplacements\"}),\" array in this file, you'll see it instructs Angular to replace the \",(0,e.jsx)(n.strong,{children:\"environment.ts\"}),\" file with the \",(0,e.jsx)(n.strong,{children:\"environment.prod.ts\"}),\" file for production. So, when you run the \",(0,e.jsx)(n.strong,{children:\"ng build\"}),\" command and deploy your Angular application in production, Angular automatically switches these two files so that the production bundle uses the production environment.\"]}),`\n`,(0,e.jsxs)(n.h2,{id:\"detecting-environment-in-angular\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#detecting-environment-in-angular\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"Detecting Environment in Angular\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"Angular makes it really easy for you to detect the environment you're running it in. There are also other ways you can do this, including by checking the URL of your application's domain. But Angular provides an out-of-the-box solution for this.\"}),`\n`,(0,e.jsx)(n.p,{children:\"Let's explore this a bit.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"In the \",(0,e.jsx)(n.strong,{children:\"src/app/app.component.ts\"}),\" file, import the \",(0,e.jsx)(n.strong,{children:\"isDevMode\"}),\" from \",(0,e.jsx)(n.strong,{children:\"@angular/core\"}),\":\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`import { Component, isDevMode } from \"@angular/core\";\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Then, create a variable called \",(0,e.jsx)(n.strong,{children:\"environment\"}),\" inside the AppComponent:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`@Component({\n  selector: \"app-root\",\n  template: \"<h1>{{title}}</h1>\",\n})\nexport class AppComponent {\n  title = \"angular-environment-variables\";\n  environment = \"\";\n}\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now we can use the \",(0,e.jsx)(n.strong,{children:\"isDevMode\"}),\" to populate the \",(0,e.jsx)(n.strong,{children:\"environment\"}),\" variable above:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`@Component({\n  selector: \"app-root\",\n  template: \"<h1>{{title}}</h1>\",\n})\nexport class AppComponent {\n  title = \"angular-environment-variables\";\n  environment = \"\";\n\n  ngOnInit() {\n    if (isDevMode()) {\n      this.environment = \"Development\";\n    } else {\n      this.environment = \"Production\";\n    }\n  }\n}\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Let's now render the \",(0,e.jsx)(n.strong,{children:\"environment\"}),\" variable in the component's HTML:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-html\",children:`<h1>This is Angular app running in {{environment}} Environment</h1>\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"If you visit your Angular development server, it should tell you that your Angular app is running in a development environment:\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/5edfe8892fb6dacc5f586f73cfba9ce5.png\",alt:\"\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Great!\"}),`\n`,(0,e.jsx)(n.p,{children:\"Now let's look at how we can modify or update our environment files to use environment variables in our Angular application.\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"using-environment-variables-in-angular\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#using-environment-variables-in-angular\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"Using Environment Variables in Angular\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"Now that you understand how Angular maintains and keeps track of the environment, let's play around with the environment directory that we have in the root directory.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"First, let's look at the default contents of each. The \",(0,e.jsx)(n.strong,{children:\"/src/environments/environment.ts\"}),\" file contains the following code by default:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`// This file can be replaced during build by using the \\`fileReplacements\\` array.\n// \\`ng build\\` replaces \\`environment.ts\\` with \\`environment.prod.ts\\`.\n// The list of file replacements can be found in \\`angular.json\\`.\nexport const environment = {\n  production: false,\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as \\`zone.run\\`, \\`zoneDelegate.invokeTask\\`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/plugins/zone-error';\n// Included with Angular CLI.\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Similarly, if we look at the \",(0,e.jsx)(n.strong,{children:\"/src/environmnets/environment.prod.ts\"}),\" file, we see this:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`export const environment = {\n  production: true,\n};\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now, let's say you wish to add API URLs for the development and production environment. Here's how the \",(0,e.jsx)(n.strong,{children:\"/src/environments/environment.ts\"}),\" file could look:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`export const environment = {\n  production: false,\n  apiUrl: \"local api url\",\n};\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"And your \",(0,e.jsx)(n.strong,{children:\"/src/environments/environments.prod.ts\"}),\" file could look like this:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`export const environment = {\n  production: true,\n  apiUrl: \"production api url\",\n};\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now, let's go and use these environment variables in our app component. Update the \",(0,e.jsx)(n.strong,{children:\"app.component.ts\"}),\" file with the following:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`// app.component.ts\nimport { Component, isDevMode } from \"@angular/core\";\nimport { environment } from \"../environments/environment\";\n\n@Component({\n  selector: \"app-root\",\n  template: \"<h1>{{title}}</h1>\",\n})\nexport class AppComponent {\n  title = \"angular-environment-variables\";\n  environment = \"\";\n  apiUrl = environment.apiUrl;\n\n  ngOnInit() {\n    if (isDevMode()) {\n      this.environment = \"Development\";\n    } else {\n      this.environment = \"Production\";\n    }\n  }\n}\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"Then, we can update the template:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-html\",children:`<h1>\n  This is Angular app running in {% raw %}{{environment}}{% endraw %}\n  Environment\n</h1>\n<h3>API URL: {% raw %}{{apiUrl}}{% endraw %}</h3>\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"And we should now see the \",(0,e.jsx)(n.strong,{children:\"apiUrl\"}),\" referring to the development environment on the page:\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/3fd86c11ab5c50104e9886c3487f5b28.png\",alt:\"\"})}),`\n`,(0,e.jsx)(n.p,{children:\"But if you close the Angular development server and run it in production mode using this command:\"}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-bash\",children:`ng serve --configuration=production\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"that should render the template for the production environment as shown below:\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/7d5165a066fd2b04a67c3cd389720232.png\",alt:\"\"})}),`\n`,(0,e.jsx)(n.p,{children:\"Great!\"}),`\n`,(0,e.jsx)(n.p,{children:\"But what if we had another environment called staging or QA, where we occasionally test our applications?\"}),`\n`,(0,e.jsxs)(n.h2,{id:\"using-staging-environment-variables\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#using-staging-environment-variables\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"Using Staging Environment Variables\"})]}),`\n`,(0,e.jsxs)(n.p,{children:[\"We can add as many custom environments in Angular as we want. All we need to do is define the relevant environment configuration in the \",(0,e.jsx)(n.strong,{children:\"angular.json\"}),\" file and then create that environment file in the \",(0,e.jsx)(n.strong,{children:\"/src/environments\"}),\" directory.\"]}),`\n`,(0,e.jsx)(n.p,{children:\"Let's say we were to add a new staging environment.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"First, under the \",(0,e.jsx)(n.strong,{children:\"build\"}),\" configurations, we'll add the following \",(0,e.jsx)(n.strong,{children:\"fileReplacements\"}),\" array for our staging environment:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\n  \"staging\": {\n    \"fileReplacements\": [\n      {\n        \"replace\": \"src/environments/environment.ts\",\n        \"with\": \"src/environments/environment.stage.ts\"\n      }\n    ]\n  }\n}\n`})}),`\n`,(0,e.jsxs)(n.p,{children:[\"Then, under the \",(0,e.jsx)(n.strong,{children:\"serve\"}),\" configurations, we'll add the \",(0,e.jsx)(n.strong,{children:\"browserTarget\"}),\" configuration for our staging environment:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-json\",children:`{\n  \"staging\": {\n    \"browserTarget\": \"angular-environment-variables:build:staging\"\n  }\n}\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"Almost there!\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Now, we'll create a new file called \",(0,e.jsx)(n.strong,{children:\"environment.stage.ts\"}),\" inside the \",(0,e.jsx)(n.strong,{children:\"/src/environments\"}),\" directory with the following contents:\"]}),`\n`,(0,e.jsx)(n.pre,{children:(0,e.jsx)(n.code,{className:\"language-typescript\",children:`export const environment = {\n  production: false,\n  apiUrl: \"staging api url\",\n};\n`})}),`\n`,(0,e.jsx)(n.p,{children:\"Awesome!\"}),`\n`,(0,e.jsx)(n.p,{children:\"Then, all we need to do is run the following command:\"}),`\n`,(0,e.jsx)(n.p,{children:\"ng serve --configuration=staging\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"And you should see your Angular app running in the newly defined staging environment. The \",(0,e.jsx)(n.strong,{children:\"apiUrl\"}),\" will resolve to the value you specified in the \",(0,e.jsx)(n.strong,{children:\"environment.stage.ts\"}),\" file:\"]}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/3db3b8412406cdd6d8b7a470aff3dccd.png\",alt:\"angular environment\"})}),`\n`,(0,e.jsxs)(n.h2,{id:\"security-considerations\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#security-considerations\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"Security Considerations\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"The concept of environments we've explored in Angular helps us dynamically inject some variables based on the run-time environment of our application.\"}),`\n`,(0,e.jsx)(n.p,{children:\"However, this is quite different from the environment variables you use in a backend server or a system. Typically, environment variables are defined in the system or on a server where they can't be accessed by anyone else.\"}),`\n`,(0,e.jsx)(n.p,{children:\"In this case, our environment variables are exported for other components and files to work with. This exposes these environment variables to anyone who's using the frontend application.\"}),`\n`,(0,e.jsx)(n.p,{children:\"For this reason, you shouldn't store any sensitive credentials in your Angular app's environment variables. For instance, if you have an API key that, if exposed, could cause an attacker to use APIs on your behalf, you shouldn't store them here.\"}),`\n`,(0,e.jsx)(n.p,{children:(0,e.jsx)(n.img,{src:\"/blog-images/2e2aac8a10bd455c521dbd4923699549.png\",alt:\"\"})}),`\n`,(0,e.jsxs)(n.h2,{id:\"conclusion\",children:[(0,e.jsx)(n.a,{className:\"anchor\",href:\"#conclusion\",children:(0,e.jsx)(n.span,{className:\"icon icon-link\"})}),(0,e.jsx)(n.strong,{children:\"Conclusion\"})]}),`\n`,(0,e.jsx)(n.p,{children:\"Angular's default support for environments makes it really convenient for developers and testers to build and test the application in different environments.\"}),`\n`,(0,e.jsx)(n.p,{children:\"You can pretty much create your own custom environment and use it any way you like, as we did here for the staging environment.\"}),`\n`,(0,e.jsxs)(n.p,{children:[\"Finally, remember to keep security considerations in mind when using environment variables in any frontend application. If you don't want to manage environments on your own, you can also use an automated environment management service from Release. Learn more about it \",(0,e.jsx)(n.a,{href:\"https://releasehub.com/ebook/the-complete-guide-to-automated-software-environments\",children:\"here\"}),\".\"]}),`\n`,(0,e.jsx)(n.p,{children:\"We've explored what environments are, why you need them, and how to correctly use environment variables in an Angular application. Hopefully, this has given you the starting point you need to dive deeper into environments and explore further use cases for environment variables in your applications.\"})]})}function A(r={}){let{wrapper:n}=r.components||{};return n?(0,e.jsx)(n,Object.assign({},r,{children:(0,e.jsx)(d,r)})):d(r)}var k=A;return w(N);})();\n;return Component;"
  },
  "_id": "blog/posts/using-environment-variables-in-angular-a-guide.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/using-environment-variables-in-angular-a-guide.mdx",
    "sourceFileName": "using-environment-variables-in-angular-a-guide.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/using-environment-variables-in-angular-a-guide"
  },
  "type": "BlogPost",
  "computedSlug": "using-environment-variables-in-angular-a-guide"
}