{
  "title": "Creating your first Application in Release with Docker Compose",
  "summary": "Take your Docker Compose file and Crete an Application to run on Kubernetes in six easy steps.",
  "publishDate": "Wed Jun 28 2023 14:46:59 GMT+0000 (Coordinated Universal Time)",
  "author": "jeremy-kreutzbender",
  "readingTime": 10,
  "categories": [
    "platform-engineering",
    "kubernetes"
  ],
  "mainImage": "/blog-images/24d9e9521de18493481de2d2321d4516.jpg",
  "imageAlt": "Creating your first Application in Release with Docker Compose",
  "showCTA": true,
  "ctaCopy": "Explore how Release simplifies deploying Kubernetes applications with ephemeral environments for faster testing and streamlined collaboration.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=creating-your-first-application-in-release-with-docker-compose",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/24d9e9521de18493481de2d2321d4516.jpg",
  "excerpt": "Take your Docker Compose file and Crete an Application to run on Kubernetes in six easy steps.",
  "tags": [
    "platform-engineering",
    "kubernetes"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nIf you’re using Docker compose for local development but have been interested in running your application on Kubernetes or creating ephemeral environments for your application, keep on reading, this post is for you!    \n\nAt Release we know that Applications consist of more than just your repository and code. There are other services that are required, such as databases or key value stores. An application usually cannot run without environment variables, backing data, infrastructure, or storage component(s). That’s why we think that a Docker compose file is one of the best ways to describe your application for local development. It is also a perfect way to get started on Release and get your near-production environments spun up with each pull request. In this blog, we will walk through the steps to create an Application, highlight how Release helps transform your compose file into an Application Template and ultimately deploy it on Kubernetes (which we will cover in part two of this series).\n\nWe’ll be using [https://github.com/awesome-release/rails_postgres_redis](https://github.com/awesome-release/rails_postgres_redis) as the example in this post. It is a small application that runs a Ruby on Rails server, has requirements of a Postgresql database and a Redis server, as well as runs Sidekiq, which is a background job processor.\n\nLet’s take a look at the compose file and then jump into creating our Application.\n\n```yaml\n\nversion: '3'\nservices:\n  api:\n    build: .\n    image: rails_postgres_redis:latest\n    command: bash -c \"(rake db:exists && rake db:migrate || rake db:setup) && bundle exec rails s -b 0.0.0.0\"\n    environment:\n      REDIS_URL: redis://redis:6379/0\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_HOST: db\n    ports:\n      - \"3000:3000\"\n    depends_on:\n      - db\n      - redis\n  \n  sidekiq:\n    image: rails_postgres_redis:latest\n    command: bundle exec sidekiq\n    environment:\n      REDIS_URL: redis://redis:6379/0\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_HOST: db\n    depends_on:\n      - api\n      - redis\n      - db    \n\n  db:\n    image: postgres:12-alpine\n    ports:\n      - \"5432\"\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n\n  redis:\n    image: redis\n    ports:\n      - \"6379\"\n    volumes:\n      - redis:/data\n\nvolumes:\n  postgres-data: {}\n  redis: {}\n\n```\n\n‍\n\nWe won’t go through everything line by line but we wanted to make sure to note that in this compose file certain ports are exposed, as well as volumes are being defined to retain data between restarts. We also see that the containers have their `depends_on` defined to tell us in which order the containers should be started in. We encourage you to take a look at our [Docker Compose conversion support documentation](https://docs.release.com/reference-documentation/docker-compose-conversion-support) to see the full list of supported attributes.\n\n### Translating a Compose file into an Application\n\nNow that we have a Docker Compose file ready, let’s see how to translate it into an Application in Release.\n\n- **Step 1: Create your application**\n\nThe first step in creating your Application is to give it a name and select which repository we’ll be using. I’ve named mine “release-docker-compose-demo” and selected the awesome-release/rails_postgres_redis repository (linked above).\n\n![](/blog-images/ff3c06a3bb3d132f792d59947fecbbcc.png)\n\n- **Step 2: Analyze your repository**\n\nThe next step is to analyze the repository. We’ve selected the main branch and are shown some options of files we can select in a dropdown. The files we select will be analyzed and converted into what Release calls Services. These Services can have many types, such as Containers, Static Javascript Builds, Helm, and Terraform; we’ll primarily focus on Containers in this post but look for future posts where we’ll cover the other options.\n\nWe’ve selected our docker-compose.yml file and we will click the Start Analysis button.\n\n![](/blog-images/b96ad97ba2f3abdcdf27b467438e0e79.png)\n\nWe see that Release created four Services for us with the same names as what is in the compose file. The dependencies are also listed. In this case we know that we want all these Services, but if something had been displayed that we didn’t want to deploy on Release, we could uncheck the Service to remove it. Now we’ll click Next Step to move on.\n\n![](/blog-images/e0c91cdc3c2141465fd17ada6c65ce82.png)\n\n‍\\* **Step 3: Generate a template**\n\nIn this stage we get our first view of an Application Template. We won’t go through everything in the template here, however we encourage you to read through the documentation on [Application Templates](https://docs.release.com/reference-documentation/application-settings/application-template) to understand all the possibilities. Instead we’ll highlight how Release has translated the Services from the last page into this yaml format. We see the familiar names of  `api`, `db`, and `redis` as well as the ports and volumes that were defined in the compose file.\n\n![](/blog-images/2061a6acb4335f3eebcdc64912fd9f5d.png)\n\nThe definitions of Services help to describe _what_ Release will deploy, but we also want to know _how_ Release will deploy these Services. That information is contained in the workflows stanza. There are three types of workflows defined: **setup**, **patch**, and **teardown**.\n\nA **setup** workflow defines a deployment where infrastructure can be deployed for the first time or if there are subsequent changes to the infrastructure; think, changing your Postgresql version, the number of replicas of the  `api` Service, or changing environment variables for your Application. We can also see that the order of the Services from the compose file  `depends_on` is translated into the setup workflow. `db` and `redis` will be deployed in parallel first. Once both of those Services are up and running, Release will move to the next step and deploy  `api`. Finally  `sidekiq` will be deployed.\n\nThe **patch** workflow is used when only code changes need to be deployed. In our case, both the `api` and `sidekiq` Services contain the code from the repository and would need to be deployed when we push new changes. The  `db` and `redis` Services don’t require any changes so they don’t need to be referenced in a patch.\n\nThe final workflow is the **teardown** which uses a Release defined task called `remove_environment`. This task will tear down all the infrastructure in Kubernetes and free up the resources that were being used. Additional steps can be added to a teardown workflow but the `remove_environment` is a requirement.\n\nNow that we’ve had a quick runthrough of parts of our Application Template, we’ll click Next Step to move on.\n\n![](/blog-images/eb1e9b99de4ff152fbb5eb1e8135f1f5.png)\n\n- **Step 4: Set Environment Variables**\n\nHere we are presented with the Environment Variables that Release was able to extract from the compose file. If we wanted to add additional variables here we could but for this Application we won’t need any more so we’ll click Next Step.\n\n![](/blog-images/6fc90f447bd025a35d9feff557a5fd2b.png)\n\n- **Step 5: Set Build Arguments**\n\nAt this stage we are presented with the ability to add build arguments if we need to explicitly pass anything into our Docker build. For this Application, the [Dockerfile](https://github.com/awesome-release/rails_postgres_redis/blob/main/Dockerfile) accepts a build argument for `RUBY_VERSION` if we want to use a newer version than the `3.0.0` default. We’ll add an argument for the `3.2.0` version. We’ll be able to see this version used when we look at the build in part two of this series. After clicking the check mark to add our build argument, we’ll click Next Step to move on.\n\n![](/blog-images/f7f0a2dc9c90964f8e213dbd200096c1.png)\n\n- **Step 6: save and deploy**  \n  ** The final step in creating our Application is to create a deployment. By clicking the “Deploy your app!” button, Release will create an ephemeral environment and start a **setup\\*\\* workflow.\n\nThat’s it! 🎉 In short six steps we took our Docker Compose file and created an Application Template that we can now use to spin up ephemeral environments on demand.\n\nIn part two of this series, we’ll cover what happens during the deployment, as well as what Kubernetes objects were created. We will also use the ephemeral environment that was created to ensure that all of our Services are up and running. Stay tuned for part two and in the meantime [take Release for a spin](https://web.release.com/register) and let us know if you have any questions.\n",
    "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),w=(t,e)=>{for(var o in e)r(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of u(e))!g.call(t,i)&&i!==o&&r(t,i,{get:()=>e[i],enumerable:!(a=p(e,i))||a.enumerable});return t};var b=(t,e,o)=>(o=t!=null?h(m(t)):{},s(e||!t||!t.__esModule?r(o,\"default\",{value:t,enumerable:!0}):o,t)),y=t=>s(r({},\"__esModule\",{value:!0}),t);var d=f((_,l)=>{l.exports=_jsx_runtime});var R={};w(R,{default:()=>S,frontmatter:()=>v});var n=b(d()),v={title:\"Creating your first Application in Release with Docker Compose\",summary:\"Take your Docker Compose file and Crete an Application to run on Kubernetes in six easy steps.\",publishDate:\"Wed Jun 28 2023 14:46:59 GMT+0000 (Coordinated Universal Time)\",author:\"jeremy-kreutzbender\",readingTime:10,categories:[\"platform-engineering\",\"kubernetes\"],mainImage:\"/blog-images/24d9e9521de18493481de2d2321d4516.jpg\",imageAlt:\"Creating your first Application in Release with Docker Compose\",showCTA:!0,ctaCopy:\"Explore how Release simplifies deploying Kubernetes applications with ephemeral environments for faster testing and streamlined collaboration.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=creating-your-first-application-in-release-with-docker-compose\",relatedPosts:[\"\"],ogImage:\"/blog-images/24d9e9521de18493481de2d2321d4516.jpg\",excerpt:\"Take your Docker Compose file and Crete an Application to run on Kubernetes in six easy steps.\",tags:[\"platform-engineering\",\"kubernetes\"],ctaButton:\"Try Release for Free\"};function c(t){let e=Object.assign({p:\"p\",a:\"a\",pre:\"pre\",code:\"code\",h3:\"h3\",span:\"span\",ul:\"ul\",li:\"li\",strong:\"strong\",img:\"img\",em:\"em\",br:\"br\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"If you\\u2019re using Docker compose for local development but have been interested in running your application on Kubernetes or creating ephemeral environments for your application, keep on reading, this post is for you! \\xA0 \\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"At Release we know that Applications consist of more than just your repository and code. There are other services that are required, such as databases or key value stores. An application usually cannot run without environment variables, backing data, infrastructure, or storage component(s). That\\u2019s why we think that a Docker compose file is one of the best ways to describe your application for local development. It is also a perfect way to get started on Release and get your near-production environments spun up with each pull request. In this blog, we will walk through the steps to create an Application, highlight how Release helps transform your compose file into an Application Template and ultimately deploy it on Kubernetes (which we will cover in part two of this series).\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We\\u2019ll be using \",(0,n.jsx)(e.a,{href:\"https://github.com/awesome-release/rails_postgres_redis\",children:\"https://github.com/awesome-release/rails_postgres_redis\"}),\" as the example in this post. It is a small application that runs a Ruby on Rails server, has requirements of a Postgresql database and a Redis server, as well as runs Sidekiq, which is a background job processor.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let\\u2019s take a look at the compose file and then jump into creating our Application.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\nversion: '3'\nservices:\n \\xA0api:\n \\xA0 \\xA0build: .\n \\xA0 \\xA0image: rails_postgres_redis:latest\n \\xA0 \\xA0command: bash -c \"(rake db:exists && rake db:migrate || rake db:setup) && bundle exec rails s -b 0.0.0.0\"\n \\xA0 \\xA0environment:\n \\xA0 \\xA0 \\xA0REDIS_URL: redis://redis:6379/0\n \\xA0 \\xA0 \\xA0POSTGRES_PASSWORD: postgres\n \\xA0 \\xA0 \\xA0POSTGRES_USER: postgres\n \\xA0 \\xA0 \\xA0POSTGRES_HOST: db\n \\xA0 \\xA0ports:\n \\xA0 \\xA0 \\xA0- \"3000:3000\"\n \\xA0 \\xA0depends_on:\n \\xA0 \\xA0 \\xA0- db\n \\xA0 \\xA0 \\xA0- redis\n \\xA0\n \\xA0sidekiq:\n \\xA0 \\xA0image: rails_postgres_redis:latest\n \\xA0 \\xA0command: bundle exec sidekiq\n \\xA0 \\xA0environment:\n \\xA0 \\xA0 \\xA0REDIS_URL: redis://redis:6379/0\n \\xA0 \\xA0 \\xA0POSTGRES_PASSWORD: postgres\n \\xA0 \\xA0 \\xA0POSTGRES_USER: postgres\n \\xA0 \\xA0 \\xA0POSTGRES_HOST: db\n \\xA0 \\xA0depends_on:\n \\xA0 \\xA0 \\xA0- api\n \\xA0 \\xA0 \\xA0- redis\n \\xA0 \\xA0 \\xA0- db \\xA0 \\xA0\n\n \\xA0db:\n \\xA0 \\xA0image: postgres:12-alpine\n \\xA0 \\xA0ports:\n \\xA0 \\xA0 \\xA0- \"5432\"\n \\xA0 \\xA0volumes:\n \\xA0 \\xA0 \\xA0- postgres-data:/var/lib/postgresql/data\n \\xA0 \\xA0environment:\n \\xA0 \\xA0 \\xA0POSTGRES_PASSWORD: postgres\n \\xA0 \\xA0 \\xA0POSTGRES_USER: postgres\n\n \\xA0redis:\n \\xA0 \\xA0image: redis\n \\xA0 \\xA0ports:\n \\xA0 \\xA0 \\xA0- \"6379\"\n \\xA0 \\xA0volumes:\n \\xA0 \\xA0 \\xA0- redis:/data\n\nvolumes:\n \\xA0postgres-data: {}\n \\xA0redis: {}\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"\\u200D\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We won\\u2019t go through everything line by line but we wanted to make sure to note that in this compose file certain ports are exposed, as well as volumes are being defined to retain data between restarts. We also see that the containers have their \",(0,n.jsx)(e.code,{children:\"depends_on\"}),\" defined to tell us in which order the containers should be started in. We encourage you to take a look at our \",(0,n.jsx)(e.a,{href:\"https://docs.release.com/reference-documentation/docker-compose-conversion-support\",children:\"Docker Compose conversion support documentation\"}),\" to see the full list of supported attributes.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"translating-a-compose-file-into-an-application\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#translating-a-compose-file-into-an-application\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Translating a Compose file into an Application\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we have a Docker Compose file ready, let\\u2019s see how to translate it into an Application in Release.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.strong,{children:\"Step 1: Create your application\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The first step in creating your Application is to give it a name and select which repository we\\u2019ll be using. I\\u2019ve named mine \\u201Crelease-docker-compose-demo\\u201D and selected the awesome-release/rails_postgres_redis repository (linked above).\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/ff3c06a3bb3d132f792d59947fecbbcc.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.strong,{children:\"Step 2: Analyze your repository\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"The next step is to analyze the repository. We\\u2019ve selected the main branch and are shown some options of files we can select in a dropdown. The files we select will be analyzed and converted into what Release calls Services. These Services can have many types, such as Containers, Static Javascript Builds, Helm, and Terraform; we\\u2019ll primarily focus on Containers in this post but look for future posts where we\\u2019ll cover the other options.\"}),`\n`,(0,n.jsx)(e.p,{children:\"We\\u2019ve selected our docker-compose.yml file and we will click the Start Analysis button.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/b96ad97ba2f3abdcdf27b467438e0e79.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"We see that Release created four Services for us with the same names as what is in the compose file. The dependencies are also listed. In this case we know that we want all these Services, but if something had been displayed that we didn\\u2019t want to deploy on Release, we could uncheck the Service to remove it. Now we\\u2019ll click Next Step to move on.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/e0c91cdc3c2141465fd17ada6c65ce82.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"\\u200D* \",(0,n.jsx)(e.strong,{children:\"Step 3: Generate a template\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this stage we get our first view of an Application Template. We won\\u2019t go through everything in the template here, however we encourage you to read through the documentation on \",(0,n.jsx)(e.a,{href:\"https://docs.release.com/reference-documentation/application-settings/application-template\",children:\"Application Templates\"}),\" to understand all the possibilities. Instead we\\u2019ll highlight how Release has translated the Services from the last page into this yaml format. We see the familiar names of \\xA0\",(0,n.jsx)(e.code,{children:\"api\"}),\", \",(0,n.jsx)(e.code,{children:\"db\"}),\", and \",(0,n.jsx)(e.code,{children:\"redis\"}),\" as well as the ports and volumes that were defined in the compose file.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/2061a6acb4335f3eebcdc64912fd9f5d.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The definitions of Services help to describe \",(0,n.jsx)(e.em,{children:\"what\"}),\" Release will deploy, but we also want to know \",(0,n.jsx)(e.em,{children:\"how\"}),\" Release will deploy these Services. That information is contained in the workflows stanza. There are three types of workflows defined: \",(0,n.jsx)(e.strong,{children:\"setup\"}),\", \",(0,n.jsx)(e.strong,{children:\"patch\"}),\", and \",(0,n.jsx)(e.strong,{children:\"teardown\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.strong,{children:\"setup\"}),\" workflow defines a deployment where infrastructure can be deployed for the first time or if there are subsequent changes to the infrastructure; think, changing your Postgresql version, the number of replicas of the \\xA0\",(0,n.jsx)(e.code,{children:\"api\"}),\" Service, or changing environment variables for your Application. We can also see that the order of the Services from the compose file \\xA0\",(0,n.jsx)(e.code,{children:\"depends_on\"}),\" is translated into the setup workflow. \",(0,n.jsx)(e.code,{children:\"db\"}),\" and \",(0,n.jsx)(e.code,{children:\"redis\"}),\" will be deployed in parallel first. Once both of those Services are up and running, Release will move to the next step and deploy \\xA0\",(0,n.jsx)(e.code,{children:\"api\"}),\". Finally \\xA0\",(0,n.jsx)(e.code,{children:\"sidekiq\"}),\" will be deployed.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.strong,{children:\"patch\"}),\" workflow is used when only code changes need to be deployed. In our case, both the \",(0,n.jsx)(e.code,{children:\"api\"}),\" and \",(0,n.jsx)(e.code,{children:\"sidekiq\"}),\" Services contain the code from the repository and would need to be deployed when we push new changes. The \\xA0\",(0,n.jsx)(e.code,{children:\"db\"}),\" and \",(0,n.jsx)(e.code,{children:\"redis\"}),\" Services don\\u2019t require any changes so they don\\u2019t need to be referenced in a patch.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The final workflow is the \",(0,n.jsx)(e.strong,{children:\"teardown\"}),\" which uses a Release defined task called \",(0,n.jsx)(e.code,{children:\"remove_environment\"}),\". This task will tear down all the infrastructure in Kubernetes and free up the resources that were being used. Additional steps can be added to a teardown workflow but the \",(0,n.jsx)(e.code,{children:\"remove_environment\"}),\" is a requirement.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that we\\u2019ve had a quick runthrough of parts of our Application Template, we\\u2019ll click Next Step to move on.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/eb1e9b99de4ff152fbb5eb1e8135f1f5.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.strong,{children:\"Step 4: Set Environment Variables\"})}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"Here we are presented with the Environment Variables that Release was able to extract from the compose file. If we wanted to add additional variables here we could but for this Application we won\\u2019t need any more so we\\u2019ll click Next Step.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/6fc90f447bd025a35d9feff557a5fd2b.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.strong,{children:\"Step 5: Set Build Arguments\"})}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"At this stage we are presented with the ability to add build arguments if we need to explicitly pass anything into our Docker build. For this Application, the \",(0,n.jsx)(e.a,{href:\"https://github.com/awesome-release/rails_postgres_redis/blob/main/Dockerfile\",children:\"Dockerfile\"}),\" accepts a build argument for \",(0,n.jsx)(e.code,{children:\"RUBY_VERSION\"}),\" if we want to use a newer version than the \",(0,n.jsx)(e.code,{children:\"3.0.0\"}),\" default. We\\u2019ll add an argument for the \",(0,n.jsx)(e.code,{children:\"3.2.0\"}),\" version. We\\u2019ll be able to see this version used when we look at the build in part two of this series. After clicking the check mark to add our build argument, we\\u2019ll click Next Step to move on.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/f7f0a2dc9c90964f8e213dbd200096c1.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Step 6: save and deploy\"}),(0,n.jsx)(e.br,{}),`\n`,\"** The final step in creating our Application is to create a deployment. By clicking the \\u201CDeploy your app!\\u201D button, Release will create an ephemeral environment and start a **setup** workflow.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"That\\u2019s it! \\u{1F389} In short six steps we took our Docker Compose file and created an Application Template that we can now use to spin up ephemeral environments on demand.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In part two of this series, we\\u2019ll cover what happens during the deployment, as well as what Kubernetes objects were created. We will also use the ephemeral environment that was created to ensure that all of our Services are up and running. Stay tuned for part two and in the meantime \",(0,n.jsx)(e.a,{href:\"https://web.release.com/register\",children:\"take Release for a spin\"}),\" and let us know if you have any questions.\"]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(c,t)})):c(t)}var S=k;return y(R);})();\n;return Component;"
  },
  "_id": "blog/posts/creating-your-first-application-in-release-with-docker-compose.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/creating-your-first-application-in-release-with-docker-compose.mdx",
    "sourceFileName": "creating-your-first-application-in-release-with-docker-compose.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/creating-your-first-application-in-release-with-docker-compose"
  },
  "type": "BlogPost",
  "computedSlug": "creating-your-first-application-in-release-with-docker-compose"
}