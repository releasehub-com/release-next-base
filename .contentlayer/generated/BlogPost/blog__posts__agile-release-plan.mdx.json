{
  "title": "How to Make an Agile Release Plan, With Examples",
  "summary": "How do you create an Agile release plan? What are the steps, and what's it like in action? Here's how to get started and",
  "publishDate": "Tue Feb 15 2022 22:18:07 GMT+0000 (Coordinated Universal Time)",
  "author": "eric-goebelbecker",
  "readingTime": 8,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/98ce19f7da96651f52b9c66a708c58ea.jpg",
  "imageAlt": "How to make an agile release plan",
  "showCTA": true,
  "ctaCopy": "Improve Agile release planning with Release's on-demand environments for seamless collaboration and faster software deployment.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=agile-release-plan",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/98ce19f7da96651f52b9c66a708c58ea.jpg",
  "excerpt": "How do you create an Agile release plan? What are the steps, and what's it like in action? Here's how to get started and",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\n_\"Change is the only constant in life\" -_ [_Heraclitus_](https://www.worldhistory.org/Heraclitus_of_Ephesos/#:~:text=expected%20him%20to.-,Life%20is%20Flux,-Following%20in%20the)\n\nWas Heraclitus a developer, or did the Oracle of Delphi show him where things were going? Either way, his most famous quote is an apt description of the world we work in. We have to navigate constant transitions while maintaining forward progress. The Agile process helps us cope with that chaos. It's right there in the [name](https://www.merriam-webster.com/dictionary/agile_): _having a quick, resourceful, and adaptable character_. So when it's time to plan the first or next increment in your product, you need an Agile release plan. \n\nLet's look at what an Agile release plan is and how you can go about creating one. \n\n## **What's an Agile Release Plan?**\n\nMany bloggers have spilled a great deal of digital ink over the topic of Agile, where it comes from, and how to implement it. But we have the [Agile Principles.](https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/) They're the essential guide on what it means and why we need it. So, before we delve into creating an Agile release plan, let's level set. \n\n### **The Agile Principles**\n\n cover the four principles and how they relate to an agile release plan. \n\n_#1 - Our highest priority is to satisfy the customer through early and continuous delivery of valuable software._\n\nAny successful software development team focuses on customer satisfaction, but this principle introduces the concepts of **early** and **continuous**. \n\nEarly and continuous means releasing features and fixes as you build and test. It's Agile's alternative to holding onto new code or rushing new features in the service of meeting an arbitrary date. \n\n_#2 - Welcome changing requirements, even late in development. Agile processes harness change for the customer’s competitive advantage._\n\nHere's the hard part. Your release plan needs to keep your development efforts on target, but you still need to address changing requirements. \n\n_#3 - Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale._\n\nPrinciple #3 echoes the salient points in #1 but helps us out by establishing a solid time range. Agile works in increments of weeks. \n\n#4 - Business people and developers must work together daily throughout the project.\n\nFinally, we get a hint on how to formulate and execute an Agile release plan; by getting developers and business people to work together. Moreover, they don't work together on the project and head back to their respective departments. They work together _daily_. \n\nBefore we move on, it's worth paying [Principle #6](https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/) a brief visit. It refines and reinforces #4 when it calls face-to-face conversations the most effective form of communication. You don't do Agile Release Planning over emails and Jira tickets. You do it by sitting down as a group and formulating a plan. \n\n### **What's an Agile Release?**\n\nBased on the Agile principles, we can infer what makes a release **agile**. A release is a set of features you deliver to customers in a single increment. It's **agile** when you bake in the ability to adjust. \n\n![](/blog-images/b90a1452e3b2688aea7b28297ec0bf73.png)\n\nAgile release plans adapt to changing requirements and conditions. They don't pick a date and decide what fits in or set a date and drive mercilessly to meet it. They set priorities, estimate the effort required, do the work, and make adjustments based on updated conditions and results. \n\n## **Agile Release Planning Process**\n\nThe release planning process helps your team determine how to channel their efforts into the next increment of features and fixes. \n\n### **Step 1: Establish the Release Vision**\n\nBefore planning a release, you need a vision for your product and its next step. This vision guides you as you decide which features to prioritize, which to slip if the situation changes, and which to set aside for the next pass. \n\nThis is the first step in the process and the first opportunity for business people and developers to collaborate. The release vision must align with business goals, market conditions, and engineering reality. \n\n### **Step 2: Evaluate Your Backlog**\n\nNow, it's time to look at your product backlog and sort the features by priority. This is where you put your vision to work. \n\nHere again, everyone is involved; engineers and stakeholders apply a shared vision to the product backlog and product roadmap to determine what the priorities are for your product. \n\nFinally, create a basic release plan that outlines the goal, a target release date, and a complete set of ranked user stories with story points. This is the output you'll need for the next step. \n\n![](/blog-images/821f083f34e477a96d74d4ede40b6b54.png)\n\n### **Step 3: Review the Agile Release Plan**\n\nNext, take your draft release plan, assemble all stakeholders, and hold a release planning session. Developers hate meetings, but this one is essential. As we covered above, Agile places great importance on face-to-face interaction and alignment between the business and engineering. This meeting will ensure that everyone understands and agrees with the plan.\n\nThe meeting agenda should cover the following items. \n\n#### **Review Roadmap**\n\nReview the vision and the product roadmap. If it seems like these steps include a lot of repetition and review, that means you're paying attention! This is another opportunity to ensure that the stakeholders are on the same page regarding the product and the release. \n\n#### **Review Design and Architecture**\n\nNext, review the technical details and design for the release. Are there dependencies or gaps that can affect the release schedule? How will the plan be adjusted if these issues can't be overcome? \n\n#### **Review Iteration schedule**\n\nThe draft release plan has user stories, story points, and proposed sprints. This step takes those stories and arranges them into sprints. One method is to arrange the stories into sprints based on [velocity](https://www.agilealliance.org/glossary/velocity/). How much can you reasonably expect to get done in each sprint based on development resources the points assigned to each story? \n\n#### **Define \"Done\"**\n\nWhat does \"done\" mean? Do the stakeholders and the developers agree on what the completed release will look and act like? This is where the [Definition of Done](https://www.agilealliance.org/glossary/definition-of-done/) needs to be codified by all stakeholders. \n\n#### **Step 4: Execute and Update**\n\nFinally, it's time to execute the plan. Agile release plans are living documents, so putting them into action is part of the planning process. \n\nA review follows each iteration. What went wrong? What went better than expected? These inputs are critical for planning the next sprint. This step is crucial in keeping your development efforts on track. \n\n## **Agile Release Plan Examples**\n\nLet's finish up by looking at how to apply this process to the two most common product release scenarios. \n\n### **New Release**\n\nWhen you're planning a new release of an existing product, you already have a lot of information. There are few things more valuable than \"we've seen this before\" when planning and adjusting an Agile release plan! \n\nThere's already a product out there in the world, which means someone had a vision for what it should do. It may not have been formally recorded or discussed, but there's something there. Now is your chance to get everyone together and make sure the current vision is in harmony with market conditions and business needs. Then, you can either update or create your roadmap and your design. \n\nThe previous releases mean data on current efforts and timelines. You might be new to Agile, but you know how long the last release took and how long it takes to turn around a bug fix. That's all valuable input to the process. \n\nFinally, the success or failure of previous releases will be a valuable guide when getting the stakeholders together to define \"Done.\" \n\n### **New Product**\n\nWhen planning the first release for a new product, you have to rely on the team's collective experience combined with data gathered in the testing and prototyping stages. (Of course, those stages should have gone through this process, too?) Maybe you're planning one of those stages and have nothing to go by. \n\nIt's hard to say that there's a most critical step of the plan, but if it exists, it's the vision, especially when talking about a new product! If the interested parties can't agree on what the new product will be, how can you define the effort required to build it? How can you define \"Done?\" \n\nOnce you've agreed on the vision, you're going to do a lot of estimating and a lot of adjusting. That's okay! The estimating and adjustment are features, not bugs. \n\n## Start Your Agile Release Plan\n\nThis post covered what an Agile release plan is and how to create one. We started with [first principles](https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/) (or at least a subset) and applied them to planning and executing a release. Then we wrapped up with an overview of two common release scenarios. \n\nGet started with your next Agile [Release](https://releasehub.com/blog/awesome-release-docker-compose-examples-working-in-release-and-kubernetes) now!\n",
    "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var w=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),f=(a,e)=>{for(var t in e)s(a,t,{get:e[t],enumerable:!0})},o=(a,e,t,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!m.call(a,i)&&i!==t&&s(a,i,{get:()=>e[i],enumerable:!(r=p(e,i))||r.enumerable});return a};var y=(a,e,t)=>(t=a!=null?d(u(a)):{},o(e||!a||!a.__esModule?s(t,\"default\",{value:a,enumerable:!0}):t,a)),v=a=>o(s({},\"__esModule\",{value:!0}),a);var h=w((T,l)=>{l.exports=_jsx_runtime});var A={};f(A,{default:()=>x,frontmatter:()=>b});var n=y(h()),b={title:\"How to Make an Agile Release Plan, With Examples\",summary:\"How do you create an Agile release plan? What are the steps, and what's it like in action? Here's how to get started and\",publishDate:\"Tue Feb 15 2022 22:18:07 GMT+0000 (Coordinated Universal Time)\",author:\"eric-goebelbecker\",readingTime:8,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/98ce19f7da96651f52b9c66a708c58ea.jpg\",imageAlt:\"How to make an agile release plan\",showCTA:!0,ctaCopy:\"Improve Agile release planning with Release's on-demand environments for seamless collaboration and faster software deployment.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=agile-release-plan\",relatedPosts:[\"\"],ogImage:\"/blog-images/98ce19f7da96651f52b9c66a708c58ea.jpg\",excerpt:\"How do you create an Agile release plan? What are the steps, and what's it like in action? Here's how to get started and\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function c(a){let e=Object.assign({p:\"p\",em:\"em\",a:\"a\",h2:\"h2\",span:\"span\",strong:\"strong\",h3:\"h3\",img:\"img\",h4:\"h4\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:'\"Change is the only constant in life\" -'}),\" \",(0,n.jsx)(e.a,{href:\"https://www.worldhistory.org/Heraclitus_of_Ephesos/#:~:text=expected%20him%20to.-,Life%20is%20Flux,-Following%20in%20the\",children:(0,n.jsx)(e.em,{children:\"Heraclitus\"})})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Was Heraclitus a developer, or did the Oracle of Delphi show him where things were going? Either way, his most famous quote is an apt description of the world we work in. We have to navigate constant transitions while maintaining forward progress. The Agile process helps us cope with that chaos. It's right there in the \",(0,n.jsx)(e.a,{href:\"https://www.merriam-webster.com/dictionary/agile_\",children:\"name\"}),\": \",(0,n.jsx)(e.em,{children:\"having a quick, resourceful, and adaptable character\"}),\". So when it's time to plan the first or next increment in your product, you need an Agile release plan.\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's look at what an Agile release plan is and how you can go about creating one.\\xA0\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"whats-an-agile-release-plan\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#whats-an-agile-release-plan\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"What's an Agile Release Plan?\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Many bloggers have spilled a great deal of digital ink over the topic of Agile, where it comes from, and how to implement it. But we have the \",(0,n.jsx)(e.a,{href:\"https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/\",children:\"Agile Principles.\"}),\" They're the essential guide on what it means and why we need it. So, before we delve into creating an Agile release plan, let's level set.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-agile-principles\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-agile-principles\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"The Agile Principles\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"\\xA0cover the four principles and how they relate to an agile release plan.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"#1 - Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Any successful software development team focuses on customer satisfaction, but this principle introduces the concepts of \",(0,n.jsx)(e.strong,{children:\"early\"}),\" and \",(0,n.jsx)(e.strong,{children:\"continuous\"}),\".\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Early and continuous means releasing features and fixes as you build and test. It's Agile's alternative to holding onto new code or rushing new features in the service of meeting an arbitrary date.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"#2 - Welcome changing requirements, even late in development. Agile processes harness change for the customer\\u2019s competitive advantage.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Here's the hard part. Your release plan needs to keep your development efforts on target, but you still need to address changing requirements.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"#3 - Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Principle #3 echoes the salient points in #1 but helps us out by establishing a solid time range. Agile works in increments of weeks.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"#4 - Business people and developers must work together daily throughout the project.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Finally, we get a hint on how to formulate and execute an Agile release plan; by getting developers and business people to work together. Moreover, they don't work together on the project and head back to their respective departments. They work together \",(0,n.jsx)(e.em,{children:\"daily\"}),\".\\xA0\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Before we move on, it's worth paying \",(0,n.jsx)(e.a,{href:\"https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/\",children:\"Principle #6\"}),\" a brief visit. It refines and reinforces #4 when it calls face-to-face conversations the most effective form of communication. You don't do Agile Release Planning over emails and Jira tickets. You do it by sitting down as a group and formulating a plan.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"whats-an-agile-release\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#whats-an-agile-release\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"What's an Agile Release?\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Based on the Agile principles, we can infer what makes a release \",(0,n.jsx)(e.strong,{children:\"agile\"}),\". A release is a set of features you deliver to customers in a single increment. It's \",(0,n.jsx)(e.strong,{children:\"agile\"}),\" when you bake in the ability to adjust.\\xA0\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/b90a1452e3b2688aea7b28297ec0bf73.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Agile release plans adapt to changing requirements and conditions. They don't pick a date and decide what fits in or set a date and drive mercilessly to meet it. They set priorities, estimate the effort required, do the work, and make adjustments based on updated conditions and results.\\xA0\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"agile-release-planning-process\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#agile-release-planning-process\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Agile Release Planning Process\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"The release planning process helps your team determine how to channel their efforts into the next increment of features and fixes.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"step-1-establish-the-release-vision\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-1-establish-the-release-vision\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Step 1: Establish the Release Vision\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Before planning a release, you need a vision for your product and its next step. This vision guides you as you decide which features to prioritize, which to slip if the situation changes, and which to set aside for the next pass.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"This is the first step in the process and the first opportunity for business people and developers to collaborate. The release vision must align with business goals, market conditions, and engineering reality.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"step-2-evaluate-your-backlog\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-2-evaluate-your-backlog\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Step 2: Evaluate Your Backlog\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Now, it's time to look at your product backlog and sort the features by priority. This is where you put your vision to work.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here again, everyone is involved; engineers and stakeholders apply a shared vision to the product backlog and product roadmap to determine what the priorities are for your product.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Finally, create a basic release plan that outlines the goal, a target release date, and a complete set of ranked user stories with story points. This is the output you'll need for the next step.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/821f083f34e477a96d74d4ede40b6b54.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"step-3-review-the-agile-release-plan\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-3-review-the-agile-release-plan\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Step 3: Review the Agile Release Plan\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Next, take your draft release plan, assemble all stakeholders, and hold a release planning session. Developers hate meetings, but this one is essential. As we covered above, Agile places great importance on face-to-face interaction and alignment between the business and engineering. This meeting will ensure that everyone understands and agrees with the plan.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The meeting agenda should cover the following items.\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"review-roadmap\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#review-roadmap\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Review Roadmap\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Review the vision and the product roadmap. If it seems like these steps include a lot of repetition and review, that means you're paying attention! This is another opportunity to ensure that the stakeholders are on the same page regarding the product and the release.\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"review-design-and-architecture\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#review-design-and-architecture\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Review Design and Architecture\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Next, review the technical details and design for the release. Are there dependencies or gaps that can affect the release schedule? How will the plan be adjusted if these issues can't be overcome?\\xA0\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"review-iteration-schedule\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#review-iteration-schedule\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Review Iteration schedule\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The draft release plan has user stories, story points, and proposed sprints. This step takes those stories and arranges them into sprints. One method is to arrange the stories into sprints based on \",(0,n.jsx)(e.a,{href:\"https://www.agilealliance.org/glossary/velocity/\",children:\"velocity\"}),\". How much can you reasonably expect to get done in each sprint based on development resources the points assigned to each story?\\xA0\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"define-done\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#define-done\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:'Define \"Done\"'})]}),`\n`,(0,n.jsxs)(e.p,{children:['What does \"done\" mean? Do the stakeholders and the developers agree on what the completed release will look and act like? This is where the ',(0,n.jsx)(e.a,{href:\"https://www.agilealliance.org/glossary/definition-of-done/\",children:\"Definition of Done\"}),\" needs to be codified by all stakeholders.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"step-4-execute-and-update\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#step-4-execute-and-update\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Step 4: Execute and Update\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Finally, it's time to execute the plan. Agile release plans are living documents, so putting them into action is part of the planning process.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"A review follows each iteration. What went wrong? What went better than expected? These inputs are critical for planning the next sprint. This step is crucial in keeping your development efforts on track.\\xA0\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"agile-release-plan-examples\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#agile-release-plan-examples\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Agile Release Plan Examples\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's finish up by looking at how to apply this process to the two most common product release scenarios.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"new-release\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#new-release\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"New Release\"})]}),`\n`,(0,n.jsx)(e.p,{children:`When you're planning a new release of an existing product, you already have a lot of information. There are few things more valuable than \"we've seen this before\" when planning and adjusting an Agile release plan!\\xA0`}),`\n`,(0,n.jsx)(e.p,{children:\"There's already a product out there in the world, which means someone had a vision for what it should do. It may not have been formally recorded or discussed, but there's something there. Now is your chance to get everyone together and make sure the current vision is in harmony with market conditions and business needs. Then, you can either update or create your roadmap and your design.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"The previous releases mean data on current efforts and timelines. You might be new to Agile, but you know how long the last release took and how long it takes to turn around a bug fix. That's all valuable input to the process.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:'Finally, the success or failure of previous releases will be a valuable guide when getting the stakeholders together to define \"Done.\"\\xA0'}),`\n`,(0,n.jsxs)(e.h3,{id:\"new-product\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#new-product\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"New Product\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"When planning the first release for a new product, you have to rely on the team's collective experience combined with data gathered in the testing and prototyping stages. (Of course, those stages should have gone through this process, too?) Maybe you're planning one of those stages and have nothing to go by.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:`It's hard to say that there's a most critical step of the plan, but if it exists, it's the vision, especially when talking about a new product! If the interested parties can't agree on what the new product will be, how can you define the effort required to build it? How can you define \"Done?\"\\xA0`}),`\n`,(0,n.jsx)(e.p,{children:\"Once you've agreed on the vision, you're going to do a lot of estimating and a lot of adjusting. That's okay! The estimating and adjustment are features, not bugs.\\xA0\"}),`\n`,(0,n.jsxs)(e.h2,{id:\"start-your-agile-release-plan\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#start-your-agile-release-plan\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Start Your Agile Release Plan\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"This post covered what an Agile release plan is and how to create one. We started with \",(0,n.jsx)(e.a,{href:\"https://www.agilealliance.org/agile101/12-principles-behind-the-agile-manifesto/\",children:\"first principles\"}),\" (or at least a subset) and applied them to planning and executing a release. Then we wrapped up with an overview of two common release scenarios.\\xA0\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Get started with your next Agile \",(0,n.jsx)(e.a,{href:\"https://releasehub.com/blog/awesome-release-docker-compose-examples-working-in-release-and-kubernetes\",children:\"Release\"}),\" now!\"]})]})}function k(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(c,a)})):c(a)}var x=k;return v(A);})();\n;return Component;"
  },
  "_id": "blog/posts/agile-release-plan.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/agile-release-plan.mdx",
    "sourceFileName": "agile-release-plan.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/agile-release-plan"
  },
  "type": "BlogPost",
  "computedSlug": "agile-release-plan"
}