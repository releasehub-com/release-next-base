{
  "title": "Learn how to host your own Mastodon instance on AWS",
  "summary": "A guide on how to self-host Mastodon on Release. You'll set up a web server, storage and everything else you need.",
  "publishDate": "Fri Dec 16 2022 12:17:26 GMT+0000 (Coordinated Universal Time)",
  "author": "",
  "readingTime": 20,
  "categories": [
    "kubernetes",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/26c0878254b3e4a8eb06fe9f679beb4e.jpg",
  "imageAlt": "an elephant with a tusk",
  "showCTA": true,
  "ctaCopy": "Unlock the power of hosting and scaling Mastodon instances on AWS with Release's seamless Kubernetes clusters. Boost your DevOps workflow now!",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=hosting-mastodon-on-release-and-aws",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/26c0878254b3e4a8eb06fe9f679beb4e.jpg",
  "excerpt": "A guide on how to self-host Mastodon on Release. You'll set up a web server, storage and everything else you need.",
  "tags": [
    "kubernetes",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\n### Mastodon development environments on Release and AWS\n\nTwitter users are flying the coop in droves and many are turning to Mastodon, an open-source federated social network.\n\nUnlike Twitter's centralized architecture, a federated social network consists of thousands of individual social networks, called _instances_, each with its own users.\n\nFederation is sometimes described as being similar to email in the sense that email users can send each other messages, even if they have different email hosts and use different domains.\n\nMastodon instances fetch content from other instances, which allows a user on one server to follow a user on a different server, thereby creating one big network.\n\nTo the DevOps-minded among us, the most compelling thing about the fastest-growing Twitter alternative is figuring out how to host and scale this exciting new platform.\n\nAt Release, we enable teams to create development, staging, and production environments for their apps. If you intend to add new features or otherwise modify your Mastodon instances, Release can provide the environment you need to move your project forward. Whether you want to just take Mastodon for a spin to see what it's all about, or run a production Mastodon instance that can scale up as you need, [using Release](https://release.com/book-a-demo) means you don't have to trade off simplicity for power. You can easily collaborate with your colleagues, preview the latest features, and upgrade to the latest builds.\n\nIn this post, we'll put Mastodon's welcoming community and complex federation protocols aside so that we can focus on the nuts and bolts of hosting a Mastodon instance.\n\n### What makes a Mastodon instance\n\n![](/blog-images/b500f3959bc54b57ac9455a8c5a21d0b.png)\n\nMastodon Services Diagram\n\nA Mastodon instance consists of seven services:\n\n1.  A **web server**, which runs on Ruby on Rails.\n2.  A **streaming server** that enables the instance's local users to send and receive real-time updates to the server.\n3.  **Sidekiq**, a job scheduler that runs background tasks, polls other instances' web servers, and sends data to other instances' web servers.\n4.  A **Redis server** that stores jobs for Sidekiq and caches data such as feeds for local users.\n5.  A **PostgreSQL database** that stores posts, user profiles, and instance settings.\n6.  **File storage** to store and serve media such as images and videos.\n\nAn **SMTP email server** to send messages to local users' email accounts.\n\n### How we'll run a Mastodon instance on Release and AWS\n\nRelease creates Kubernetes clusters in your AWS account.\n\nAlthough all seven of Mastodon's services could be hosted on Kubernetes, we'll use a few AWS-provided services to host supporting systems.\n\nWe'll create containers to run Mastodon's web server, streaming server, and Sidekiq in Kubernetes.\n\nFrom AWS, we'll use:\n\n- Amazon ElastiCache for Redis\n- Amazon RDS to host a PostgreSQL server\n- Amazon S3 as a file store\n- Amazon SES to send emails to local users\n\n### **Prepare your Release account**\n\nBefore we get started, you'll need to [create a Release account](https://docs.releasehub.com/getting-started/create-an-account) and upgrade to a paid account.\n\nNext, [verify your domain](https://docs.releasehub.com/guides-and-examples/domains-and-dns/external-dns) in Release, and [create a cluster](https://docs.releasehub.com/guides-and-examples/advanced-guides/create-a-cluster) using the AWS integration.\n\n#### Configuration details to save\n\nIn this guide, configuration details to note down will be pointed out with the heading: **Configuration details to save**.\n\nWhile in Release, navigate to your cluster, and note down the following:\n\n1.  The **cluster context**.\n2.  Your **cluster region**.\n\nYour **node group**.\n\n### Prepare your local machine\n\nOn your local system, you'll need to install Git and Docker.\n\nKeep a text editor handy to take notes. We'll gather configuration details as we go along, and saving these in a central file will make setting up your environment much easier later.\n\n### Fork the Mastodon repository on GitHub\n\nFork the Mastodon repository from GitHub to your GitHub, Bitbucket, or GitLab account. We'll use GitHub in this guide.\n\n1.  Log into your GitHub account.\n2.  Fork the [Mastodon](https://github.com/mastodon/mastodon/fork) repository.\n\nGitHub creates a public fork by default. Since Mastodon is AGPL-licensed, keeping your fork public is a good way to make sure you adhere to licensing requirements from the start.\n\n#### Configuration details to save\n\nMake a note of your **repository name** from GitHub.\n\n### Clone your Mastodon fork to your local machine\n\n1.  On the main page of your repository on GitHub.com, click the **Code** button\n2.  Copy the URL for the repository.\n3.  Open your terminal and navigate to where you want to clone your repository.\n4.  Clone your repository using the URL you copied\n\n```docker\n\ngit clone git@github.com:YOUR-USERNAME/mastodon.git\n\n```\n\n5.  Change your current working folder to the new repository and keep your terminal open to use again later.\n\n```docker\n\ncd mastodon\n\n```\n\n### **Generate Mastodon secret keys and VAPID keys**\n\nMastodon needs three secret keys and one public key to run. We'll generate these using the tootsuite/mastodon Docker image on our local machine.\n\n1.  Set a local environment variable SECRET_KEY_BASE. In your terminal, run:\n\n```docker\n\nSECRET_KEY_BASE=$(docker run --rm -it tootsuite/mastodon:v4.0.2 bin/rake secret)\n\n```\n\n2.  Set a local environment variable OTP_SECRET, by running the following in your terminal:\n\n```docker\n\nOTP_SECRET=$(docker run --rm -it tootsuite/mastodon:v4.0.2 bin/rake secret)\n\n```\n\n3.  Generate VAPID keys, using the SECRET_KEY_BASE and OTP_SECRET as inputs, and print our new keys to the terminal.\n\n```docker\n\ndocker run --rm \\\n   -e OTP_SECRET=$OTP_SECRET \\\n   -e SECRET_KEY_BASE=$SECRET_KEY_BASE \\\n   -it tootsuite/mastodon:v4.0.2 \\\n   bin/rake mastodon:webpush:generate_vapid_key && \\\n   echo \"SECRET_KEY_BASE=$SECRET_KEY_BASE\" && \\\n   echo \"OTP_SECRET=$OTP_SECRET\"\n```\n\n### **Configuration details to save**\n\nCopy and save VAPID_PRIVATE_KEY, VAPID_PUBLIC_KEY, SECRET_KEY_BASE, and OTP_SECRET values from the output, which should look something like this:\n\n```docker\n\nVAPID_PRIVATE_KEY=cDpok1oPz1u6jpP2fE_Vf2TWBy-VVHh0n3KqdCEz81A=\nVAPID_PUBLIC_KEY=BAb1gkLWzalGfAZq_7IeGX19T1Rp4I5aIerN_sDfon5eenIEn9DAWU1LLpFSu6VjtnhJJilbZXLBBdUSa6DL74Y=\nSECRET_KEY_BASE=bb0231c8e07870b70934a9487cd6e796bbd6f4fe086dfa9039be3743a96e18726ea168cde3cf3ea823c5214e09b8afb7696324eb024f4317cb2626e0545aac12\nOTP_SECRET=19a4d2e15d4ffa63c5ad08d716f33b2296419a6529a49908bd4f879891710d1f9efc1007efc9c18e82aeb52cba763cbd89b030ed2069be8464d9f26d167ea102\n```\n\n### **AWS Step 1: Create a PostgreSQL database using Amazon RDS**\n\nLog in to your AWS account and navigate to RDS.\n\nMake sure your AWS region is set to the same region as your Release cluster.\n\nCreate a new PostgreSQL 14 database:\n\n1.  Click on **create database**.\n\n![RDS create database](/blog-images/a8f7af65e782a9b482b6edf9e806694b.png)\n\n_RDS create database_ 2. Select **standard create**. 3. Select PostgreSQL as the engine type. 4. Pick PostgreSQL 14.5-R1 as the engine version.\n\n![RDS create database steps 2 to 4](/blog-images/657c13cc97a0c58231008fbc90e3bd39.png)\n\n_RDS create database steps 2 to 4_ 5. Select **Free tier** if you're only setting up a small/test instance. 6. Set the _DB instance identifier_ to mastodon-1. We'll need to refer to this again later.\n\n![RDS create database steps 5 to 6](/blog-images/9e77fd3763b23a49be6d22ab0586cfc1.png)\n\n_RDS create database steps 5 to 6_ 7. To make sure you don't use more space than needed, change the _allocated storage_ to 20 GiB. 8. Disable autoscaling. 9. Under the **connectivity** section, select the virtual private cloud (VPC) that Release created for your cluster. This will enable services running in the cluster to reach your new database.\n\n![RDS create database steps 7 to 8](/blog-images/aa25b0121074a8bf5953f1bf547ee4da.png)\n\n_RDS create database steps 7 to 8_ 10. Choose to allow an existing security group. 11. Under **Existing VPC security groups**, pick the security group that starts with eks-cluster-sg- followed by your cluster context, then close the dropdown.\n\n![RDS create database steps 8 to 10](/blog-images/cb7eb42499a8c3e28726ddb6b552c6cd.png)\n\n_RDS create database steps 9 to 11_ 12. Click **Create database**.\n\n![RDS create database steps 8 to 10](/blog-images/5689429d0212e384a6198ff37a1ac92a.png)\n\n_RDS create database step 12_\n\nYour database will take a few minutes to launch.\n\n#### Configuration details to save\n\nOnce the database is ready, click on **view connection details** and note down the **database endpoint** and **database password**.\n\n![Screenshot of RDS PostgreSQL configuration details](/blog-images/c0b4990b5c39223beec5652e543826a8.png)\n\n_RDS PostgreSQL configuration details_\n\n### AWS Step 2: Create a Redis cache using Amazon ElastiCache\n\nBefore we create a Redis cache, we'll need to get the VPC ID for our Release cluster (Amazon ElastiCache does not show the full VPC name when creating a Redis cluster).\n\nIn AWS, navigate to **VPC**, then note down the VPC ID for your Release cluster.\n\n![Screenshot of Amazon VPC](/blog-images/a415ad14fc62b594fce757cb13b7a55e.png)\n\n_Amazon VPC_\n\nWith the VPC ID at hand, we can create a Redis cluster. In your AWS account, navigate to ElastiCache.\n\n1.  Click on **create cluster**.\n2.  Select **create Redis cluster**.\n\n![Screenshot of ElastiCache](/blog-images/073994066b09d353fb7e1700275ab2e4.png)\n\n_ElastiCache_\n\nThis opens up the **cluster settings** page, where we'll configure our Redis cluster.\n\nUnder **cluster info**, set a name for this Redis cluster, for example, mastodon-redis.\n\n![Screenshot of Redis configuration section](/blog-images/eaba3a434d845fe7e5135f7dde97fd89.png)\n\n_Redis configuration section_\n\nIn the **connectivity** section:\n\n1.  Set a name for the Redis cluster's subnet, for example, mastodon-redis-subnet.\n2.  Select your Release cluster's **VPC ID** from the dropdown.\n\n![Screenshot of Redis connectivity section](/blog-images/c9e88c18c4248cb0849aa8eabc18332c.png)\n\n_Redis connectivity section_\n\nClick **Next**.\n\nUnder **selected security groups**, click **Manage**.\n\n1.  Filter the security groups to find one that starts with eks-cluster-sg-.\n2.  Select the security group that starts with eks-cluster-sg- followed by your Release cluster's context.\n3.  Click **choose**.\n\n![Screenshot of Redis advanced settings page](/blog-images/799f15d8d6037eb172573272b40a6f99.png)\n\n_Screenshot of Redis advanced settings page_\n\nScroll down to the bottom of the page and click **next**.\n\nScroll down the page to review your Redis settings, then click on **create**.\n\nAWS will take a moment to create your Redis cluster.\n\n#### Configuration details to save\n\nOpen the Redis cluster's details and copy the Redis cluster's endpoint (you can omit the port number).\n\n![Screenshot of Redis Cluster details](/blog-images/4646a089f3c224805a89809e571aad8e.png)\n\n_Redis Cluster details_\n\n### AWS Step 3: Create an Amazon S3 bucket for user media\n\nIn your AWS account, navigate to S3.\n\nClick on **create bucket**.\n\nEnter a unique bucket name, for example, mastodon-media-example.\n\nUncheck **Block all public access**.\n\nCheck \"I acknowledge that the current settings might result in this bucket and the objects within becoming public\".\n\nClick **create bucket**.\n\nAWS will take a moment to create your new S3 bucket.\n\n### AWS Step 4: Create an IAM user to write to S3\n\nIn your AWS account, navigate to **Identity and Access Management (IAM)**.\n\nClick on **Users**, then on **Add users**.\n\n1.  Enter a username, for example, mastodon-s3-writer.\n2.  Under **Select AWS credential type**, select only **Access key - Programmatic access**.\n3.  Click **Next: Permissions**.\n\nOn the **Set permissions** page:\n\n1.  Select **Attach existing policies directly**.\n2.  Filter for s3 policies.\n3.  Check **AmazonS3FullAccess**.\n4.  Click **Next: Tags**.\n\nClick **Next: Review**.\n\nFinally, click **Create user**.\n\n#### **Configuration details to save**\n\nNote down the access key ID and secret access key. Keep in mind that you won't be able to see this secret again, so you'll need to save it now and keep it secure.\n\n### AWS Step 5: Create an Amazon SES identity\n\nIn AWS, navigate to **Amazon Simple Email Service (SES)**.\n\nClick **Create identity**.\n\n1.  Select **Email address** as the identity type.\n2.  Enter an email address where you can receive emails.\n3.  Click **Create identity**.\n\nYou'll need to log in to the inbox for the email address you entered and verify the SES sending identity by clicking a link. Look for an email with the subject \"Amazon Web Services – Email Address Verification Request\".\n\nBack in AWS, you should now see that the identity status has changed to **verified**. If not, reload the page.\n\nSend a test email to see whether the sending identity works.\n\nClick on **SMTP settings** in the left sidebar, then on **Create SMTP credentials**.\n\nClick **Create**.\n\n#### Configuration details to save\n\nToggle **Show User SMTP Security Credentials**, then copy and save the SMTP username and password. You won't have access to the password again after this step, so keep it secure.\n\nAfter saving the credentials, click **Close**.\n\n### Create an application in Release\n\nLog in to your Release account, then click on **create new app**.\n\n1.  Enter a name for your Mastodon app, for example, mastodon.\n2.  Pick your forked repository.\n3.  Click **Next step**.\n\n![Pick your repository in Release](/blog-images/bb50a403d5b1db5f44469f63fa0a44eb.png)\n\n_Pick your repository in Release_\n\n### Pick your services in Release\n\n1.  Select **Analyze the repository**\n2.  Select the branch you would like to run.\n3.  Select the root docker-compose.yml file.\n4.  Click **Start Analysis**.\n\n![Analyze your repository in Release](/blog-images/9ec0311f450da8a01b90ac5b2a50edc0.png)\n\n_Analyze your repository in Release_\n\nRelease will now find services in your docker-compose.yml file.\n\nPick only the following services:\n\n- sidekiq\n- streaming\n- web\n\n![Pick services in Release](/blog-images/dafb0cefab0bed1f4964fb7e66c5f088.png)\n\n_Pick services in Release_\n\nClick **Next Step**.\n\n### Edit the generated template\n\nRelease generates a template from the services we selected in the previous step.\n\nThis template is a YAML file that Release uses to generate new environments. It specifies the services, ingress rules, and workflows required to set up your app.\n\n#### Double-check the template context and domain\n\nMake sure the context in your application template matches your Release cluster's context and that the domain matches the verified domain you'd like to use for this application.\n\n#### Replace hostnames with rules\n\nRelease automatically generates hostname templates for services that have node ports and adds them to a hostnames section in your Application Template.\n\nOn a Mastodon server, the public services web and streaming share a hostname but are served at different paths.\n\nRelease configures a Kubernetes ingress controller to route traffic to your applications, based on the hostnames or rules settings, but only one of these settings can be used per environment. We'll use only rules.\n\nUpdate the template to **replace** hostnames with the following rules:\n\n```docker\n\nrules:\n- service: web\n  hostnames:\n  - mastodon-${env_id}.${domain}\n  path: \"/\"\n- service: streaming\n  hostnames:\n  - mastodon-${env_id}.${domain}\n  path: \"/api/v1/streaming\"\n\n```\n\nThe changes should look like this:\n\n```docker\n- hostnames:\n-   streaming: streaming-mastodon-${env_id}.${domain}\n-   web: web-mastodon-${env_id}.${domain}\n+ rules:\n+ - service: web\n+   hostnames:\n+   - mastodon-${env_id}.${domain}\n+   path: \"/\"\n+ - service: streaming\n+   hostnames:\n+   - mastodon-${env_id}.${domain}\n+   path: \"/api/v1/streaming\"\n\n```\n\nThis instructs Release to create two Nginx location blocks on the Kubernetes ingress controller for your application, to direct requests to either web or streaming, depending on the path in the request.\n\n### Update the readiness_probe for Sidekiq\n\nIn the sidekiq service, replace the readiness_probe with the following:\n\n```docker\n\n  readiness_probe:\n    exec:\n      command:\n      - bash\n      - \"-c\"\n      - ps aux | grep '[s]idekiq\\ 6' || false\n    period_seconds: 30\n    timeout_seconds: 30\n    failure_threshold: 3\n    initial_delay_seconds: 10\n\n```\n\n### Update the readiness_probe for the webserver\n\nIn the web service, replace the readiness_probe with the following:\n\n```docker\n\n  readiness_probe:\n    http_get:\n      path: \"/health\"\n      port: 3000\n    initial_delay_seconds: 20\n    period_seconds: 30\n    timeout_seconds: 30\n    failure_threshold: 3\n\n```\n\n### Update the readiness_probe for the streaming server\n\nIn the streaming server, replace the readiness_probe with the following:\n\n```docker\n\n  readiness_probe:\n    http_get:\n      path: \"/api/v1/streaming/health\"\n      port: 4000\n    initial_delay_seconds: 20\n    period_seconds: 30\n    timeout_seconds: 30\n    failure_threshold: 3\n\n```\n\n### Add database migrations as jobs\n\nRelease can run jobs in your environments to handle once-off or repeat tasks. These can be triggered by steps in an environment's workflows.\n\nFor example, when Release first creates an environment for Mastodon, a db:setup job needs to be run to create Mastodon's database schema. Release calls this stage in the workflow setup.\n\nMastodon also needs to run database migrations during version upgrades, so that the database schema is updated along with the code. We can use Release's patch stage for this job.\n\nDuring version upgrades, Mastodon splits pre-deployment and post-deployment database migrations. We'll add two migration jobs, dbmigratepre and dbmigrate.\n\nAdd the following jobs to your template:\n\n```docker\n\njobs:\n- name: dbmigratepre\n  command:\n  - \"/usr/bin/tini\"\n  - \"--\"\n  args:\n  - bash\n  - \"-c\"\n  - rails db:version && export SKIP_POST_DEPLOYMENT_MIGRATIONS=true && rails db:migrate || rails db:setup\n  from_services: web\n- name: dbmigrate\n  command:\n  - \"/usr/bin/tini\"\n  - \"--\"\n  args:\n  - bash\n  - \"-c\"\n  - rails db:version && rails db:migrate || rails db:setup\n  from_services: web\n\n```\n\n### Add an admin user as a job\n\nAfter our services are live and the database is ready, we'll use the Mastodon CLI to create an admin user.\n\nAdd the following job to the jobs you created earlier:\n\n```docker\n- name: mastodonuser\n  command:\n  - \"/usr/bin/tini\"\n  - \"--\"\n  args:\n  - bash\n  - \"-c\"\n  - tootctl accounts create $MASTODON_OWNER_USERNAME --email $MASTODON_OWNER_EMAIL --role Owner\n  from_services: web\n\n```\n\n### Add jobs to workflows\n\nLet's update the workflows section to run these jobs during setup and patch stages.\n\nBecause the order in which our new jobs are run is important, we'll update the parallelize sections in these stages to create new steps.\n\nReplace the workflows section of the template with the following:\n\n```docker\n\nworkflows:\n- name: setup\n  parallelize:\n  - step: dbmigratepre\n    tasks:\n    - jobs.dbmigratepre\n  - step: services\n    tasks:\n    - services.sidekiq\n    - services.streaming\n    - services.web\n  - step: dbmigrate\n    tasks:\n    - jobs.dbmigrate\n  - step: mastodonuser\n    tasks:\n    - jobs.mastodonuser\n- name: patch\n  parallelize:\n  - step: dbmigratepre\n    tasks:\n    - jobs.dbmigratepre\n  - step: services\n    tasks:\n    - services.sidekiq\n    - services.streaming\n    - services.web\n  - step: dbmigrate\n    tasks:\n    - jobs.dbmigrate\n- name: teardown\n  parallelize:\n  - step: remove_environment\n    tasks:\n    - release.remove_environment\n\n```\n\n### Save your changes to the template\n\nClick **Next Step** to save your template, and move on to your environment variables.\n\n### Edit the default environment variables\n\nFor this step, you'll need to retrieve the following information that we saved previously:\n\n#### Generated on your local machine using Docker\n\n- SECRET_KEY_BASE\n- OTP_SECRET\n- VAPID_PRIVATE_KEY\n- VAPID_PUBLIC_KEY\n\n#### PostgreSQL endpoint and password from Amazon RDS\n\n- DB_HOST\n- DB_PASS\n\n#### Redis cluster endpoint from Amazon ElastiCache\n\n- REDIS_HOST\n\n#### SMTP credentials from Amazon Simple Email Service\n\n- SMTP_LOGIN\n- SMTP_PASSWORD\n- SMTP_SERVER: Get the SES endpoint for your region from [AWS docs](https://docs.aws.amazon.com/general/latest/gr/ses.html)\n- SMTP_FROM_ADDRESS: This is the verified email address Mastodon will send emails from\n\n### S3 bucket details and IAM access keys\n\n- S3_BUCKET\n- AWS_ACCESS_KEY_ID\n- AWS_SECRET_ACCESS_KEY\n- S3_REGION\n\n### Mastodon user details\n\n- MASTODON_OWNER_USERNAME: Some names, such as admin, owner, and user, are reserved. Use something unique.\n- MASTODON_OWNER_EMAIL: Use an email address you can receive your sign-up email at. Keep in mind that Amazon SES can only send messages to verified email addresses while in sandbox mode.\n\nIn Release, paste the following environment variables file in the default environment variables YAML editor, then update any values that are empty with the values we saved previously.\n\n```yaml\n---\ndefaults:\n  - key: SINGLE_USER_MODE\n    value: true\n  - key: SECRET_KEY_BASE\n    value:\n    secret: true\n  - key: OTP_SECRET\n    value:\n    secret: true\n  - key: VAPID_PRIVATE_KEY\n    value:\n    secret: true\n  - key: VAPID_PUBLIC_KEY\n    value:\n  - key: DB_HOST\n    value:\n  - key: DB_PORT\n    value: 5432\n  - key: DB_USER\n    value: postgres\n  - key: DB_PASS\n    value:\n    secret: true\n  - key: REDIS_HOST\n    value:\n  - key: REDIS_PORT\n    value: 6379\n  - key: SMTP_SERVER\n    value:\n  - key: SMTP_PORT\n    value: 587\n  - key: SMTP_LOGIN\n    value:\n  - key: SMTP_PASSWORD\n    value:\n    secret: true\n  - key: SMTP_AUTH_METHOD\n    value: plain\n  - key: SMTP_OPENSSL_VERIFY_MODE\n    value: none\n  - key: SMTP_FROM_ADDRESS\n    value:\n  - key: S3_ENABLED\n    value: true\n  - key: S3_BUCKET\n    value: mastodon-media-example\n  - key: AWS_ACCESS_KEY_ID\n    value:\n  - key: AWS_SECRET_ACCESS_KEY\n    value:\n    secret: true\n  - key: S3_REGION\n    value:\n  - key: S3_PROTOCOL\n    value: https\n  # MASTODON_OWNER_USERNAME can't be admin, owner, user\n  - key: MASTODON_OWNER_USERNAME\n    value:\n  - key: MASTODON_OWNER_EMAIL\n    value:\nservices:\n  sidekiq: []\n  streaming: []\n  web: []\nmapping:\n  LOCAL_DOMAIN: WEB_INGRESS_HOST\n  S3_HOSTNAME: s3-${S3_REGION}.amazonaws.com\n  DB_NAME: mastodon_prod_${RELEASE_RANDOMNESS}\n```\n\nClick **Next Step** to save your default environment variables.\n\n### Deploy the app\n\nYou can skip over the **build arguments** step because we're not adding any build arguments to this application.\n\n![Screenshot of app deploy button](/blog-images/3e2d9f50bb3b9f18a6acbfc354b31c4d.png)\n\nDeploy your app\n\nFinally, click **Deploy your app!**\n\n### Follow the deployment\n\nRelease will now build Docker images for our services and deploy an environment.\n\n![Screenshot of deployment](/blog-images/5dd18dad5f93baba80a1c4392e739b92.png)\n\nDeployment progress\n\nThe deployment information page shows all of the steps involved, from building the Docker images, through database migrations, and finally adding your admin user.\n\nClick the mastodonuser job step to reveal the output, and copy the password Mastodon generated for your user.\n\n![Screenshot of step showing user password](/blog-images/885332524cf51d1af59184b2bce6dc6b.png)\n\nView user password\n\nIf you miss this password, you can use the Mastodon web interface to request a password reset.\n\n### Log in and start posting\n\nWith your Mastodon instance up and running, log in and start posting.\n\n![Screenshot of environment info page, showing the web URL](/blog-images/cf41249f4d65a690662ad9910727daca.png)\n\n_environment info page, showing the web URL_\n\nYou can find the public URL for your instance by navigating to the Environment Info page in Release. Click the web URL in the right sidebar to visit your instance.\n\n![Screenshot of Mastodon](/blog-images/35a7506285674efeaf8be72abcacab96.png)\n\nMastodon in action\n\n### What to do next: create more environments\n\nRelease really shines when you create environments for different branches in your codebase.\n\nTest this by creating a feature branch with a small change, and follow Release's guide on [creating a new environment](https://docs.releasehub.com/getting-started/create-an-environment) for your new branch.\n\n### Further reading\n\nEven if Mastodon doesn't replace Twitter, it will likely only grow in popularity. If you plan to host a public instance for your organization, you may want to make sure you focus on two important aspects: moderation and scaling.\n\nRunning any community on the internet is notoriously hard to get right. Keeping users, the public, and your servers happy might seem impossible, but many have gone before us and shared their experiences.\n\nHere's a quick overview of recent writing on these topics:\n\n- [Scaling up your server](https://docs.joinmastodon.org/admin/scaling/): The official Mastodon documentation on scaling your server, which might not be as suited to a Kubernetes-hosted instance.\n- [Moderation actions](https://docs.joinmastodon.org/admin/moderation/): The official Mastodon documentation on available moderation tools. These are invaluable if you plan to allow public content on your instance.\n- [Mastodon Server Covenant](https://joinmastodon.org/covenant): A covenant which can also inform your moderation and hosting decisions.\n\n### Learn more about Release\n\nOf course, you aren't limited to hosting Mastodon. If you want to learn more about how Release can help you host your own software or other third party packages, [book a demo.](https://release.com/book-a-demo)\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),b=(a,e)=>{for(var i in e)s(a,i,{get:e[i],enumerable:!0})},o=(a,e,i,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!g.call(a,r)&&r!==i&&s(a,r,{get:()=>e[r],enumerable:!(t=p(e,r))||t.enumerable});return a};var y=(a,e,i)=>(i=a!=null?h(u(a)):{},o(e||!a||!a.__esModule?s(i,\"default\",{value:a,enumerable:!0}):i,a)),k=a=>o(s({},\"__esModule\",{value:!0}),a);var c=f((R,l)=>{l.exports=_jsx_runtime});var _={};b(_,{default:()=>S,frontmatter:()=>v});var n=y(c()),v={title:\"Learn how to host your own Mastodon instance on AWS\",summary:\"A guide on how to self-host Mastodon on Release. You'll set up a web server, storage and everything else you need.\",publishDate:\"Fri Dec 16 2022 12:17:26 GMT+0000 (Coordinated Universal Time)\",author:\"\",readingTime:20,categories:[\"kubernetes\",\"platform-engineering\"],mainImage:\"/blog-images/26c0878254b3e4a8eb06fe9f679beb4e.jpg\",imageAlt:\"an elephant with a tusk\",showCTA:!0,ctaCopy:\"Unlock the power of hosting and scaling Mastodon instances on AWS with Release's seamless Kubernetes clusters. Boost your DevOps workflow now!\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=hosting-mastodon-on-release-and-aws\",relatedPosts:[\"\"],ogImage:\"/blog-images/26c0878254b3e4a8eb06fe9f679beb4e.jpg\",excerpt:\"A guide on how to self-host Mastodon on Release. You'll set up a web server, storage and everything else you need.\",tags:[\"kubernetes\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function d(a){let e=Object.assign({h3:\"h3\",a:\"a\",span:\"span\",p:\"p\",em:\"em\",img:\"img\",ol:\"ol\",li:\"li\",strong:\"strong\",ul:\"ul\",h4:\"h4\",pre:\"pre\",code:\"code\"},a.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.h3,{id:\"mastodon-development-environments-on-release-and-aws\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#mastodon-development-environments-on-release-and-aws\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Mastodon development environments on Release and AWS\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Twitter users are flying the coop in droves and many are turning to Mastodon, an open-source federated social network.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Unlike Twitter's centralized architecture, a federated social network consists of thousands of individual social networks, called \",(0,n.jsx)(e.em,{children:\"instances\"}),\", each with its own users.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Federation is sometimes described as being similar to email in the sense that email users can send each other messages, even if they have different email hosts and use different domains.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Mastodon instances fetch content from other instances, which allows a user on one server to follow a user on a different server, thereby creating one big network.\"}),`\n`,(0,n.jsx)(e.p,{children:\"To the DevOps-minded among us, the most compelling thing about the fastest-growing Twitter alternative is figuring out how to host and scale this exciting new platform.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"At Release, we enable teams to create development, staging, and production environments for their apps. If you intend to add new features or otherwise modify your Mastodon instances, Release can provide the environment you need to move your project forward. Whether you want to just take Mastodon for a spin to see what it's all about, or run a production Mastodon instance that can scale up as you need, \",(0,n.jsx)(e.a,{href:\"https://release.com/book-a-demo\",children:\"using Release\"}),\" means you don't have to trade off simplicity for power. You can easily collaborate with your colleagues, preview the latest features, and upgrade to the latest builds.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In this post, we'll put Mastodon's welcoming community and complex federation protocols aside so that we can focus on the nuts and bolts of hosting a Mastodon instance.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-makes-a-mastodon-instance\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-makes-a-mastodon-instance\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What makes a Mastodon instance\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/b500f3959bc54b57ac9455a8c5a21d0b.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Mastodon Services Diagram\"}),`\n`,(0,n.jsx)(e.p,{children:\"A Mastodon instance consists of seven services:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"A \",(0,n.jsx)(e.strong,{children:\"web server\"}),\", which runs on Ruby on Rails.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A \",(0,n.jsx)(e.strong,{children:\"streaming server\"}),\" that enables the instance's local users to send and receive real-time updates to the server.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"Sidekiq\"}),\", a job scheduler that runs background tasks, polls other instances' web servers, and sends data to other instances' web servers.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A \",(0,n.jsx)(e.strong,{children:\"Redis server\"}),\" that stores jobs for Sidekiq and caches data such as feeds for local users.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"A \",(0,n.jsx)(e.strong,{children:\"PostgreSQL database\"}),\" that stores posts, user profiles, and instance settings.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.strong,{children:\"File storage\"}),\" to store and serve media such as images and videos.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"An \",(0,n.jsx)(e.strong,{children:\"SMTP email server\"}),\" to send messages to local users' email accounts.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"how-well-run-a-mastodon-instance-on-release-and-aws\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#how-well-run-a-mastodon-instance-on-release-and-aws\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"How we'll run a Mastodon instance on Release and AWS\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Release creates Kubernetes clusters in your AWS account.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Although all seven of Mastodon's services could be hosted on Kubernetes, we'll use a few AWS-provided services to host supporting systems.\"}),`\n`,(0,n.jsx)(e.p,{children:\"We'll create containers to run Mastodon's web server, streaming server, and Sidekiq in Kubernetes.\"}),`\n`,(0,n.jsx)(e.p,{children:\"From AWS, we'll use:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Amazon ElastiCache for Redis\"}),`\n`,(0,n.jsx)(e.li,{children:\"Amazon RDS to host a PostgreSQL server\"}),`\n`,(0,n.jsx)(e.li,{children:\"Amazon S3 as a file store\"}),`\n`,(0,n.jsx)(e.li,{children:\"Amazon SES to send emails to local users\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"prepare-your-release-account\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#prepare-your-release-account\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Prepare your Release account\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Before we get started, you'll need to \",(0,n.jsx)(e.a,{href:\"https://docs.releasehub.com/getting-started/create-an-account\",children:\"create a Release account\"}),\" and upgrade to a paid account.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, \",(0,n.jsx)(e.a,{href:\"https://docs.releasehub.com/guides-and-examples/domains-and-dns/external-dns\",children:\"verify your domain\"}),\" in Release, and \",(0,n.jsx)(e.a,{href:\"https://docs.releasehub.com/guides-and-examples/advanced-guides/create-a-cluster\",children:\"create a cluster\"}),\" using the AWS integration.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"configuration-details-to-save\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Configuration details to save\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In this guide, configuration details to note down will be pointed out with the heading: \",(0,n.jsx)(e.strong,{children:\"Configuration details to save\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"While in Release, navigate to your cluster, and note down the following:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"The \",(0,n.jsx)(e.strong,{children:\"cluster context\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Your \",(0,n.jsx)(e.strong,{children:\"cluster region\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Your \",(0,n.jsx)(e.strong,{children:\"node group\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"prepare-your-local-machine\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#prepare-your-local-machine\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Prepare your local machine\"]}),`\n`,(0,n.jsx)(e.p,{children:\"On your local system, you'll need to install Git and Docker.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Keep a text editor handy to take notes. We'll gather configuration details as we go along, and saving these in a central file will make setting up your environment much easier later.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"fork-the-mastodon-repository-on-github\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#fork-the-mastodon-repository-on-github\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Fork the Mastodon repository on GitHub\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Fork the Mastodon repository from GitHub to your GitHub, Bitbucket, or GitLab account. We'll use GitHub in this guide.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Log into your GitHub account.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Fork the \",(0,n.jsx)(e.a,{href:\"https://github.com/mastodon/mastodon/fork\",children:\"Mastodon\"}),\" repository.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"GitHub creates a public fork by default. Since Mastodon is AGPL-licensed, keeping your fork public is a good way to make sure you adhere to licensing requirements from the start.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"configuration-details-to-save-1\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save-1\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Configuration details to save\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Make a note of your \",(0,n.jsx)(e.strong,{children:\"repository name\"}),\" from GitHub.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"clone-your-mastodon-fork-to-your-local-machine\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#clone-your-mastodon-fork-to-your-local-machine\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Clone your Mastodon fork to your local machine\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"On the main page of your repository on GitHub.com, click the \",(0,n.jsx)(e.strong,{children:\"Code\"}),\" button\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Copy the URL for the repository.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Open your terminal and navigate to where you want to clone your repository.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Clone your repository using the URL you copied\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\ngit clone git@github.com:YOUR-USERNAME/mastodon.git\n\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"5\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Change your current working folder to the new repository and keep your terminal open to use again later.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\ncd mastodon\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"generate-mastodon-secret-keys-and-vapid-keys\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#generate-mastodon-secret-keys-and-vapid-keys\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Generate Mastodon secret keys and VAPID keys\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Mastodon needs three secret keys and one public key to run. We'll generate these using the tootsuite/mastodon Docker image on our local machine.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Set a local environment variable SECRET_KEY_BASE. In your terminal, run:\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\nSECRET_KEY_BASE=$(docker run --rm -it tootsuite/mastodon:v4.0.2 bin/rake secret)\n\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"2\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Set a local environment variable OTP_SECRET, by running the following in your terminal:\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\nOTP_SECRET=$(docker run --rm -it tootsuite/mastodon:v4.0.2 bin/rake secret)\n\n`})}),`\n`,(0,n.jsxs)(e.ol,{start:\"3\",children:[`\n`,(0,n.jsx)(e.li,{children:\"Generate VAPID keys, using the SECRET_KEY_BASE and OTP_SECRET as inputs, and print our new keys to the terminal.\"}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\ndocker run --rm \\\\\n   -e OTP_SECRET=$OTP_SECRET \\\\\n   -e SECRET_KEY_BASE=$SECRET_KEY_BASE \\\\\n   -it tootsuite/mastodon:v4.0.2 \\\\\n   bin/rake mastodon:webpush:generate_vapid_key && \\\\\n   echo \"SECRET_KEY_BASE=$SECRET_KEY_BASE\" && \\\\\n   echo \"OTP_SECRET=$OTP_SECRET\"\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"configuration-details-to-save-2\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save-2\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Configuration details to save\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Copy and save VAPID_PRIVATE_KEY, VAPID_PUBLIC_KEY, SECRET_KEY_BASE, and OTP_SECRET values from the output, which should look something like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\nVAPID_PRIVATE_KEY=cDpok1oPz1u6jpP2fE_Vf2TWBy-VVHh0n3KqdCEz81A=\nVAPID_PUBLIC_KEY=BAb1gkLWzalGfAZq_7IeGX19T1Rp4I5aIerN_sDfon5eenIEn9DAWU1LLpFSu6VjtnhJJilbZXLBBdUSa6DL74Y=\nSECRET_KEY_BASE=bb0231c8e07870b70934a9487cd6e796bbd6f4fe086dfa9039be3743a96e18726ea168cde3cf3ea823c5214e09b8afb7696324eb024f4317cb2626e0545aac12\nOTP_SECRET=19a4d2e15d4ffa63c5ad08d716f33b2296419a6529a49908bd4f879891710d1f9efc1007efc9c18e82aeb52cba763cbd89b030ed2069be8464d9f26d167ea102\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"aws-step-1-create-a-postgresql-database-using-amazon-rds\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#aws-step-1-create-a-postgresql-database-using-amazon-rds\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"AWS Step 1: Create a PostgreSQL database using Amazon RDS\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Log in to your AWS account and navigate to RDS.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Make sure your AWS region is set to the same region as your Release cluster.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Create a new PostgreSQL 14 database:\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Click on \",(0,n.jsx)(e.strong,{children:\"create database\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a8f7af65e782a9b482b6edf9e806694b.png\",alt:\"RDS create database\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"RDS create database\"}),\" 2. Select \",(0,n.jsx)(e.strong,{children:\"standard create\"}),\". 3. Select PostgreSQL as the engine type. 4. Pick PostgreSQL 14.5-R1 as the engine version.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/657c13cc97a0c58231008fbc90e3bd39.png\",alt:\"RDS create database steps 2 to 4\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"RDS create database steps 2 to 4\"}),\" 5. Select \",(0,n.jsx)(e.strong,{children:\"Free tier\"}),\" if you're only setting up a small/test instance. 6. Set the \",(0,n.jsx)(e.em,{children:\"DB instance identifier\"}),\" to mastodon-1. We'll need to refer to this again later.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/9e77fd3763b23a49be6d22ab0586cfc1.png\",alt:\"RDS create database steps 5 to 6\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"RDS create database steps 5 to 6\"}),\" 7. To make sure you don't use more space than needed, change the \",(0,n.jsx)(e.em,{children:\"allocated storage\"}),\" to 20 GiB. 8. Disable autoscaling. 9. Under the \",(0,n.jsx)(e.strong,{children:\"connectivity\"}),\" section, select the virtual private cloud (VPC) that Release created for your cluster. This will enable services running in the cluster to reach your new database.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/aa25b0121074a8bf5953f1bf547ee4da.png\",alt:\"RDS create database steps 7 to 8\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"RDS create database steps 7 to 8\"}),\" 10. Choose to allow an existing security group. 11. Under \",(0,n.jsx)(e.strong,{children:\"Existing VPC security groups\"}),\", pick the security group that starts with eks-cluster-sg- followed by your cluster context, then close the dropdown.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/cb7eb42499a8c3e28726ddb6b552c6cd.png\",alt:\"RDS create database steps 8 to 10\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"RDS create database steps 9 to 11\"}),\" 12. Click \",(0,n.jsx)(e.strong,{children:\"Create database\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/5689429d0212e384a6198ff37a1ac92a.png\",alt:\"RDS create database steps 8 to 10\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"RDS create database step 12\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Your database will take a few minutes to launch.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"configuration-details-to-save-3\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save-3\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Configuration details to save\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once the database is ready, click on \",(0,n.jsx)(e.strong,{children:\"view connection details\"}),\" and note down the \",(0,n.jsx)(e.strong,{children:\"database endpoint\"}),\" and \",(0,n.jsx)(e.strong,{children:\"database password\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/c0b4990b5c39223beec5652e543826a8.png\",alt:\"Screenshot of RDS PostgreSQL configuration details\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"RDS PostgreSQL configuration details\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"aws-step-2-create-a-redis-cache-using-amazon-elasticache\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#aws-step-2-create-a-redis-cache-using-amazon-elasticache\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"AWS Step 2: Create a Redis cache using Amazon ElastiCache\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Before we create a Redis cache, we'll need to get the VPC ID for our Release cluster (Amazon ElastiCache does not show the full VPC name when creating a Redis cluster).\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In AWS, navigate to \",(0,n.jsx)(e.strong,{children:\"VPC\"}),\", then note down the VPC ID for your Release cluster.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a415ad14fc62b594fce757cb13b7a55e.png\",alt:\"Screenshot of Amazon VPC\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Amazon VPC\"})}),`\n`,(0,n.jsx)(e.p,{children:\"With the VPC ID at hand, we can create a Redis cluster. In your AWS account, navigate to ElastiCache.\"}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Click on \",(0,n.jsx)(e.strong,{children:\"create cluster\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Select \",(0,n.jsx)(e.strong,{children:\"create Redis cluster\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/073994066b09d353fb7e1700275ab2e4.png\",alt:\"Screenshot of ElastiCache\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"ElastiCache\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This opens up the \",(0,n.jsx)(e.strong,{children:\"cluster settings\"}),\" page, where we'll configure our Redis cluster.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Under \",(0,n.jsx)(e.strong,{children:\"cluster info\"}),\", set a name for this Redis cluster, for example, mastodon-redis.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/eaba3a434d845fe7e5135f7dde97fd89.png\",alt:\"Screenshot of Redis configuration section\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Redis configuration section\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the \",(0,n.jsx)(e.strong,{children:\"connectivity\"}),\" section:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Set a name for the Redis cluster's subnet, for example, mastodon-redis-subnet.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Select your Release cluster's \",(0,n.jsx)(e.strong,{children:\"VPC ID\"}),\" from the dropdown.\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/c9e88c18c4248cb0849aa8eabc18332c.png\",alt:\"Screenshot of Redis connectivity section\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Redis connectivity section\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Under \",(0,n.jsx)(e.strong,{children:\"selected security groups\"}),\", click \",(0,n.jsx)(e.strong,{children:\"Manage\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Filter the security groups to find one that starts with eks-cluster-sg-.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Select the security group that starts with eks-cluster-sg- followed by your Release cluster's context.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"choose\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/799f15d8d6037eb172573272b40a6f99.png\",alt:\"Screenshot of Redis advanced settings page\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Screenshot of Redis advanced settings page\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Scroll down to the bottom of the page and click \",(0,n.jsx)(e.strong,{children:\"next\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Scroll down the page to review your Redis settings, then click on \",(0,n.jsx)(e.strong,{children:\"create\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"AWS will take a moment to create your Redis cluster.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"configuration-details-to-save-4\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save-4\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Configuration details to save\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Open the Redis cluster's details and copy the Redis cluster's endpoint (you can omit the port number).\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/4646a089f3c224805a89809e571aad8e.png\",alt:\"Screenshot of Redis Cluster details\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Redis Cluster details\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"aws-step-3-create-an-amazon-s3-bucket-for-user-media\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#aws-step-3-create-an-amazon-s3-bucket-for-user-media\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"AWS Step 3: Create an Amazon S3 bucket for user media\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In your AWS account, navigate to S3.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click on \",(0,n.jsx)(e.strong,{children:\"create bucket\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Enter a unique bucket name, for example, mastodon-media-example.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Uncheck \",(0,n.jsx)(e.strong,{children:\"Block all public access\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:'Check \"I acknowledge that the current settings might result in this bucket and the objects within becoming public\".'}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"create bucket\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:\"AWS will take a moment to create your new S3 bucket.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"aws-step-4-create-an-iam-user-to-write-to-s3\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#aws-step-4-create-an-iam-user-to-write-to-s3\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"AWS Step 4: Create an IAM user to write to S3\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In your AWS account, navigate to \",(0,n.jsx)(e.strong,{children:\"Identity and Access Management (IAM)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click on \",(0,n.jsx)(e.strong,{children:\"Users\"}),\", then on \",(0,n.jsx)(e.strong,{children:\"Add users\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Enter a username, for example, mastodon-s3-writer.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Under \",(0,n.jsx)(e.strong,{children:\"Select AWS credential type\"}),\", select only \",(0,n.jsx)(e.strong,{children:\"Access key - Programmatic access\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next: Permissions\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the \",(0,n.jsx)(e.strong,{children:\"Set permissions\"}),\" page:\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Select \",(0,n.jsx)(e.strong,{children:\"Attach existing policies directly\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Filter for s3 policies.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Check \",(0,n.jsx)(e.strong,{children:\"AmazonS3FullAccess\"}),\".\"]}),`\n`,(0,n.jsxs)(e.li,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next: Tags\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next: Review\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Finally, click \",(0,n.jsx)(e.strong,{children:\"Create user\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"configuration-details-to-save-5\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save-5\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Configuration details to save\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Note down the access key ID and secret access key. Keep in mind that you won't be able to see this secret again, so you'll need to save it now and keep it secure.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"aws-step-5-create-an-amazon-ses-identity\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#aws-step-5-create-an-amazon-ses-identity\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"AWS Step 5: Create an Amazon SES identity\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In AWS, navigate to \",(0,n.jsx)(e.strong,{children:\"Amazon Simple Email Service (SES)\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Create identity\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Select \",(0,n.jsx)(e.strong,{children:\"Email address\"}),\" as the identity type.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Enter an email address where you can receive emails.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Create identity\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:`You'll need to log in to the inbox for the email address you entered and verify the SES sending identity by clicking a link. Look for an email with the subject \"Amazon Web Services \\u2013 Email Address Verification Request\".`}),`\n`,(0,n.jsxs)(e.p,{children:[\"Back in AWS, you should now see that the identity status has changed to \",(0,n.jsx)(e.strong,{children:\"verified\"}),\". If not, reload the page.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Send a test email to see whether the sending identity works.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click on \",(0,n.jsx)(e.strong,{children:\"SMTP settings\"}),\" in the left sidebar, then on \",(0,n.jsx)(e.strong,{children:\"Create SMTP credentials\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Create\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"configuration-details-to-save-6\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#configuration-details-to-save-6\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Configuration details to save\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Toggle \",(0,n.jsx)(e.strong,{children:\"Show User SMTP Security Credentials\"}),\", then copy and save the SMTP username and password. You won't have access to the password again after this step, so keep it secure.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"After saving the credentials, click \",(0,n.jsx)(e.strong,{children:\"Close\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"create-an-application-in-release\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#create-an-application-in-release\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Create an application in Release\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Log in to your Release account, then click on \",(0,n.jsx)(e.strong,{children:\"create new app\"}),\".\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Enter a name for your Mastodon app, for example, mastodon.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Pick your forked repository.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next step\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/bb50a403d5b1db5f44469f63fa0a44eb.png\",alt:\"Pick your repository in Release\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Pick your repository in Release\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"pick-your-services-in-release\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#pick-your-services-in-release\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Pick your services in Release\"]}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Select \",(0,n.jsx)(e.strong,{children:\"Analyze the repository\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"Select the branch you would like to run.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Select the root docker-compose.yml file.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Start Analysis\"}),\".\"]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/9ec0311f450da8a01b90ac5b2a50edc0.png\",alt:\"Analyze your repository in Release\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Analyze your repository in Release\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Release will now find services in your docker-compose.yml file.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Pick only the following services:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"sidekiq\"}),`\n`,(0,n.jsx)(e.li,{children:\"streaming\"}),`\n`,(0,n.jsx)(e.li,{children:\"web\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/dafb0cefab0bed1f4964fb7e66c5f088.png\",alt:\"Pick services in Release\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"Pick services in Release\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next Step\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"edit-the-generated-template\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#edit-the-generated-template\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Edit the generated template\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Release generates a template from the services we selected in the previous step.\"}),`\n`,(0,n.jsx)(e.p,{children:\"This template is a YAML file that Release uses to generate new environments. It specifies the services, ingress rules, and workflows required to set up your app.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"double-check-the-template-context-and-domain\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#double-check-the-template-context-and-domain\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Double-check the template context and domain\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Make sure the context in your application template matches your Release cluster's context and that the domain matches the verified domain you'd like to use for this application.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"replace-hostnames-with-rules\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#replace-hostnames-with-rules\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Replace hostnames with rules\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Release automatically generates hostname templates for services that have node ports and adds them to a hostnames section in your Application Template.\"}),`\n`,(0,n.jsx)(e.p,{children:\"On a Mastodon server, the public services web and streaming share a hostname but are served at different paths.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Release configures a Kubernetes ingress controller to route traffic to your applications, based on the hostnames or rules settings, but only one of these settings can be used per environment. We'll use only rules.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Update the template to \",(0,n.jsx)(e.strong,{children:\"replace\"}),\" hostnames with the following rules:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\nrules:\n- service: web\n  hostnames:\n  - mastodon-\\${env_id}.\\${domain}\n  path: \"/\"\n- service: streaming\n  hostnames:\n  - mastodon-\\${env_id}.\\${domain}\n  path: \"/api/v1/streaming\"\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The changes should look like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`- hostnames:\n-   streaming: streaming-mastodon-\\${env_id}.\\${domain}\n-   web: web-mastodon-\\${env_id}.\\${domain}\n+ rules:\n+ - service: web\n+   hostnames:\n+   - mastodon-\\${env_id}.\\${domain}\n+   path: \"/\"\n+ - service: streaming\n+   hostnames:\n+   - mastodon-\\${env_id}.\\${domain}\n+   path: \"/api/v1/streaming\"\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"This instructs Release to create two Nginx location blocks on the Kubernetes ingress controller for your application, to direct requests to either web or streaming, depending on the path in the request.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"update-the-readiness_probe-for-sidekiq\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#update-the-readiness_probe-for-sidekiq\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Update the readiness_probe for Sidekiq\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In the sidekiq service, replace the readiness_probe with the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\n  readiness_probe:\n    exec:\n      command:\n      - bash\n      - \"-c\"\n      - ps aux | grep '[s]idekiq\\\\ 6' || false\n    period_seconds: 30\n    timeout_seconds: 30\n    failure_threshold: 3\n    initial_delay_seconds: 10\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"update-the-readiness_probe-for-the-webserver\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#update-the-readiness_probe-for-the-webserver\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Update the readiness_probe for the webserver\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In the web service, replace the readiness_probe with the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\n  readiness_probe:\n    http_get:\n      path: \"/health\"\n      port: 3000\n    initial_delay_seconds: 20\n    period_seconds: 30\n    timeout_seconds: 30\n    failure_threshold: 3\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"update-the-readiness_probe-for-the-streaming-server\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#update-the-readiness_probe-for-the-streaming-server\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Update the readiness_probe for the streaming server\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In the streaming server, replace the readiness_probe with the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\n  readiness_probe:\n    http_get:\n      path: \"/api/v1/streaming/health\"\n      port: 4000\n    initial_delay_seconds: 20\n    period_seconds: 30\n    timeout_seconds: 30\n    failure_threshold: 3\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"add-database-migrations-as-jobs\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#add-database-migrations-as-jobs\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Add database migrations as jobs\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Release can run jobs in your environments to handle once-off or repeat tasks. These can be triggered by steps in an environment's workflows.\"}),`\n`,(0,n.jsx)(e.p,{children:\"For example, when Release first creates an environment for Mastodon, a db:setup job needs to be run to create Mastodon's database schema. Release calls this stage in the workflow setup.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Mastodon also needs to run database migrations during version upgrades, so that the database schema is updated along with the code. We can use Release's patch stage for this job.\"}),`\n`,(0,n.jsx)(e.p,{children:\"During version upgrades, Mastodon splits pre-deployment and post-deployment database migrations. We'll add two migration jobs, dbmigratepre and dbmigrate.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Add the following jobs to your template:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\njobs:\n- name: dbmigratepre\n  command:\n  - \"/usr/bin/tini\"\n  - \"--\"\n  args:\n  - bash\n  - \"-c\"\n  - rails db:version && export SKIP_POST_DEPLOYMENT_MIGRATIONS=true && rails db:migrate || rails db:setup\n  from_services: web\n- name: dbmigrate\n  command:\n  - \"/usr/bin/tini\"\n  - \"--\"\n  args:\n  - bash\n  - \"-c\"\n  - rails db:version && rails db:migrate || rails db:setup\n  from_services: web\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"add-an-admin-user-as-a-job\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#add-an-admin-user-as-a-job\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Add an admin user as a job\"]}),`\n`,(0,n.jsx)(e.p,{children:\"After our services are live and the database is ready, we'll use the Mastodon CLI to create an admin user.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Add the following job to the jobs you created earlier:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`- name: mastodonuser\n  command:\n  - \"/usr/bin/tini\"\n  - \"--\"\n  args:\n  - bash\n  - \"-c\"\n  - tootctl accounts create $MASTODON_OWNER_USERNAME --email $MASTODON_OWNER_EMAIL --role Owner\n  from_services: web\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"add-jobs-to-workflows\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#add-jobs-to-workflows\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Add jobs to workflows\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's update the workflows section to run these jobs during setup and patch stages.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Because the order in which our new jobs are run is important, we'll update the parallelize sections in these stages to create new steps.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Replace the workflows section of the template with the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-docker\",children:`\nworkflows:\n- name: setup\n  parallelize:\n  - step: dbmigratepre\n    tasks:\n    - jobs.dbmigratepre\n  - step: services\n    tasks:\n    - services.sidekiq\n    - services.streaming\n    - services.web\n  - step: dbmigrate\n    tasks:\n    - jobs.dbmigrate\n  - step: mastodonuser\n    tasks:\n    - jobs.mastodonuser\n- name: patch\n  parallelize:\n  - step: dbmigratepre\n    tasks:\n    - jobs.dbmigratepre\n  - step: services\n    tasks:\n    - services.sidekiq\n    - services.streaming\n    - services.web\n  - step: dbmigrate\n    tasks:\n    - jobs.dbmigrate\n- name: teardown\n  parallelize:\n  - step: remove_environment\n    tasks:\n    - release.remove_environment\n\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"save-your-changes-to-the-template\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#save-your-changes-to-the-template\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Save your changes to the template\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next Step\"}),\" to save your template, and move on to your environment variables.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"edit-the-default-environment-variables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#edit-the-default-environment-variables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Edit the default environment variables\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For this step, you'll need to retrieve the following information that we saved previously:\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"generated-on-your-local-machine-using-docker\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#generated-on-your-local-machine-using-docker\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Generated on your local machine using Docker\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"SECRET_KEY_BASE\"}),`\n`,(0,n.jsx)(e.li,{children:\"OTP_SECRET\"}),`\n`,(0,n.jsx)(e.li,{children:\"VAPID_PRIVATE_KEY\"}),`\n`,(0,n.jsx)(e.li,{children:\"VAPID_PUBLIC_KEY\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"postgresql-endpoint-and-password-from-amazon-rds\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#postgresql-endpoint-and-password-from-amazon-rds\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"PostgreSQL endpoint and password from Amazon RDS\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"DB_HOST\"}),`\n`,(0,n.jsx)(e.li,{children:\"DB_PASS\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"redis-cluster-endpoint-from-amazon-elasticache\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#redis-cluster-endpoint-from-amazon-elasticache\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Redis cluster endpoint from Amazon ElastiCache\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"REDIS_HOST\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h4,{id:\"smtp-credentials-from-amazon-simple-email-service\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#smtp-credentials-from-amazon-simple-email-service\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"SMTP credentials from Amazon Simple Email Service\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"SMTP_LOGIN\"}),`\n`,(0,n.jsx)(e.li,{children:\"SMTP_PASSWORD\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"SMTP_SERVER: Get the SES endpoint for your region from \",(0,n.jsx)(e.a,{href:\"https://docs.aws.amazon.com/general/latest/gr/ses.html\",children:\"AWS docs\"})]}),`\n`,(0,n.jsx)(e.li,{children:\"SMTP_FROM_ADDRESS: This is the verified email address Mastodon will send emails from\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"s3-bucket-details-and-iam-access-keys\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#s3-bucket-details-and-iam-access-keys\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"S3 bucket details and IAM access keys\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"S3_BUCKET\"}),`\n`,(0,n.jsx)(e.li,{children:\"AWS_ACCESS_KEY_ID\"}),`\n`,(0,n.jsx)(e.li,{children:\"AWS_SECRET_ACCESS_KEY\"}),`\n`,(0,n.jsx)(e.li,{children:\"S3_REGION\"}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"mastodon-user-details\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#mastodon-user-details\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Mastodon user details\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"MASTODON_OWNER_USERNAME: Some names, such as admin, owner, and user, are reserved. Use something unique.\"}),`\n`,(0,n.jsx)(e.li,{children:\"MASTODON_OWNER_EMAIL: Use an email address you can receive your sign-up email at. Keep in mind that Amazon SES can only send messages to verified email addresses while in sandbox mode.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"In Release, paste the following environment variables file in the default environment variables YAML editor, then update any values that are empty with the values we saved previously.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`---\ndefaults:\n  - key: SINGLE_USER_MODE\n    value: true\n  - key: SECRET_KEY_BASE\n    value:\n    secret: true\n  - key: OTP_SECRET\n    value:\n    secret: true\n  - key: VAPID_PRIVATE_KEY\n    value:\n    secret: true\n  - key: VAPID_PUBLIC_KEY\n    value:\n  - key: DB_HOST\n    value:\n  - key: DB_PORT\n    value: 5432\n  - key: DB_USER\n    value: postgres\n  - key: DB_PASS\n    value:\n    secret: true\n  - key: REDIS_HOST\n    value:\n  - key: REDIS_PORT\n    value: 6379\n  - key: SMTP_SERVER\n    value:\n  - key: SMTP_PORT\n    value: 587\n  - key: SMTP_LOGIN\n    value:\n  - key: SMTP_PASSWORD\n    value:\n    secret: true\n  - key: SMTP_AUTH_METHOD\n    value: plain\n  - key: SMTP_OPENSSL_VERIFY_MODE\n    value: none\n  - key: SMTP_FROM_ADDRESS\n    value:\n  - key: S3_ENABLED\n    value: true\n  - key: S3_BUCKET\n    value: mastodon-media-example\n  - key: AWS_ACCESS_KEY_ID\n    value:\n  - key: AWS_SECRET_ACCESS_KEY\n    value:\n    secret: true\n  - key: S3_REGION\n    value:\n  - key: S3_PROTOCOL\n    value: https\n  # MASTODON_OWNER_USERNAME can't be admin, owner, user\n  - key: MASTODON_OWNER_USERNAME\n    value:\n  - key: MASTODON_OWNER_EMAIL\n    value:\nservices:\n  sidekiq: []\n  streaming: []\n  web: []\nmapping:\n  LOCAL_DOMAIN: WEB_INGRESS_HOST\n  S3_HOSTNAME: s3-\\${S3_REGION}.amazonaws.com\n  DB_NAME: mastodon_prod_\\${RELEASE_RANDOMNESS}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Click \",(0,n.jsx)(e.strong,{children:\"Next Step\"}),\" to save your default environment variables.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"deploy-the-app\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#deploy-the-app\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Deploy the app\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can skip over the \",(0,n.jsx)(e.strong,{children:\"build arguments\"}),\" step because we're not adding any build arguments to this application.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/3e2d9f50bb3b9f18a6acbfc354b31c4d.png\",alt:\"Screenshot of app deploy button\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Deploy your app\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Finally, click \",(0,n.jsx)(e.strong,{children:\"Deploy your app!\"})]}),`\n`,(0,n.jsxs)(e.h3,{id:\"follow-the-deployment\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#follow-the-deployment\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Follow the deployment\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Release will now build Docker images for our services and deploy an environment.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/5dd18dad5f93baba80a1c4392e739b92.png\",alt:\"Screenshot of deployment\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Deployment progress\"}),`\n`,(0,n.jsx)(e.p,{children:\"The deployment information page shows all of the steps involved, from building the Docker images, through database migrations, and finally adding your admin user.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Click the mastodonuser job step to reveal the output, and copy the password Mastodon generated for your user.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/885332524cf51d1af59184b2bce6dc6b.png\",alt:\"Screenshot of step showing user password\"})}),`\n`,(0,n.jsx)(e.p,{children:\"View user password\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you miss this password, you can use the Mastodon web interface to request a password reset.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"log-in-and-start-posting\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#log-in-and-start-posting\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Log in and start posting\"]}),`\n`,(0,n.jsx)(e.p,{children:\"With your Mastodon instance up and running, log in and start posting.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/cf41249f4d65a690662ad9910727daca.png\",alt:\"Screenshot of environment info page, showing the web URL\"})}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"environment info page, showing the web URL\"})}),`\n`,(0,n.jsx)(e.p,{children:\"You can find the public URL for your instance by navigating to the Environment Info page in Release. Click the web URL in the right sidebar to visit your instance.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/35a7506285674efeaf8be72abcacab96.png\",alt:\"Screenshot of Mastodon\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Mastodon in action\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-to-do-next-create-more-environments\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-to-do-next-create-more-environments\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What to do next: create more environments\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Release really shines when you create environments for different branches in your codebase.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Test this by creating a feature branch with a small change, and follow Release's guide on \",(0,n.jsx)(e.a,{href:\"https://docs.releasehub.com/getting-started/create-an-environment\",children:\"creating a new environment\"}),\" for your new branch.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"further-reading\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#further-reading\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Further reading\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Even if Mastodon doesn't replace Twitter, it will likely only grow in popularity. If you plan to host a public instance for your organization, you may want to make sure you focus on two important aspects: moderation and scaling.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Running any community on the internet is notoriously hard to get right. Keeping users, the public, and your servers happy might seem impossible, but many have gone before us and shared their experiences.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's a quick overview of recent writing on these topics:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://docs.joinmastodon.org/admin/scaling/\",children:\"Scaling up your server\"}),\": The official Mastodon documentation on scaling your server, which might not be as suited to a Kubernetes-hosted instance.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://docs.joinmastodon.org/admin/moderation/\",children:\"Moderation actions\"}),\": The official Mastodon documentation on available moderation tools. These are invaluable if you plan to allow public content on your instance.\"]}),`\n`,(0,n.jsxs)(e.li,{children:[(0,n.jsx)(e.a,{href:\"https://joinmastodon.org/covenant\",children:\"Mastodon Server Covenant\"}),\": A covenant which can also inform your moderation and hosting decisions.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.h3,{id:\"learn-more-about-release\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#learn-more-about-release\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Learn more about Release\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Of course, you aren't limited to hosting Mastodon. If you want to learn more about how Release can help you host your own software or other third party packages, \",(0,n.jsx)(e.a,{href:\"https://release.com/book-a-demo\",children:\"book a demo.\"})]})]})}function w(a={}){let{wrapper:e}=a.components||{};return e?(0,n.jsx)(e,Object.assign({},a,{children:(0,n.jsx)(d,a)})):d(a)}var S=w;return k(_);})();\n;return Component;"
  },
  "_id": "blog/posts/hosting-mastodon-on-release-and-aws.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/hosting-mastodon-on-release-and-aws.mdx",
    "sourceFileName": "hosting-mastodon-on-release-and-aws.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/hosting-mastodon-on-release-and-aws"
  },
  "type": "BlogPost",
  "computedSlug": "hosting-mastodon-on-release-and-aws"
}