{
  "title": "Development vs Staging vs Production: What's the Difference?",
  "summary": "A closer look at the development, staging, and production environments of the software development cycle.",
  "publishDate": "Tue Jun 27 2023 14:34:52 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 8,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/599175103f1e1df59989125faa773f6f.jpg",
  "imageAlt": "Development vs Staging vs Production: What's the Difference?",
  "showCTA": true,
  "ctaCopy": "Experience seamless collaboration and faster testing with Release's ephemeral environments, mirroring production for efficient development cycles.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=development-vs-staging-vs-production-whats-the-difference",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/599175103f1e1df59989125faa773f6f.jpg",
  "excerpt": "A closer look at the development, staging, and production environments of the software development cycle.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nThe lines between development, staging, and production environments are often blurred. The distinctions may vary depending on many factors, including:\n\n- the scale of the organization,\n- the codebase, or\n- whether you're viewing the environment from a product, unit testing, or security standpoint.\n\nIn this post, I use interviews with fellow developers to understand each environment's purpose and how it's distinct from the others. It's particularly challenging to differentiate between the development and staging environments, and some organizations forgo the staging environment altogether. Let’s find out why, and when it makes sense.\n\n### **What Is a Development Environment?**\n\nGenerally, the development environment is the first environment developers use to check if all code changes work well with each other. It's known as a “sandbox” for developers to work in. Examples of commonly used integrated development environments (IDEs) are [Visual Studio Code](https://code.visualstudio.com/), [Eclipse,](https://www.eclipse.org/ide/) [JetBrains tools](https://www.jetbrains.com/), and many others. Note that historically development environments were based on a developer's laptop—a local machine, but with the emergence of cloud, on-demand computing and [ephemeral environments](http://releasehub.com/ephemeral-environments), those environments are now being deployed in the cloud.\n\nIDE is where developers’ workflow with code takes place, reloading and debugging aids are enabled here. Also, this environment is where developers can make necessary code changes. In the IDE, approved code can merge with code from other developers working on the same project.\n\nDevelopers commonly use this space to experiment and receive feedback on what improvements they can make to their work. Consequently, this environment is the most unstable. It's also the most susceptible to bugs and potentially broken code. But, on the upside, in allowing mistakes to happen, this is the most conducive environment to learn collaboratively and create a standardized process.  \n\nBesides the most commonly known local machine, there are virtual and cloud-based development environments. Your team might use the virtual and cloud-based environments mainly depending on whether multiple platforms and machines are needed to effectively test and run the code they are writing.\n\nDevelopment environments historically only include a small subset of the entire application and often would lack elements like security, 3rd party APIs and cloud native services. Those would typically be introduced later in the development process and tested in staging. The result, however, turns into frequent rollbacks and bottlenecks in staging. To enable better code quality in development and more frequent release cycles, companies like [Release](https://release.com/) came up with [ephemeral environments](http://release.com/ephemeral-environments), a production-like replica that allows developers to properly test their code (i.e shift-left) and isolate bugs to a single branch, while ensuring a smooth merge to staging and production.\n\n### What Is a Staging Environment?\n\n[Staging environment](https://release.com/staging-environments) is the environment where your code is 'staged' prior to being run in front of users so you can ensure it works as designed. The staging environment should mirror production as much as possible. It reflects a production environment not yet exposed to clients, customers, and the general public.\n\n![](/blog-images/7889fa49b5c1fd3e80dd96dda8886942.png)\n\nThis environment is primarily used for system integration testing (SIT) and in-depth manual testing conducted before the client receives code changes. Developers also [perform](https://www.unitrends.com/blog/development-test-environments) quality assurance (QA), security testing, chaos testing, alpha testing, beta testing, and end-to-end (E2E) testing in this environment.\n\nAdditionally, [User acceptance testing (UAT)](https://release.com/user-acceptance-testing-with-ephemeral-environments) often happens here. In UAT, users can test changes they requested before the new code goes to a production environment.\n\nHow you carry out testing in the staging environment can depend on what programming language you're using. For example, Ruby on Rails doesn't have a mode for staging. Rails developers switch modes to a test environment that they use to run testing tools and debug failures. Technically, the [Rails Guide](https://guides.rubyonrails.org/configuring.html) delves into how to customize configurations and initialization on applications.\n\n### **Development vs. Staging Environments**\n\nSo, now that you know what development and staging environments are, you're probably wondering if you need both. Ultimately, the answer depends on the size of your organization, appetite for risk and speed of change, and your position on making a tradeoff between slowing down the process for quality and testing versus launching new features quickly.\n\nSometimes smaller companies start out with fewer environments. One developer shared, “You just end up with multiple environments as the organization scales up.”  \n\nIn some cases organizations with fewer users don't have staging environments. As another developer elaborated: _“Instead, we can deploy in a way that 1% of the traffic will go to each one branch and main branch. Then, we can check the monitoring to see if there are differences between the two. When we are certain that at the most we will affect 1% of traffic and everything is fine, we will then proceed with merging the two branches. I think it would be ideal if the continuous integration (CI) and continuous deployment (CD) process were to set up that 1%, then we could verify the results. This is the same as I have seen for verifying front-end changes in continuous integration.”_\n\n### **Is a Staging Environment Necessary?**\n\nDeploying to staging is safe, because it will not affect users, but is not necessarily effective because you might not test all the features or combinations that end users will be using. The general solution to this problem is to deploy to production as quickly as you can but only enable or test subsets of new features with flags or canary testing. This way you are only risking challenges for a small subset of users, and are able to see the application perform with live traffic in the production environment.\n\nDevelopers say they like to see how real traffic works through the codebase and compare this technique to feature flagging. This may eliminate the need for a beta environment. This results in the concept of \"staging\" not being a distinct environment.\n\nHowever, developers agree that it's useful to have a separate beta domain to make significant changes. According to [Atlassian CI/CD](https://www.atlassian.com/continuous-delivery/principles/feature-flags), feature flagging allows developers to turn functionality on and off during runtime. That way, you don't need to deploy code at every update.\n\n### **What Is a Production Environment?**\n\nThe production environment is the live site complete with performance optimizations. The codebase must be secure, performant, stable, and able to sustain heavy traffic as the client, customers, and public use it.  \n\nThere is a common misconception that production is more important than development or staging. Actually, the reverse could be true: development environments could be so critical to the business that they cannot tolerate any downtime at all but production can tolerate some downtime.\n\nAs an example at Truecar and in most other companies I worked at, the website could be broken for some amount of time as long as it came back up relatively quickly. However, if development was down for more than an hour, you could be looking at losing an entire day of developer features for the whole company!\n\nRegardless of your setup, you should treat production with care, and restrict who updates the production code. Ideally, you won't be building new versions of the codebase for the production environment; it's better to deploy the same builds to the staging environment.\n\n![](/blog-images/436b6ae884f81c86dc705a7163ab8dfa.png)\n\nAt this point of the software development lifecycle, the code shouldn't have any bugs or require fixes. To avoid a poor user experience, you should consider it the final product.\n\nHowever, you can make urgent fixes in the production environment if needed. In doing so, you can consistently improve upon quality control for product releases, making it easier to keep tabs on new product updates.\n\n### **Conclusion**\n\nAlthough the development, staging, and production environments converge, they have their own significance in the larger software development lifecycle. The significance of each environment depends on the organization running the system.\n\nThe way a company treats and leverages these environments today differs wildly depending on the organization and its DevOps practices and policies. Sometimes teams within the same organization use these environments in different ways and have different philosophies of what they mean, and how critical they are to the company’s mission.\n\nFrom my conversations with individuals who play different roles in the tech industry, I can say the overall development culture is shifting progressively toward promoting new code to all these environments as soon as possible. One developer expressed, \"The idea is that even the smallest code change gets released to production in a matter of minutes, not months.\"\n\nWith that in mind, the common goal is that the folks responsible for the software development life cycle want more efficient environments for producing the highest quality codebases. These people continuously strive to find new methods to make that process easier.\n\nFor a better understanding of what environments are and to be inspired about optimizing them, read more about [staging environments](https://release.com/staging-environments), [ephemeral environments](https://release.com/ephemeral-environments), and [UAT](https://release.com/user-acceptance-testing-with-ephemeral-environments) with Release ephemeral environments.\n\n‍\n",
    "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),v=(t,e)=>{for(var o in e)a(t,o,{get:e[o],enumerable:!0})},r=(t,e,o,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of p(e))!g.call(t,i)&&i!==o&&a(t,i,{get:()=>e[i],enumerable:!(s=m(e,i))||s.enumerable});return t};var w=(t,e,o)=>(o=t!=null?d(u(t)):{},r(e||!t||!t.__esModule?a(o,\"default\",{value:t,enumerable:!0}):o,t)),y=t=>r(a({},\"__esModule\",{value:!0}),t);var c=f((D,l)=>{l.exports=_jsx_runtime});var I={};v(I,{default:()=>T,frontmatter:()=>b});var n=w(c()),b={title:\"Development vs Staging vs Production: What's the Difference?\",summary:\"A closer look at the development, staging, and production environments of the software development cycle.\",publishDate:\"Tue Jun 27 2023 14:34:52 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:8,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/599175103f1e1df59989125faa773f6f.jpg\",imageAlt:\"Development vs Staging vs Production: What's the Difference?\",showCTA:!0,ctaCopy:\"Experience seamless collaboration and faster testing with Release's ephemeral environments, mirroring production for efficient development cycles.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=development-vs-staging-vs-production-whats-the-difference\",relatedPosts:[\"\"],ogImage:\"/blog-images/599175103f1e1df59989125faa773f6f.jpg\",excerpt:\"A closer look at the development, staging, and production environments of the software development cycle.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function h(t){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",h3:\"h3\",a:\"a\",span:\"span\",strong:\"strong\",img:\"img\",em:\"em\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"The lines between development, staging, and production environments are often blurred. The distinctions may vary depending on many factors, including:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"the scale of the organization,\"}),`\n`,(0,n.jsx)(e.li,{children:\"the codebase, or\"}),`\n`,(0,n.jsx)(e.li,{children:\"whether you're viewing the environment from a product, unit testing, or security standpoint.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:\"In this post, I use interviews with fellow developers to understand each environment's purpose and how it's distinct from the others. It's particularly challenging to differentiate between the development and staging environments, and some organizations forgo the staging environment altogether. Let\\u2019s find out why, and when it makes sense.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-a-development-environment\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-a-development-environment\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"What Is a Development Environment?\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Generally, the development environment is the first environment developers use to check if all code changes work well with each other. It's known as a \\u201Csandbox\\u201D for developers to work in. Examples of commonly used integrated development environments (IDEs) are \",(0,n.jsx)(e.a,{href:\"https://code.visualstudio.com/\",children:\"Visual Studio Code\"}),\", \",(0,n.jsx)(e.a,{href:\"https://www.eclipse.org/ide/\",children:\"Eclipse,\"}),\" \",(0,n.jsx)(e.a,{href:\"https://www.jetbrains.com/\",children:\"JetBrains tools\"}),\", and many others. Note that historically development environments were based on a developer's laptop\\u2014a local machine, but with the emergence of cloud, on-demand computing and \",(0,n.jsx)(e.a,{href:\"http://releasehub.com/ephemeral-environments\",children:\"ephemeral environments\"}),\", those environments are now being deployed in the cloud.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"IDE is where developers\\u2019 workflow with code takes place, reloading and debugging aids are enabled here. Also, this environment is where developers can make necessary code changes. In the IDE, approved code can merge with code from other developers working on the same project.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Developers commonly use this space to experiment and receive feedback on what improvements they can make to their work. Consequently, this environment is the most unstable. It's also the most susceptible to bugs and potentially broken code. But, on the upside, in allowing mistakes to happen, this is the most conducive environment to learn collaboratively and create a standardized process. \\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Besides the most commonly known local machine, there are virtual and cloud-based development environments. Your team might use the virtual and cloud-based environments mainly depending on whether multiple platforms and machines are needed to effectively test and run the code they are writing.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Development environments historically only include a small subset of the entire application and often would lack elements like security, 3rd party APIs and cloud native services. Those would typically be introduced later in the development process and tested in staging. The result, however, turns into frequent rollbacks and bottlenecks in staging. To enable better code quality in development and more frequent release cycles, companies like \",(0,n.jsx)(e.a,{href:\"https://release.com/\",children:\"Release\"}),\" came up with \",(0,n.jsx)(e.a,{href:\"http://release.com/ephemeral-environments\",children:\"ephemeral environments\"}),\", a production-like replica that allows developers to properly test their code (i.e shift-left) and isolate bugs to a single branch, while ensuring a smooth merge to staging and production.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-a-staging-environment\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-a-staging-environment\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What Is a Staging Environment?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://release.com/staging-environments\",children:\"Staging environment\"}),\" is the environment where your code is 'staged' prior to being run in front of users so you can ensure it works as designed. The staging environment should mirror production as much as possible. It reflects a production environment not yet exposed to clients, customers, and the general public.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/7889fa49b5c1fd3e80dd96dda8886942.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This environment is primarily used for system integration testing (SIT) and in-depth manual testing conducted before the client receives code changes. Developers also \",(0,n.jsx)(e.a,{href:\"https://www.unitrends.com/blog/development-test-environments\",children:\"perform\"}),\" quality assurance (QA), security testing, chaos testing, alpha testing, beta testing, and end-to-end (E2E) testing in this environment.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Additionally, \",(0,n.jsx)(e.a,{href:\"https://release.com/user-acceptance-testing-with-ephemeral-environments\",children:\"User acceptance testing (UAT)\"}),\" often happens here. In UAT, users can test changes they requested before the new code goes to a production environment.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"How you carry out testing in the staging environment can depend on what programming language you're using. For example, Ruby on Rails doesn't have a mode for staging. Rails developers switch modes to a test environment that they use to run testing tools and debug failures. Technically, the \",(0,n.jsx)(e.a,{href:\"https://guides.rubyonrails.org/configuring.html\",children:\"Rails Guide\"}),\" delves into how to customize configurations and initialization on applications.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"development-vs-staging-environments\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#development-vs-staging-environments\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Development vs. Staging Environments\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"So, now that you know what development and staging environments are, you're probably wondering if you need both. Ultimately, the answer depends on the size of your organization, appetite for risk and speed of change, and your position on making a tradeoff between slowing down the process for quality and testing versus launching new features quickly.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Sometimes smaller companies start out with fewer environments. One developer shared, \\u201CYou just end up with multiple environments as the organization scales up.\\u201D \\xA0\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In some cases organizations with fewer users don't have staging environments. As another developer elaborated: \",(0,n.jsx)(e.em,{children:\"\\u201CInstead, we can deploy in a way that 1% of the traffic will go to each one branch and main branch. Then, we can check the monitoring to see if there are differences between the two. When we are certain that at the most we will affect 1% of traffic and everything is fine, we will then proceed with merging the two branches. I think it would be ideal if the continuous integration (CI) and continuous deployment (CD) process were to set up that 1%, then we could verify the results. This is the same as I have seen for verifying front-end changes in continuous integration.\\u201D\"})]}),`\n`,(0,n.jsxs)(e.h3,{id:\"is-a-staging-environment-necessary\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#is-a-staging-environment-necessary\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Is a Staging Environment Necessary?\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Deploying to staging is safe, because it will not affect users, but is not necessarily effective because you might not test all the features or combinations that end users will be using. The general solution to this problem is to deploy to production as quickly as you can but only enable or test subsets of new features with flags or canary testing. This way you are only risking challenges for a small subset of users, and are able to see the application perform with live traffic in the production environment.\"}),`\n`,(0,n.jsx)(e.p,{children:'Developers say they like to see how real traffic works through the codebase and compare this technique to feature flagging. This may eliminate the need for a beta environment. This results in the concept of \"staging\" not being a distinct environment.'}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, developers agree that it's useful to have a separate beta domain to make significant changes. According to \",(0,n.jsx)(e.a,{href:\"https://www.atlassian.com/continuous-delivery/principles/feature-flags\",children:\"Atlassian CI/CD\"}),\", feature flagging allows developers to turn functionality on and off during runtime. That way, you don't need to deploy code at every update.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-a-production-environment\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-a-production-environment\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"What Is a Production Environment?\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"The production environment is the live site complete with performance optimizations. The codebase must be secure, performant, stable, and able to sustain heavy traffic as the client, customers, and public use it. \\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"There is a common misconception that production is more important than development or staging. Actually, the reverse could be true: development environments could be so critical to the business that they cannot tolerate any downtime at all but production can tolerate some downtime.\"}),`\n`,(0,n.jsx)(e.p,{children:\"As an example at Truecar and in most other companies I worked at, the website could be broken for some amount of time as long as it came back up relatively quickly. However, if development was down for more than an hour, you could be looking at losing an entire day of developer features for the whole company!\"}),`\n`,(0,n.jsx)(e.p,{children:\"Regardless of your setup, you should treat production with care, and restrict who updates the production code. Ideally, you won't be building new versions of the codebase for the production environment; it's better to deploy the same builds to the staging environment.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/436b6ae884f81c86dc705a7163ab8dfa.png\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"At this point of the software development lifecycle, the code shouldn't have any bugs or require fixes. To avoid a poor user experience, you should consider it the final product.\"}),`\n`,(0,n.jsx)(e.p,{children:\"However, you can make urgent fixes in the production environment if needed. In doing so, you can consistently improve upon quality control for product releases, making it easier to keep tabs on new product updates.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"conclusion\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#conclusion\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),(0,n.jsx)(e.strong,{children:\"Conclusion\"})]}),`\n`,(0,n.jsx)(e.p,{children:\"Although the development, staging, and production environments converge, they have their own significance in the larger software development lifecycle. The significance of each environment depends on the organization running the system.\"}),`\n`,(0,n.jsx)(e.p,{children:\"The way a company treats and leverages these environments today differs wildly depending on the organization and its DevOps practices and policies. Sometimes teams within the same organization use these environments in different ways and have different philosophies of what they mean, and how critical they are to the company\\u2019s mission.\"}),`\n`,(0,n.jsx)(e.p,{children:'From my conversations with individuals who play different roles in the tech industry, I can say the overall development culture is shifting progressively toward promoting new code to all these environments as soon as possible. One developer expressed, \"The idea is that even the smallest code change gets released to production in a matter of minutes, not months.\"'}),`\n`,(0,n.jsx)(e.p,{children:\"With that in mind, the common goal is that the folks responsible for the software development life cycle want more efficient environments for producing the highest quality codebases. These people continuously strive to find new methods to make that process easier.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"For a better understanding of what environments are and to be inspired about optimizing them, read more about \",(0,n.jsx)(e.a,{href:\"https://release.com/staging-environments\",children:\"staging environments\"}),\", \",(0,n.jsx)(e.a,{href:\"https://release.com/ephemeral-environments\",children:\"ephemeral environments\"}),\", and \",(0,n.jsx)(e.a,{href:\"https://release.com/user-acceptance-testing-with-ephemeral-environments\",children:\"UAT\"}),\" with Release ephemeral environments.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u200D\"})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var T=k;return y(I);})();\n;return Component;"
  },
  "_id": "blog/posts/development-vs-staging-vs-production-whats-the-difference.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/development-vs-staging-vs-production-whats-the-difference.mdx",
    "sourceFileName": "development-vs-staging-vs-production-whats-the-difference.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/development-vs-staging-vs-production-whats-the-difference"
  },
  "type": "BlogPost",
  "computedSlug": "development-vs-staging-vs-production-whats-the-difference"
}