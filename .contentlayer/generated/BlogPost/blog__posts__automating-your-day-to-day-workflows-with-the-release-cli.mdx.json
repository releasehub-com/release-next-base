{
  "title": "Automating your day-to-day workflows with the Release CLI",
  "summary": "Walk you through a hypothetical bug scenario and how Release can make your day-to-day workflows more enjoyable.",
  "publishDate": "Tue Apr 04 2023 18:19:50 GMT+0000 (Coordinated Universal Time)",
  "author": "luiz-felipe",
  "readingTime": 4,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/a07cfb35baa2e31696bd68b5af23bda0.png",
  "imageAlt": "Automating your day-to-day workflows with the Release CLI",
  "showCTA": true,
  "ctaCopy": "Automate bug replication and ticket handling with Release's instant environments. Streamline workflows and focus on fixing bugs faster.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=automating-your-day-to-day-workflows-with-the-release-cli",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/a07cfb35baa2e31696bd68b5af23bda0.png",
  "excerpt": "Walk you through a hypothetical bug scenario and how Release can make your day-to-day workflows more enjoyable.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nA typical day for a developer is filled with coming up with great ideas for applications, writing flawless code and seeing everything work exactly as expected, right? Well, sometimes. Often, our days are filled with repetitive tasks, and if you’re anything like me, once you’ve done the same task a few times you get an urge to automate it. One of these common repetitive tasks is fixing pesky bugs. Today, I will walk you through a hypothetical bug scenario where we’ll be using Release for ephemeral environments and Release CLI to make your day-to-day workflows more enjoyable. This might give you some time back to focus on that perfect app! \n\nBefore we begin, make sure to set up your version of Release. You can get a free trial [here](https://beta.release.com/register). \n\n### The dreaded bug\n\nWhen fixing bugs one of the first steps towards a fix is to replicate them. However, doing that can be very tricky. Our development environments are often pristine and perfect (right?) and bugs rarely happen! Somehow customers (or hopefully QA) find new ways to break your application and it’s our job to try to break it in the same way, so we can fix it for good.\n\nSometimes you have good error handling and reporting which gives you all of the context needed for a fix. But if that’s not the case we have to dig deeper to uncover the application state when the error occurred.\n\nBut let’s not get ahead of ourselves here. First things first: we must keep management happy by properly handling our ticket. Sadly this is one of the hardest things to automate because of the sheer diversity of ticketing systems and maturity of these products. Although most of them offer APIs, almost none offer good CLI tools which means you might have to resort to using the dreaded browser/mouse combo.\n\nHere at Release we use Linear which has an API but unfortunately has no CLI tool ready for us to use. Which means we have a choice: do we keep this step manual or do we automate it? I took the plunge and wrote myself a simple script, because at the end of the day, I’m going to have to deal with these tickets hundreds of times in the future. The few minutes spent automating this will pay off in dividends (and your wrist will thank you too).\n\nIf you’re interested the script is [available here](https://gist.github.com/Draiken/f23a98de94015b794219d9e64ef5c642). Maybe you’re lucky and your ticketing system offers a CLI or you too will have to take the plunge and write something to automate this (you know you want to). Whatever the means, we can use that to tell the world we’re starting our ticket!\n\n### Creating our environment\n\nNow the first thing we need is an environment to reproduce our bug. Luckily Release offers a feature on top of the ephemeral environments that’s perfect for these situations: [instant datasets](https://docs.release.com/reference-documentation/instant-datasets-aws). We can spin up environments with production-like data within minutes. Depending on how fresh the snapshot we’re using is, the data that caused the bug we need to reproduce might be there already.\n\nFor this we’re going to use the [Release CLI](https://docs.release.com/cli/getting-started). Once that’s setup we’ll login and we’ll be ready to create an environment. Here’s what I use:\n\n```yalm line-numbers\n\nrelease environments create –app my_app –wait | notify-send “Environment ready!”\n\n# or for our friends that run the fruit system\n\nrelease environments create –app my_app –wait | osascript -e 'display notification \"Environment Ready!\"\n\n```\n\nOnce the environment is up and running we get a notification and we can start our investigation.\n\nFiguring out the state around the bug more often than not requires you to dig through the data either directly on the database or through some sort of application console. Ideally we’d just have a perfect admin page showing what’s what, but that’s not always the case.\n\nOur Release CLI allows us to very easily dive right into the environment we just spun up and poke around. For this we’re going to use the **instances** command, which lists the running instances and lets us open up a terminal inside those containers. All we need to do is type:\n\n    \t`release instances terminal`\n\nSelect our app/instance and boom: we’re in! If we use something like Rails we can access our console here or alternatively we can connect to the database directly, given this environment is attached to our database and we have the environment variables needed to connect to it.\n\n### Fix all the things\n\nNow that we’ve investigated and replicated our bug, we can finally fix it! For this we can use another very handy tool from Release: [development environments](https://docs.release.com/cli/remote-dev). Rather than making changes, deploying them to the environment and then checking it, we can simplify all that by running our local code inside the release environment. Let’s start our development environment:\n\n    \t`release development start –app my_app –environment my_env`\n\nThis will insert our local machine’s code into the environment and forward the configured ports right into our localhost. We get the best of both worlds: release is running our code (along all those services it depends on) and we get instant feedback from our changes. We can now fix the issue and close this ticket once and for all.\n\nWith our changes done, we can commit those in and create our pull request. Tools like GitHub and GitLab provide nice CLIs which make it easy to automate this part. At Release we use GitHub and I personally use the [hub](https://github.com/github/hub) CLI for this.\n\n    \t`hub pull-request -o -m “Fix all the things”`\n\nWith our pull request open, we can also update our ticket to the appropriate state, if it’s not already done automatically. Now we can ask our teammates to review our code, give us the all important “LGTM” (Let Go The Mayo!) and merge that bad boy in.\n\n### Automate it all\n\nThere’s much more in our daily workflow that we can automate, and hopefully this inspires you to tackle this piece with Release. Once you bite the bullet and make the effort to automate these small tasks you start to realize how much time is wasted outside of our beloved CLI.\n\nWhat about you? What else have you automated on your day-to-day?\n",
    "code": "var Component=(()=>{var d=Object.create;var i=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(a,e)=>()=>(e||a((e={exports:{}}).exports,e),e.exports),y=(a,e)=>{for(var n in e)i(a,n,{get:e[n],enumerable:!0})},s=(a,e,n,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of m(e))!g.call(a,o)&&o!==n&&i(a,o,{get:()=>e[o],enumerable:!(r=u(e,o))||r.enumerable});return a};var w=(a,e,n)=>(n=a!=null?d(p(a)):{},s(e||!a||!a.__esModule?i(n,\"default\",{value:a,enumerable:!0}):n,a)),b=a=>s(i({},\"__esModule\",{value:!0}),a);var l=f((R,h)=>{h.exports=_jsx_runtime});var I={};y(I,{default:()=>x,frontmatter:()=>v});var t=w(l()),v={title:\"Automating your day-to-day workflows with the Release CLI\",summary:\"Walk you through a hypothetical bug scenario and how Release can make your day-to-day workflows more enjoyable.\",publishDate:\"Tue Apr 04 2023 18:19:50 GMT+0000 (Coordinated Universal Time)\",author:\"luiz-felipe\",readingTime:4,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/a07cfb35baa2e31696bd68b5af23bda0.png\",imageAlt:\"Automating your day-to-day workflows with the Release CLI\",showCTA:!0,ctaCopy:\"Automate bug replication and ticket handling with Release's instant environments. Streamline workflows and focus on fixing bugs faster.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=automating-your-day-to-day-workflows-with-the-release-cli\",relatedPosts:[\"\"],ogImage:\"/blog-images/a07cfb35baa2e31696bd68b5af23bda0.png\",excerpt:\"Walk you through a hypothetical bug scenario and how Release can make your day-to-day workflows more enjoyable.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function c(a){let e=Object.assign({p:\"p\",a:\"a\",h3:\"h3\",span:\"span\",pre:\"pre\",code:\"code\",strong:\"strong\"},a.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"A typical day for a developer is filled with coming up with great ideas for applications, writing flawless code and seeing everything work exactly as expected, right? Well, sometimes. Often, our days are filled with repetitive tasks, and if you\\u2019re anything like me, once you\\u2019ve done the same task a few times you get an urge to automate it. One of these common repetitive tasks is fixing pesky bugs. Today, I will walk you through a hypothetical bug scenario where we\\u2019ll be using Release for ephemeral environments and Release CLI to make your day-to-day workflows more enjoyable. This might give you some time back to focus on that perfect app!\\xA0\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Before we begin, make sure to set up your version of Release. You can get a free trial \",(0,t.jsx)(e.a,{href:\"https://beta.release.com/register\",children:\"here\"}),\".\\xA0\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"the-dreaded-bug\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#the-dreaded-bug\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"The dreaded bug\"]}),`\n`,(0,t.jsx)(e.p,{children:\"When fixing bugs one of the first steps towards a fix is to replicate them. However, doing that can be very tricky. Our development environments are often pristine and perfect (right?) and bugs rarely happen! Somehow customers (or hopefully QA) find new ways to break your application and it\\u2019s our job to try to break it in the same way, so we can fix it for good.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Sometimes you have good error handling and reporting which gives you all of the context needed for a fix. But if that\\u2019s not the case we have to dig deeper to uncover the application state when the error occurred.\"}),`\n`,(0,t.jsx)(e.p,{children:\"But let\\u2019s not get ahead of ourselves here. First things first: we must keep management happy by properly handling our ticket. Sadly this is one of the hardest things to automate because of the sheer diversity of ticketing systems and maturity of these products. Although most of them offer APIs, almost none offer good CLI tools which means you might have to resort to using the dreaded browser/mouse combo.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Here at Release we use Linear which has an API but unfortunately has no CLI tool ready for us to use. Which means we have a choice: do we keep this step manual or do we automate it? I took the plunge and wrote myself a simple script, because at the end of the day, I\\u2019m going to have to deal with these tickets hundreds of times in the future. The few minutes spent automating this will pay off in dividends (and your wrist will thank you too).\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you\\u2019re interested the script is \",(0,t.jsx)(e.a,{href:\"https://gist.github.com/Draiken/f23a98de94015b794219d9e64ef5c642\",children:\"available here\"}),\". Maybe you\\u2019re lucky and your ticketing system offers a CLI or you too will have to take the plunge and write something to automate this (you know you want to). Whatever the means, we can use that to tell the world we\\u2019re starting our ticket!\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"creating-our-environment\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#creating-our-environment\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Creating our environment\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now the first thing we need is an environment to reproduce our bug. Luckily Release offers a feature on top of the ephemeral environments that\\u2019s perfect for these situations: \",(0,t.jsx)(e.a,{href:\"https://docs.release.com/reference-documentation/instant-datasets-aws\",children:\"instant datasets\"}),\". We can spin up environments with production-like data within minutes. Depending on how fresh the snapshot we\\u2019re using is, the data that caused the bug we need to reproduce might be there already.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"For this we\\u2019re going to use the \",(0,t.jsx)(e.a,{href:\"https://docs.release.com/cli/getting-started\",children:\"Release CLI\"}),\". Once that\\u2019s setup we\\u2019ll login and we\\u2019ll be ready to create an environment. Here\\u2019s what I use:\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yalm\",children:`\nrelease environments create \\u2013app my_app \\u2013wait | notify-send \\u201CEnvironment ready!\\u201D\n\n# or for our friends that run the fruit system\n\nrelease environments create \\u2013app my_app \\u2013wait | osascript -e 'display notification \"Environment Ready!\"\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"Once the environment is up and running we get a notification and we can start our investigation.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Figuring out the state around the bug more often than not requires you to dig through the data either directly on the database or through some sort of application console. Ideally we\\u2019d just have a perfect admin page showing what\\u2019s what, but that\\u2019s not always the case.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Our Release CLI allows us to very easily dive right into the environment we just spun up and poke around. For this we\\u2019re going to use the \",(0,t.jsx)(e.strong,{children:\"instances\"}),\" command, which lists the running instances and lets us open up a terminal inside those containers. All we need to do is type:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"release instances terminal\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Select our app/instance and boom: we\\u2019re in! If we use something like Rails we can access our console here or alternatively we can connect to the database directly, given this environment is attached to our database and we have the environment variables needed to connect to it.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"fix-all-the-things\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#fix-all-the-things\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Fix all the things\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now that we\\u2019ve investigated and replicated our bug, we can finally fix it! For this we can use another very handy tool from Release: \",(0,t.jsx)(e.a,{href:\"https://docs.release.com/cli/remote-dev\",children:\"development environments\"}),\". Rather than making changes, deploying them to the environment and then checking it, we can simplify all that by running our local code inside the release environment. Let\\u2019s start our development environment:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"release development start \\u2013app my_app \\u2013environment my_env\"})}),`\n`,(0,t.jsx)(e.p,{children:\"This will insert our local machine\\u2019s code into the environment and forward the configured ports right into our localhost. We get the best of both worlds: release is running our code (along all those services it depends on) and we get instant feedback from our changes. We can now fix the issue and close this ticket once and for all.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"With our changes done, we can commit those in and create our pull request. Tools like GitHub and GitLab provide nice CLIs which make it easy to automate this part. At Release we use GitHub and I personally use the \",(0,t.jsx)(e.a,{href:\"https://github.com/github/hub\",children:\"hub\"}),\" CLI for this.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"hub pull-request -o -m \\u201CFix all the things\\u201D\"})}),`\n`,(0,t.jsx)(e.p,{children:\"With our pull request open, we can also update our ticket to the appropriate state, if it\\u2019s not already done automatically. Now we can ask our teammates to review our code, give us the all important \\u201CLGTM\\u201D (Let Go The Mayo!) and merge that bad boy in.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"automate-it-all\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#automate-it-all\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Automate it all\"]}),`\n`,(0,t.jsx)(e.p,{children:\"There\\u2019s much more in our daily workflow that we can automate, and hopefully this inspires you to tackle this piece with Release. Once you bite the bullet and make the effort to automate these small tasks you start to realize how much time is wasted outside of our beloved CLI.\"}),`\n`,(0,t.jsx)(e.p,{children:\"What about you? What else have you automated on your day-to-day?\"})]})}function k(a={}){let{wrapper:e}=a.components||{};return e?(0,t.jsx)(e,Object.assign({},a,{children:(0,t.jsx)(c,a)})):c(a)}var x=k;return b(I);})();\n;return Component;"
  },
  "_id": "blog/posts/automating-your-day-to-day-workflows-with-the-release-cli.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/automating-your-day-to-day-workflows-with-the-release-cli.mdx",
    "sourceFileName": "automating-your-day-to-day-workflows-with-the-release-cli.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/automating-your-day-to-day-workflows-with-the-release-cli"
  },
  "type": "BlogPost",
  "computedSlug": "automating-your-day-to-day-workflows-with-the-release-cli"
}