{
  "title": "You don't need to know what you’re doing, you need an agile DevOps methodology",
  "summary": "Do you ever feel like you have no idea what you’re doing? Like you’re just kind of going along with things, doing your b",
  "publishDate": "Tue Jan 26 2021 22:22:08 GMT+0000 (Coordinated Universal Time)",
  "author": "vicky-koblinski",
  "readingTime": 5,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/a4778940b15c7370ac6df7eeb05d221d.jpg",
  "imageAlt": "White light on dark background",
  "showCTA": true,
  "ctaCopy": "Looking to embrace agile DevOps like a pro? Streamline your workflows with Release's ephemeral environments for faster deployments.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=you-need-agile-devops-methodology",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/a4778940b15c7370ac6df7eeb05d221d.jpg",
  "excerpt": "Do you ever feel like you have no idea what you’re doing? Like you’re just kind of going along with things, doing your b",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nDo you ever feel like you have no idea what you’re doing? Like you’re just kind of going along with things, doing your _best_ but not really sure if you’re doing it _right_?\n\nHere’s a little secret I’ve learned over the years: _Nobody knows what they’re doing._\n\nDenis, with his steadfast approach and surgeon-like precision? Hannah, with her pen and notebook, who writes down every detail to later review? Kendall, who is quick on the trigger to any bizarre question that upper management tosses her way and always leaves them with good laughs and big smiles?\n\nAll of them? _They have no idea what they’re doing._ They don’t **have** to know what they’re doing. They’ve unlocked the biggest secret that formal education has desperately tried to unteach us: Failing is _fine_! Failing is **good**! Failing is **_the fastest way to success_**!\n\n![](/blog-images/fb957b595a7ec1e99fa11afb77151430.gif)\n\n_Brainless, single-cell slime hunting for food_\n\nIn the world of software development, we’ve already accepted this as scientific fact. We embrace this and weave it into the foundation of our methodologies and systems. We know, with absolute certainty, that nothing is certain. The winner will be the little boat whose chart is scribbled on the back of a napkin and can pivot on a dime, not the monolithic Titanic who, despite the captain’s best efforts, is going to collide with that iceberg.\n\nHowever, even though we recognize the advantages and the _need_ to be **agile** in this industry, that does not mean that we’ve mastered all the ways to optimize this. While different Software Development methodologies can have their place for different problem spaces (just as different programming languages are better suited for some problems over others), one particular approach to **_failing fast_** has gained a lot of traction over the past decade. The **DevOps** methodology was forged from the fires of Agile, and today DevOps has been crowned the champion of how to build great software, quickly and wicked fast. Modern technology companies that thrive to compete place DevOps on the forefront of their mind.\n\n![](/blog-images/6fdb6e842b8756cc2f0722f8608dd966.gif)\n\n_Twining motion of vines trying to find something to climb_\n\n### What is DevOps?\n\nIf you’re not already familiar with DevOps, the term can be a little confusing. DevOps began as a cultural movement within companies. Rather than Developer teams taking their code and throwing it over the fence for the Operations team to deploy and monitor (while the Security team haughtily throws their arms in the air over any concern—be it major or minor—introduced by the other teams), DevOps works to tear down these artificial walls.\n\nThe way this works in practice is through tight feedback loops and blurring the edges of responsibility. “DevOps” has turned from an idea into a career where you build a racetrack for product development. This enables the idea-to-deployment cycle to hasten. No longer do we need to take months to plan, build, test, release, deploy, evaluate. No longer do we need to make sure every release is perfect “because there’s no going back”. Now we can do what we do best: _Make mistakes._\n\nYou’ve heard of (or worked with) companies that deploy their code tens to thousands of times a day. This is incredibly powerful. Ideas always look a little different in practice and sometimes they turn out to be bad ideas. But sometimes those silly ideas that would have you laughed out of a boardroom turn out to be the ones worth their weight in gold. With the ability to experiment and quickly reset, we can fractal our way to the perfect solution for any problem.\n\n### Why do I need Environments?\n\nIf your company is big enough, has the capital, and understands the need, you may be lucky enough to have a team of DevOps Engineers who work to help make sure everyone has the environments they need, and the tools to build and deploy code.You have your build and deploy pipelines. Your code only takes one push, merge, and a couple button clicks to make its way into production. You’re. Living. The. Life.\n\nOkay, sure, there are rough edges. The Developers and QA might be a little agitated that they have “bad data” in their databases. This bad data causes weird shadow bugs that wouldn’t exist “for a real user”. You have Product Managers and UX/UI Engineers digging around your QA and Staging Environments to make sure the feature matches the requirements, but they run into these shadow bugs and in a panic, hold a meeting to discuss “why the application is broken”.\n\n_C’est la vie._ Your environments are starting to drift apart, but it’s okay. QA finds a bug, but they can’t be sure when it was introduced. The Developer isn’t sure either, there are a few features that others were working on that have all been merged into here. One major feature is ready, but the others are blocked. Hours tick into the evening as the team scrambles to fix the concerns, introducing more in their haste, until finally QA calls to cancel today’s deployment. Disappointed and mentally taxed, everyone finally goes home frustrated.\n\nThis happens regularly. It’s a clog in the system, but it is manageable. However, what you don’t know yet is that your competitor has committed to allocating resources to addressing this problem directly. It took them twelve months (a bit off from their original six-month estimate), but now the tooling is built out and QA can create a build from any branch, on the fly. Now the data is fresh, every time, freeing QA to get their hands dirty in this sandbox. The Product team is excited to be able to look at new features side by side before they’re released, and features can even be put on hold or tinkered with in isolation.\n\nMeanwhile, your company is falling behind. The only way you’d be able to keep up is to spend the money _and the time_ to build this for yourselves. It’s a big investment, a big time commitment, and your company is worried. What if the project fails? There’s a lot at stake here.\n\nEnvironments are the key to rapid prototyping and quick feature releases, while maintaining a solid, battle-tested product. But environments are also expensive. The upfront and maintenance cost put them outside the scope for many companies and by the time a strong need rears its head, the architecture has evolved into a technical labyrinth.\n\nAt Release, we understand this problem in depth. We have customers who use Release to give themselves a competitive advantage after they realized environments were holding them back. A new concept in DevOps has emerged called [Ephemeral Environments](https://releasehub.com/ephemeral-environments) which eliminates the bottleneck of shared staging environments. An Ephemeral Environment is automatically created when a developer does a pull request and has just their changes on their branch. This environment spins up for UAT testing and when the branch is merged, it disappears. Developers never wait for access to environments as they appear as part of their development workflow.\n\nWe’re using Ephemeral Environments which has put us on fast-track to shipping deliverables that we can stand behind. The unfortunate truth is that building this infrastructure is necessary to have a fighting chance against the heavyweights. But the problem is that the cost and time required can be astronomical. The [Release](https://releasehub.com) platform specifically aims to solve this problem directly by providing Environments-as-a-Service. This way, you get all the advantages of environments, without the costs or headache of Doing It Yourself, freeing you up to focus on the business and the product needs.\n\n### In short…\n\nRemember: Nobody knows what they’re doing. And that’s okay. Nobody’s ever known what they’re doing; we’re all just stumbling around. But if we stumble with purpose, we can fall into something that works. If we fail fast, we get to success faster. Our methodologies in software development reflect this, but in practice, building supportive infrastructure is costly. If we can get to a place where we optimtimize failing fast by deploying early and often, we can more quickly find what our product needs to be. We can find success _without ever having to know_ what we’re doing.\n\n### Ephemeral Environments\n\nCurious about Ephemeral Environments and what they can do for you? Check out [this article](https://release.com/ephemeral-environments) on what Ephemeral Environments are and what they can do for you.\n",
    "code": "var Component=(()=>{var c=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,p=Object.prototype.hasOwnProperty;var f=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),y=(n,e)=>{for(var o in e)i(n,o,{get:e[o],enumerable:!0})},s=(n,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!p.call(n,a)&&a!==o&&i(n,a,{get:()=>e[a],enumerable:!(r=m(e,a))||r.enumerable});return n};var w=(n,e,o)=>(o=n!=null?c(g(n)):{},s(e||!n||!n.__esModule?i(o,\"default\",{value:n,enumerable:!0}):o,n)),b=n=>s(i({},\"__esModule\",{value:!0}),n);var d=f((x,h)=>{h.exports=_jsx_runtime});var D={};y(D,{default:()=>T,frontmatter:()=>v});var t=w(d()),v={title:\"You don't need to know what you\\u2019re doing, you need an agile DevOps methodology\",summary:\"Do you ever feel like you have no idea what you\\u2019re doing? Like you\\u2019re just kind of going along with things, doing your b\",publishDate:\"Tue Jan 26 2021 22:22:08 GMT+0000 (Coordinated Universal Time)\",author:\"vicky-koblinski\",readingTime:5,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/a4778940b15c7370ac6df7eeb05d221d.jpg\",imageAlt:\"White light on dark background\",showCTA:!0,ctaCopy:\"Looking to embrace agile DevOps like a pro? Streamline your workflows with Release's ephemeral environments for faster deployments.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=you-need-agile-devops-methodology\",relatedPosts:[\"\"],ogImage:\"/blog-images/a4778940b15c7370ac6df7eeb05d221d.jpg\",excerpt:\"Do you ever feel like you have no idea what you\\u2019re doing? Like you\\u2019re just kind of going along with things, doing your b\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function l(n){let e=Object.assign({p:\"p\",em:\"em\",strong:\"strong\",img:\"img\",h3:\"h3\",a:\"a\",span:\"span\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.p,{children:[\"Do you ever feel like you have no idea what you\\u2019re doing? Like you\\u2019re just kind of going along with things, doing your \",(0,t.jsx)(e.em,{children:\"best\"}),\" but not really sure if you\\u2019re doing it \",(0,t.jsx)(e.em,{children:\"right\"}),\"?\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Here\\u2019s a little secret I\\u2019ve learned over the years: \",(0,t.jsx)(e.em,{children:\"Nobody knows what they\\u2019re doing.\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"Denis, with his steadfast approach and surgeon-like precision? Hannah, with her pen and notebook, who writes down every detail to later review? Kendall, who is quick on the trigger to any bizarre question that upper management tosses her way and always leaves them with good laughs and big smiles?\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"All of them? \",(0,t.jsx)(e.em,{children:\"They have no idea what they\\u2019re doing.\"}),\" They don\\u2019t \",(0,t.jsx)(e.strong,{children:\"have\"}),\" to know what they\\u2019re doing. They\\u2019ve unlocked the biggest secret that formal education has desperately tried to unteach us: Failing is \",(0,t.jsx)(e.em,{children:\"fine\"}),\"! Failing is \",(0,t.jsx)(e.strong,{children:\"good\"}),\"! Failing is \",(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.em,{children:\"the fastest way to success\"})}),\"!\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/fb957b595a7ec1e99fa11afb77151430.gif\",alt:\"\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Brainless, single-cell slime hunting for food\"})}),`\n`,(0,t.jsx)(e.p,{children:\"In the world of software development, we\\u2019ve already accepted this as scientific fact. We embrace this and weave it into the foundation of our methodologies and systems. We know, with absolute certainty, that nothing is certain. The winner will be the little boat whose chart is scribbled on the back of a napkin and can pivot on a dime, not the monolithic Titanic who, despite the captain\\u2019s best efforts, is going to collide with that iceberg.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"However, even though we recognize the advantages and the \",(0,t.jsx)(e.em,{children:\"need\"}),\" to be \",(0,t.jsx)(e.strong,{children:\"agile\"}),\" in this industry, that does not mean that we\\u2019ve mastered all the ways to optimize this. While different Software Development methodologies can have their place for different problem spaces (just as different programming languages are better suited for some problems over others), one particular approach to \",(0,t.jsx)(e.strong,{children:(0,t.jsx)(e.em,{children:\"failing fast\"})}),\" has gained a lot of traction over the past decade. The \",(0,t.jsx)(e.strong,{children:\"DevOps\"}),\" methodology was forged from the fires of Agile, and today DevOps has been crowned the champion of how to build great software, quickly and wicked fast. Modern technology companies that thrive to compete place DevOps on the forefront of their mind.\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/6fdb6e842b8756cc2f0722f8608dd966.gif\",alt:\"\"})}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.em,{children:\"Twining motion of vines trying to find something to climb\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"what-is-devops\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#what-is-devops\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is DevOps?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"If you\\u2019re not already familiar with DevOps, the term can be a little confusing. DevOps began as a cultural movement within companies. Rather than Developer teams taking their code and throwing it over the fence for the Operations team to deploy and monitor (while the Security team haughtily throws their arms in the air over any concern\\u2014be it major or minor\\u2014introduced by the other teams), DevOps works to tear down these artificial walls.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"The way this works in practice is through tight feedback loops and blurring the edges of responsibility. \\u201CDevOps\\u201D has turned from an idea into a career where you build a racetrack for product development. This enables the idea-to-deployment cycle to hasten. No longer do we need to take months to plan, build, test, release, deploy, evaluate. No longer do we need to make sure every release is perfect \\u201Cbecause there\\u2019s no going back\\u201D. Now we can do what we do best: \",(0,t.jsx)(e.em,{children:\"Make mistakes.\"})]}),`\n`,(0,t.jsx)(e.p,{children:\"You\\u2019ve heard of (or worked with) companies that deploy their code tens to thousands of times a day. This is incredibly powerful. Ideas always look a little different in practice and sometimes they turn out to be bad ideas. But sometimes those silly ideas that would have you laughed out of a boardroom turn out to be the ones worth their weight in gold. With the ability to experiment and quickly reset, we can fractal our way to the perfect solution for any problem.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"why-do-i-need-environments\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#why-do-i-need-environments\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Why do I need Environments?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"If your company is big enough, has the capital, and understands the need, you may be lucky enough to have a team of DevOps Engineers who work to help make sure everyone has the environments they need, and the tools to build and deploy code.You have your build and deploy pipelines. Your code only takes one push, merge, and a couple button clicks to make its way into production. You\\u2019re. Living. The. Life.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Okay, sure, there are rough edges. The Developers and QA might be a little agitated that they have \\u201Cbad data\\u201D in their databases. This bad data causes weird shadow bugs that wouldn\\u2019t exist \\u201Cfor a real user\\u201D. You have Product Managers and UX/UI Engineers digging around your QA and Staging Environments to make sure the feature matches the requirements, but they run into these shadow bugs and in a panic, hold a meeting to discuss \\u201Cwhy the application is broken\\u201D.\"}),`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.em,{children:\"C\\u2019est la vie.\"}),\" Your environments are starting to drift apart, but it\\u2019s okay. QA finds a bug, but they can\\u2019t be sure when it was introduced. The Developer isn\\u2019t sure either, there are a few features that others were working on that have all been merged into here. One major feature is ready, but the others are blocked. Hours tick into the evening as the team scrambles to fix the concerns, introducing more in their haste, until finally QA calls to cancel today\\u2019s deployment. Disappointed and mentally taxed, everyone finally goes home frustrated.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"This happens regularly. It\\u2019s a clog in the system, but it is manageable. However, what you don\\u2019t know yet is that your competitor has committed to allocating resources to addressing this problem directly. It took them twelve months (a bit off from their original six-month estimate), but now the tooling is built out and QA can create a build from any branch, on the fly. Now the data is fresh, every time, freeing QA to get their hands dirty in this sandbox. The Product team is excited to be able to look at new features side by side before they\\u2019re released, and features can even be put on hold or tinkered with in isolation.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Meanwhile, your company is falling behind. The only way you\\u2019d be able to keep up is to spend the money \",(0,t.jsx)(e.em,{children:\"and the time\"}),\" to build this for yourselves. It\\u2019s a big investment, a big time commitment, and your company is worried. What if the project fails? There\\u2019s a lot at stake here.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Environments are the key to rapid prototyping and quick feature releases, while maintaining a solid, battle-tested product. But environments are also expensive. The upfront and maintenance cost put them outside the scope for many companies and by the time a strong need rears its head, the architecture has evolved into a technical labyrinth.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"At Release, we understand this problem in depth. We have customers who use Release to give themselves a competitive advantage after they realized environments were holding them back. A new concept in DevOps has emerged called \",(0,t.jsx)(e.a,{href:\"https://releasehub.com/ephemeral-environments\",children:\"Ephemeral Environments\"}),\" which eliminates the bottleneck of shared staging environments. An Ephemeral Environment is automatically created when a developer does a pull request and has just their changes on their branch. This environment spins up for UAT testing and when the branch is merged, it disappears. Developers never wait for access to environments as they appear as part of their development workflow.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"We\\u2019re using Ephemeral Environments which has put us on fast-track to shipping deliverables that we can stand behind. The unfortunate truth is that building this infrastructure is necessary to have a fighting chance against the heavyweights. But the problem is that the cost and time required can be astronomical. The \",(0,t.jsx)(e.a,{href:\"https://releasehub.com\",children:\"Release\"}),\" platform specifically aims to solve this problem directly by providing Environments-as-a-Service. This way, you get all the advantages of environments, without the costs or headache of Doing It Yourself, freeing you up to focus on the business and the product needs.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"in-short\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#in-short\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"In short\\u2026\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Remember: Nobody knows what they\\u2019re doing. And that\\u2019s okay. Nobody\\u2019s ever known what they\\u2019re doing; we\\u2019re all just stumbling around. But if we stumble with purpose, we can fall into something that works. If we fail fast, we get to success faster. Our methodologies in software development reflect this, but in practice, building supportive infrastructure is costly. If we can get to a place where we optimtimize failing fast by deploying early and often, we can more quickly find what our product needs to be. We can find success \",(0,t.jsx)(e.em,{children:\"without ever having to know\"}),\" what we\\u2019re doing.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"ephemeral-environments\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#ephemeral-environments\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Ephemeral Environments\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Curious about Ephemeral Environments and what they can do for you? Check out \",(0,t.jsx)(e.a,{href:\"https://release.com/ephemeral-environments\",children:\"this article\"}),\" on what Ephemeral Environments are and what they can do for you.\"]})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(l,n)})):l(n)}var T=k;return b(D);})();\n;return Component;"
  },
  "_id": "blog/posts/you-need-agile-devops-methodology.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/you-need-agile-devops-methodology.mdx",
    "sourceFileName": "you-need-agile-devops-methodology.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/you-need-agile-devops-methodology"
  },
  "type": "BlogPost",
  "computedSlug": "you-need-agile-devops-methodology"
}