{
  "title": "How to set Docker Compose Environment Variables",
  "summary": "How to define environment variables directly in a Docker Compose file, or copy tnem from the host's environment.",
  "publishDate": "Thu Aug 11 2022 14:12:30 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 4,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/4c0d3d08781f13bb6a55f737ccdd49d2.jpg",
  "imageAlt": "Cog wheels",
  "showCTA": true,
  "ctaCopy": "Looking to streamline environment setup like Docker Compose? Try Release for efficient, on-demand environments management.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-set-docker-compose-environment-variables",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/4c0d3d08781f13bb6a55f737ccdd49d2.jpg",
  "excerpt": "How to define environment variables directly in a Docker Compose file, or copy tnem from the host's environment.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nDocker Compose lets you run multi-container Docker applications. If you want to use Docker Compose with environment variables, you have several options. The [official documentation](https://docs.docker.com/compose/environment-variables/) is a good reference, but it's hard to understand and very abstract!\n\nLet's take a practical look at how to pass environment variables to your Docker containers using Docker Compose.\n\nWe'll use a simplified version of the [official getting started](https://docs.docker.com/compose/gettingstarted/) Docker Compose app, which is a basic web application built with Python and Flask, but you'll be able to use the same method to access environment variables using any other programming language.\n\n### Setting up the example project\n\nIf you want to follow along, clone our [Example Docker Compose Project](https://github.com/ritza-co/docker-compose-environment-variables-demo). You'll also need Docker and Docker Compose installed on your machine.\n\nWe'll assume that you want to pass an environment variable called _SECRET_ENV_ to your application.\n\nThe project consists of:\n\n- An _app.py_ file that returns a string containing the _SECRET_ENV_ value.\n- A Dockerfile that starts up the Flask app.\n- A Docker Compose that defines the variable and starts the Dockerfile.\n\nA _requirements.txt_ file that installs the Flask framework.\n\n### Defining the environment variable in the Docker Compose file\n\nThe easiest way to send an environment variable to your Docker app is by defining it using an _environment:_ section in your _docker-compose.yml_ file as in the example below:\n\n```yml\n\nversion: \"3.9\"\nservices:\n  web:\n    environment:\n      - SECRET_ENV=my_secret_defined_in_docker_compose_yml\n    build: .\n    ports:\n      - \"8000:5000\"\n  redis:\n    image: \"redis:alpine\"\n\n```\n\nIf you do this, run _docker compose build && docker compose up_, and visit [http://localhost:8000](http://localhost:8000/) in your web browser. You'll see the variable displayed.\n\n![](/blog-images/d3ceded73b3651835e9c323cd8bb9279.png)\n\nThis is easy, but not very useful. If you don't want to have the variable in your application code, you probably don't want it in your _docker-compose.yml_ file either.\n\n### Passing an environment variable from the host\n\nPress Ctrl + C twice to stop the Docker server and edit the _docker-compose.yml_ file to look as follows:\n\n```yml\n\nversion: \"3.9\"\nservices:\n  web:\n    environment:\n      - SECRET_ENV=${HOST_SECRET}\n    build: .\n    ports:\n      - \"8000:5000\"\n  redis:\n    image: \"redis:alpine\"\n\n```\n\nSave the file and run _export HOST_SECRET=my_secret_from_host_ in your shell. This sets the environment variable on your host machine, which will be read by the _docker-compose.yml_ file after you rebuild with Compose.\n\nNow run _docker compose build && docker compose up_ again.\n\nVisit [http://localhost:8000](http://localhost:8000/) in your browser and you'll see that the app now displays the new secret variable.\n\n![](/blog-images/a5a9a53631c94d3cdf9609560003edd3.png)\n\n### Passing an environment variable from a _.env_ file\n\nIf you have a lot of environment variables or you want to be sure you don't lose them, you can define them in a file called _.env_ in the same directory as your _docker-compose.yml_ file.\n\nQuit your shell to clear the _HOST_SECRET_ variable that you set before and open a new shell. Create a file called _.env_ containing the following:\n\nHOST_SECRET=my_secret_from_dot_env_file\n\nSave the file and run _docker compose build && docker compose up_ again.\n\nNow you'll see the variable as you defined it in your _.env_ file. Usually, you would add this file to _.gitignore_ and recreate it on each machine you run the code on, which means that your (sensitive) environment variables are not stored with your codebase.\n\n![](/blog-images/234d1b8930c3fd22ef37cdf72aa6346e.png)\n\n### Understanding the priority of environment variables\n\nIf you define the same variable in a _.env_ file and directly in your environment (for example, using _export HOST_SECRET=my_secret_from_host_), Docker Compose will give priority to your environment. The variable in your _.env_ file will be ignored.\n\nIf you want to check exactly what is being used by your _docker-compose.yml_ file without building the whole project, you can run:\n\n_docker compose convert_\n\nThis will output the model it uses, based on your _docker-compose.yml_ file but with any environment variables replaced with their real values. If you run it now, you'll see it still picks up the value from the _.env_ file.\n\n```yml\n---\n   environment:\n     SECRET_ENV: my_secret_from_dot_env_file\n```\n\nIf you run _export HOST_SECRET=my_secret_from_host_ and _docker compose convert_ again, you'll see it prefers the variable you set explicitly over the one in the _.env_ file.\n\n```yml\n---\n   environment:\n     SECRET_ENV: my_secret_from_host\n```\n\n### The best way to handle environment variables in your Docker Compose projects\n\nTo recap, you can:\n\n- Hard code your variables directly in your _docker-compose.yml_.\n- Pull the variables from the host environment.\n- Define the variables in a _.env_ file.\n\nFor non-sensitive variables that don't change very often, it's easiest to simply put the values directly in the _docker-compose.yml_ file. This means you don't have to spend extra time and effort tracking down the values and messing around with multiple files.\n\nFor sensitive values, such as database passwords and API tokens, you should ideally only define these directly in secure environments (for example, your production server). However, it's inconvenient to lose all of these values every time you need to restart your server or change to a new machine.\n\nTherefore a good tradeoff between security and convenience is to use a _.env_ file containing your sensitive environment variables. It's important to keep any copies of this file in a secure place, such as a secrets manager or vault, and to not check in this file as part of your code base.\n\n### Managing environment variables and secrets with ReleaseHub\n\nIf you're looking for a simple and powerful platform to manage all of your environments for you, take a look at [Release](https://release.com/). Using our custom application template file, you can easily set environment variables and map them to specific environments, ensuring that your secret management is both secure and convenient.\n\n‍\n",
    "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),y=(o,e)=>{for(var i in e)a(o,i,{get:e[i],enumerable:!0})},l=(o,e,i,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of p(e))!v.call(o,r)&&r!==i&&a(o,r,{get:()=>e[r],enumerable:!(t=m(e,r))||t.enumerable});return o};var g=(o,e,i)=>(i=o!=null?d(u(o)):{},l(e||!o||!o.__esModule?a(i,\"default\",{value:o,enumerable:!0}):i,o)),b=o=>l(a({},\"__esModule\",{value:!0}),o);var c=f((E,s)=>{s.exports=_jsx_runtime});var C={};y(C,{default:()=>_,frontmatter:()=>k});var n=g(c()),k={title:\"How to set Docker Compose Environment Variables\",summary:\"How to define environment variables directly in a Docker Compose file, or copy tnem from the host's environment.\",publishDate:\"Thu Aug 11 2022 14:12:30 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:4,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/4c0d3d08781f13bb6a55f737ccdd49d2.jpg\",imageAlt:\"Cog wheels\",showCTA:!0,ctaCopy:\"Looking to streamline environment setup like Docker Compose? Try Release for efficient, on-demand environments management.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-set-docker-compose-environment-variables\",relatedPosts:[\"\"],ogImage:\"/blog-images/4c0d3d08781f13bb6a55f737ccdd49d2.jpg\",excerpt:\"How to define environment variables directly in a Docker Compose file, or copy tnem from the host's environment.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function h(o){let e=Object.assign({p:\"p\",a:\"a\",h3:\"h3\",span:\"span\",em:\"em\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",img:\"img\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"Docker Compose lets you run multi-container Docker applications. If you want to use Docker Compose with environment variables, you have several options. The \",(0,n.jsx)(e.a,{href:\"https://docs.docker.com/compose/environment-variables/\",children:\"official documentation\"}),\" is a good reference, but it's hard to understand and very abstract!\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Let's take a practical look at how to pass environment variables to your Docker containers using Docker Compose.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll use a simplified version of the \",(0,n.jsx)(e.a,{href:\"https://docs.docker.com/compose/gettingstarted/\",children:\"official getting started\"}),\" Docker Compose app, which is a basic web application built with Python and Flask, but you'll be able to use the same method to access environment variables using any other programming language.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"setting-up-the-example-project\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#setting-up-the-example-project\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Setting up the example project\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you want to follow along, clone our \",(0,n.jsx)(e.a,{href:\"https://github.com/ritza-co/docker-compose-environment-variables-demo\",children:\"Example Docker Compose Project\"}),\". You'll also need Docker and Docker Compose installed on your machine.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"We'll assume that you want to pass an environment variable called \",(0,n.jsx)(e.em,{children:\"SECRET_ENV\"}),\" to your application.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The project consists of:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"An \",(0,n.jsx)(e.em,{children:\"app.py\"}),\" file that returns a string containing the \",(0,n.jsx)(e.em,{children:\"SECRET_ENV\"}),\" value.\"]}),`\n`,(0,n.jsx)(e.li,{children:\"A Dockerfile that starts up the Flask app.\"}),`\n`,(0,n.jsx)(e.li,{children:\"A Docker Compose that defines the variable and starts the Dockerfile.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"A \",(0,n.jsx)(e.em,{children:\"requirements.txt\"}),\" file that installs the Flask framework.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"defining-the-environment-variable-in-the-docker-compose-file\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#defining-the-environment-variable-in-the-docker-compose-file\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Defining the environment variable in the Docker Compose file\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"The easiest way to send an environment variable to your Docker app is by defining it using an \",(0,n.jsx)(e.em,{children:\"environment:\"}),\" section in your \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file as in the example below:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yml\",children:`\nversion: \"3.9\"\nservices:\n \\xA0web:\n \\xA0 \\xA0environment:\n \\xA0 \\xA0 \\xA0- SECRET_ENV=my_secret_defined_in_docker_compose_yml\n \\xA0 \\xA0build: .\n \\xA0 \\xA0ports:\n \\xA0 \\xA0 \\xA0- \"8000:5000\"\n \\xA0redis:\n \\xA0 \\xA0image: \"redis:alpine\"\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you do this, run \",(0,n.jsx)(e.em,{children:\"docker compose build && docker compose up\"}),\", and visit \",(0,n.jsx)(e.a,{href:\"http://localhost:8000/\",children:\"http://localhost:8000\"}),\" in your web browser. You'll see the variable displayed.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/d3ceded73b3651835e9c323cd8bb9279.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This is easy, but not very useful. If you don't want to have the variable in your application code, you probably don't want it in your \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file either.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"passing-an-environment-variable-from-the-host\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#passing-an-environment-variable-from-the-host\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Passing an environment variable from the host\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Press Ctrl + C twice to stop the Docker server and edit the \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file to look as follows:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yml\",children:`\nversion: \"3.9\"\nservices:\n \\xA0web:\n \\xA0 \\xA0environment:\n \\xA0 \\xA0 \\xA0- SECRET_ENV=\\${HOST_SECRET}\n \\xA0 \\xA0build: .\n \\xA0 \\xA0ports:\n \\xA0 \\xA0 \\xA0- \"8000:5000\"\n \\xA0redis:\n \\xA0 \\xA0image: \"redis:alpine\"\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Save the file and run \",(0,n.jsx)(e.em,{children:\"export HOST_SECRET=my_secret_from_host\"}),\" in your shell. This sets the environment variable on your host machine, which will be read by the \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file after you rebuild with Compose.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now run \",(0,n.jsx)(e.em,{children:\"docker compose build && docker compose up\"}),\" again.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Visit \",(0,n.jsx)(e.a,{href:\"http://localhost:8000/\",children:\"http://localhost:8000\"}),\" in your browser and you'll see that the app now displays the new secret variable.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a5a9a53631c94d3cdf9609560003edd3.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"passing-an-environment-variable-from-a-env-file\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#passing-an-environment-variable-from-a-env-file\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Passing an environment variable from a \",(0,n.jsx)(e.em,{children:\".env\"}),\" file\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you have a lot of environment variables or you want to be sure you don't lose them, you can define them in a file called \",(0,n.jsx)(e.em,{children:\".env\"}),\" in the same directory as your \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Quit your shell to clear the \",(0,n.jsx)(e.em,{children:\"HOST_SECRET\"}),\" variable that you set before and open a new shell. Create a file called \",(0,n.jsx)(e.em,{children:\".env\"}),\" containing the following:\"]}),`\n`,(0,n.jsx)(e.p,{children:\"HOST_SECRET=my_secret_from_dot_env_file\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Save the file and run \",(0,n.jsx)(e.em,{children:\"docker compose build && docker compose up\"}),\" again.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now you'll see the variable as you defined it in your \",(0,n.jsx)(e.em,{children:\".env\"}),\" file. Usually, you would add this file to \",(0,n.jsx)(e.em,{children:\".gitignore\"}),\" and recreate it on each machine you run the code on, which means that your (sensitive) environment variables are not stored with your codebase.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/234d1b8930c3fd22ef37cdf72aa6346e.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"understanding-the-priority-of-environment-variables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#understanding-the-priority-of-environment-variables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Understanding the priority of environment variables\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you define the same variable in a \",(0,n.jsx)(e.em,{children:\".env\"}),\" file and directly in your environment (for example, using \",(0,n.jsx)(e.em,{children:\"export HOST_SECRET=my_secret_from_host\"}),\"), Docker Compose will give priority to your environment. The variable in your \",(0,n.jsx)(e.em,{children:\".env\"}),\" file will be ignored.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you want to check exactly what is being used by your \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file without building the whole project, you can run:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.em,{children:\"docker compose convert\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"This will output the model it uses, based on your \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file but with any environment variables replaced with their real values. If you run it now, you'll see it still picks up the value from the \",(0,n.jsx)(e.em,{children:\".env\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yml\",children:`---\n\\xA0 \\xA0environment:\n\\xA0 \\xA0 \\xA0SECRET_ENV: my_secret_from_dot_env_file\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you run \",(0,n.jsx)(e.em,{children:\"export HOST_SECRET=my_secret_from_host\"}),\" and \",(0,n.jsx)(e.em,{children:\"docker compose convert\"}),\" again, you'll see it prefers the variable you set explicitly over the one in the \",(0,n.jsx)(e.em,{children:\".env\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yml\",children:`---\n\\xA0 \\xA0environment:\n\\xA0 \\xA0 \\xA0SECRET_ENV: my_secret_from_host\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-best-way-to-handle-environment-variables-in-your-docker-compose-projects\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-best-way-to-handle-environment-variables-in-your-docker-compose-projects\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The best way to handle environment variables in your Docker Compose projects\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To recap, you can:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Hard code your variables directly in your \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\".\"]}),`\n`,(0,n.jsx)(e.li,{children:\"Pull the variables from the host environment.\"}),`\n`,(0,n.jsxs)(e.li,{children:[\"Define the variables in a \",(0,n.jsx)(e.em,{children:\".env\"}),\" file.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.p,{children:[\"For non-sensitive variables that don't change very often, it's easiest to simply put the values directly in the \",(0,n.jsx)(e.em,{children:\"docker-compose.yml\"}),\" file. This means you don't have to spend extra time and effort tracking down the values and messing around with multiple files.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For sensitive values, such as database passwords and API tokens, you should ideally only define these directly in secure environments (for example, your production server). However, it's inconvenient to lose all of these values every time you need to restart your server or change to a new machine.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Therefore a good tradeoff between security and convenience is to use a \",(0,n.jsx)(e.em,{children:\".env\"}),\" file containing your sensitive environment variables. It's important to keep any copies of this file in a secure place, such as a secrets manager or vault, and to not check in this file as part of your code base.\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"managing-environment-variables-and-secrets-with-releasehub\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#managing-environment-variables-and-secrets-with-releasehub\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Managing environment variables and secrets with ReleaseHub\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you're looking for a simple and powerful platform to manage all of your environments for you, take a look at \",(0,n.jsx)(e.a,{href:\"https://release.com/\",children:\"Release\"}),\". Using our custom application template file, you can easily set environment variables and map them to specific environments, ensuring that your secret management is both secure and convenient.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"\\u200D\"})]})}function w(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(h,o)})):h(o)}var _=w;return b(C);})();\n;return Component;"
  },
  "_id": "blog/posts/how-to-set-docker-compose-environment-variables.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/how-to-set-docker-compose-environment-variables.mdx",
    "sourceFileName": "how-to-set-docker-compose-environment-variables.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/how-to-set-docker-compose-environment-variables"
  },
  "type": "BlogPost",
  "computedSlug": "how-to-set-docker-compose-environment-variables"
}