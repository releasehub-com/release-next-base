{
  "title": "Kubernetes Pod: A Beginner's Guide to an Essential Resource",
  "summary": "Pods are essential to any Kubernetes cluster. Learn everything about one of the most important Kubernetes resources.",
  "publishDate": "Wed Aug 31 2022 16:05:07 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 4,
  "categories": [
    "kubernetes",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/2266b02b751a19c98eb0df977859ad01.jpg",
  "imageAlt": "a laptop on a desk",
  "showCTA": true,
  "ctaCopy": "Looking to manage Kubernetes pods effortlessly? Try Release.com for streamlined environment creation and faster deployment cycles.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-pod-a-beginners-guide-to-an-essential-resource",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/2266b02b751a19c98eb0df977859ad01.jpg",
  "excerpt": "Pods are essential to any Kubernetes cluster. Learn everything about one of the most important Kubernetes resources.",
  "tags": [
    "kubernetes",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nKubernetes is a complex tool, but taking your first steps is relatively easy. This is especially true today when all major cloud providers offer easy one-click creation of Kubernetes clusters; you can have a fully working Kubernetes cluster in a matter of minutes. So, what do you do then? You'll probably deploy some pods. Pods are arguably the most important Kubernetes resources. You may have heard about them already, since deploying pods is usually one of the first things in any Kubernetes tutorial. You may have even heard \"they're kind of like containers.\" In this post, you'll learn everything you need to know about pods. \n\n![A picture containing vegetable, green, pea, edible-pod peaDescription automatically generated](/blog-images/143080a00967445b7f95074d3051b41d.jpeg)\n\n### Kubernetes Pods 101\n\nBefore Kubernetes, everyone was talking about containers. When you wanted to deploy only one small microservice, you'd say that you needed to deploy \"one container.\" On Kubernetes, everyone talks about pods instead. So, when you only want to deploy one microservice, you'll say that you need to deploy one pod. \n\nAre pods the same as containers, then? Well, not really. A pod is the smallest deployable unit in a Kubernetes world. This means that you can't directly deploy a single container in Kubernetes. If you want one container running, you need to package it into a pod and deploy one pod. A pod can also contain more than one container. It's basically like a box for containers. \n\nLong story short: if you mainly deploy single containers, there isn't much difference between a pod and a container. Technically, a pod encapsulates your container, but in general you can treat it similarly to a container. But pods' ability to contain more than one container is what opens doors of possibilities. We'll dive into that later in this post. But before that, let's talk about pod lifecycles. \n\n![Graphical user interface, text, applicationDescription automatically generated](/blog-images/c49d794341cb6fa950f9c4407002f7bd.png)\n\n### Pod Lifecycles\n\nJust like many other resources Kubernetes pods can be in a pending, running, or succeeded/failed state. You can check the status of your pod by executing **kubectl describe pod \\[your_pod_name\\]:** \n\n```yaml\n\n$ kubectl describe pod nginx-deployment-6595874d85-hnjzw\nName:           nginx-deployment-6595874d85-hnjzw\nNamespace:      default\nPriority:       0\nNode:           k3s-worker3/10.133.106.222\nStart Time:     Sun, 21 Aug 2022 12:24:58 +0200\nLabels:         app=nginx\n                pod-template-hash=6595874d85\nAnnotations:    \nStatus:         Pending\n(...)\n\n```\n\nAs you can see from the snippet above, my pod is in a **Pending** state. So, what do these states mean? \n\n### Pending\n\nPending, as the name suggests, means that the pod is waiting for something. Usually, it means that Kubernetes is trying to determine where to deploy that pod. So, in normal circumstances, you'll see your pod in the pending state for the first few seconds after creation. But it may also stay in a pending state longer if, for example, all your nodes are full and Kubernetes can't find a suitable node for your pending pod. In such a case, your pod will stay in a pending state until some other pods finish and free up resources or until you add another node to your cluster. \n\n### Running\n\nRunning is pretty straightforward: It's when everything is working correctly and your pod is active. There is a small caveat to this, though. If your pod consists of multiple containers, then your pod will be in the status \"running\" if at least one of its primary containers starts successfully. This means there's a chance that your pod will be in a running state even though not all containers are actually running. So, in the case of multiple containers, it's always best to double-check individual container states to be sure. \n\n### Succeeded/Failed\n\nSucceeded or failed is what comes after running. As you can imagine, you'll see \"succeeded\" when your pod did its job and finished as expected, and you'll see \"failed\" when your pod terminated due to some error. And again, in the case of multiple containers in one pod, you need to be aware that your pod will end up in a failed state if at least one of the containers ends up having issues. \n\n### Unknown\n\nThe other phase a pod can be in is called \"unknown,\" and you probably won't see it often. A pod will be in a state unknown when Kubernetes literally doesn't know what's happening with the pod. This is usually due to networking issues between the Kubernetes control plane and the node on which the pod suppose to run.   \n\n### What Are Pods Used for?\n\nNow, the big question: What are pods actually used for? The simple answer would be \"to run your application.\" At the end of the day, the point of running Kubernetes is to run containerized applications on it. And pods are the actual resources that make it possible. They encapsulate your containerized application and allow you to run it on your Kubernetes cluster. \n\n![ApplicationDescription automatically generated with medium confidence](/blog-images/05e25541f21a570d7cd3d31bfb7edba2.png)\n\nHowever, it's worth mentioning that usually you won't actually be deploying pods themselves. You'll be using other, higher-level Kubernetes resources like [Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) or [DaemonSets](https://release.com/blog/kubernetes-daemonset-tutorial) that will create pods for you. \n\n### Pods vs. Other Resources\n\nPods are only one of many Kubernetes resource types. Most other types are directly or indirectly related to pods, because as we already said, pods are resources that will actually be running your application on the cluster. Therefore, pretty much anything that your application may need—be it a secret or storage or a load balancer—will all need to somehow relate or connect to a pod. \n\nKubernetes secrets can be consumed by pods. Kubernetes service resources used to expose a containerized application on your cluster to the network or internet need to reference a pod. Volumes in Kubernetes are mounted to pods. Kubernetes ConfigMaps used to store configuration files are loaded to pods. These are just a few examples, but in general, pods are usually at the center of everything that's happening on Kubernetes. \n\n![A picture containing pea, vegetable, edible-pod peaDescription automatically generated](/blog-images/ca65057279804f39a7884105ed6dfba7.jpeg)\n\n### How to Create A Pod\n\nI'll show you how to create a pod, but be aware that normally you wouldn't create pods directly. You should use higher-level resources like [Deployments](https://kubernetes.io/docs/concepts/workloads/controllers/deployment/) that will take care of creating pods for you. But if you ever need it for testing or learning purposes, you can create a pod with the following YAML definition: \n\n```yaml\napiVersion: v1\nkind: Pod\nmetadata:\n   name: nginx-pod-example\nspec:\n   containers:\n     - name: nginx\n       image: nginx\n```\n\nYou can apply it just like any other Kubernetes YAML definition, using **kubectl apply -f:** \n\n```yaml\n$ kubectl apply -f pod.yaml\npod/nginx-pod-example created\n\n$ kubectl get pod nginx-pod-example\nNAME                READY   STATUS    RESTARTS   AGE\nnginx-pod-example   1/1     Running   0          6s\n```\n\n### Pods With Multiple Containers\n\nWe mentioned pods with multiple containers already, so let's dive into that a bit more. The first thing for you to know is that pods' ability to run multiple containers is not something you should overuse. For example, it's not meant to be used to combine front-end and back-end microservices into one pod. Quite the opposite; you actually shouldn't combine multiple functional microservices into one pod. \n\nWhy does Kubernetes give you that option then? Well, it's for a different purpose. Putting more than one container into a single pod is useful for adding containers that are like assistants or helpers to your main container. A common example is log gathering containers. Their only job is to read logs from your main container and forward it (usually to some centralized log management solution). Another example is secret management containers. Their job is to securely load secrets from some secret vault and securely pass it to your main container. \n\nAs you can see, multiple containers in a pod are typically used in the main container + secondary containers configuration. We call these secondary containers \"sidecar containers.\" \n\nOf course, even though it's not usually recommended, there's nothing stopping you from combining two containers into one pod. If you have a very specific use case and you think it would make sense in your case, you can add more containers to your pod. You just need to be aware of the consequences of such an approach. The main one is that, in the case of the failure of the pod, both containers will die. \n\n### Summary\n\nAs you can see, pods are pretty straightforward resources. In most cases, you can treat them the same as containers, but they do offer extra sidecar functionality when necessary. \n\nLearned all you need to for pod basics? Read on to our advanced pod concepts article [here](https://release.com/blog/kubernetes-pods-advanced-concepts-explained)!\n",
    "code": "var Component=(()=>{var u=Object.create;var s=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var t in e)s(o,t,{get:e[t],enumerable:!0})},r=(o,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of p(e))!y.call(o,a)&&a!==t&&s(o,a,{get:()=>e[a],enumerable:!(i=h(e,a))||i.enumerable});return o};var b=(o,e,t)=>(t=o!=null?u(m(o)):{},r(e||!o||!o.__esModule?s(t,\"default\",{value:o,enumerable:!0}):t,o)),w=o=>r(s({},\"__esModule\",{value:!0}),o);var c=g((N,l)=>{l.exports=_jsx_runtime});var K={};f(K,{default:()=>x,frontmatter:()=>k});var n=b(c()),k={title:\"Kubernetes Pod: A Beginner's Guide to an Essential Resource\",summary:\"Pods are essential to any Kubernetes cluster. Learn everything about one of the most important Kubernetes resources.\",publishDate:\"Wed Aug 31 2022 16:05:07 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:4,categories:[\"kubernetes\",\"platform-engineering\"],mainImage:\"/blog-images/2266b02b751a19c98eb0df977859ad01.jpg\",imageAlt:\"a laptop on a desk\",showCTA:!0,ctaCopy:\"Looking to manage Kubernetes pods effortlessly? Try Release.com for streamlined environment creation and faster deployment cycles.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-pod-a-beginners-guide-to-an-essential-resource\",relatedPosts:[\"\"],ogImage:\"/blog-images/2266b02b751a19c98eb0df977859ad01.jpg\",excerpt:\"Pods are essential to any Kubernetes cluster. Learn everything about one of the most important Kubernetes resources.\",tags:[\"kubernetes\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function d(o){let e=Object.assign({p:\"p\",img:\"img\",h3:\"h3\",a:\"a\",span:\"span\",strong:\"strong\",pre:\"pre\",code:\"code\"},o.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`Kubernetes is a complex tool, but taking your first steps is relatively easy. This is especially true today when all major cloud providers offer easy one-click creation of Kubernetes clusters; you can have a fully working Kubernetes cluster in a matter of minutes. So, what do you do then? You'll probably deploy some pods. Pods are arguably the most important Kubernetes resources. You may have heard about them already, since deploying pods is usually one of the first things in any Kubernetes tutorial. You may have even heard \"they're kind of like containers.\" In this post, you'll learn everything you need to know about pods.\\xA0`}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/143080a00967445b7f95074d3051b41d.jpeg\",alt:\"A picture containing vegetable, green, pea, edible-pod peaDescription automatically generated\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"kubernetes-pods-101\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#kubernetes-pods-101\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Kubernetes Pods 101\"]}),`\n`,(0,n.jsx)(e.p,{children:`Before Kubernetes, everyone was talking about containers. When you wanted to deploy only one small microservice, you'd say that you needed to deploy \"one container.\" On Kubernetes, everyone talks about pods instead. So, when you only want to deploy one microservice, you'll say that you need to deploy one pod.\\xA0`}),`\n`,(0,n.jsx)(e.p,{children:\"Are pods the same as containers, then? Well, not really. A pod is the smallest deployable unit in a Kubernetes world. This means that you can't directly deploy a single container in Kubernetes. If you want one container running, you need to package it into a pod and deploy one pod. A pod can also contain more than one container. It's basically like a box for containers.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Long story short: if you mainly deploy single containers, there isn't much difference between a pod and a container. Technically, a pod encapsulates your container, but in general you can treat it similarly to a container. But pods' ability to contain more than one container is what opens doors of possibilities. We'll dive into that later in this post. But before that, let's talk about pod lifecycles.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/c49d794341cb6fa950f9c4407002f7bd.png\",alt:\"Graphical user interface, text, applicationDescription automatically generated\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"pod-lifecycles\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#pod-lifecycles\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Pod Lifecycles\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Just like many other resources Kubernetes pods can be in a pending, running, or succeeded/failed state. You can check the status of your pod by executing \",(0,n.jsx)(e.strong,{children:\"kubectl describe pod [your_pod_name]:\"}),\"\\xA0\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\n$ kubectl describe pod nginx-deployment-6595874d85-hnjzw\nName: \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 nginx-deployment-6595874d85-hnjzw\nNamespace: \\xA0 \\xA0 \\xA0default\nPriority: \\xA0 \\xA0 \\xA0 0\nNode: \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 k3s-worker3/10.133.106.222\nStart Time: \\xA0 \\xA0 Sun, 21 Aug 2022 12:24:58 +0200\nLabels: \\xA0 \\xA0 \\xA0 \\xA0 app=nginx\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0pod-template-hash=6595874d85\nAnnotations: \\xA0 \\xA0\nStatus: \\xA0 \\xA0 \\xA0 \\xA0 Pending\n(...)\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see from the snippet above, my pod is in a \",(0,n.jsx)(e.strong,{children:\"Pending\"}),\" state. So, what do these states mean?\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"pending\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#pending\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Pending\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Pending, as the name suggests, means that the pod is waiting for something. Usually, it means that Kubernetes is trying to determine where to deploy that pod. So, in normal circumstances, you'll see your pod in the pending state for the first few seconds after creation. But it may also stay in a pending state longer if, for example, all your nodes are full and Kubernetes can't find a suitable node for your pending pod. In such a case, your pod will stay in a pending state until some other pods finish and free up resources or until you add another node to your cluster.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"running\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#running\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Running\"]}),`\n`,(0,n.jsx)(e.p,{children:`Running is pretty straightforward: It's when everything is working correctly and your pod is active. There is a small caveat to this, though. If your pod consists of multiple containers, then your pod will be in the status \"running\" if at least one of its primary containers starts successfully. This means there's a chance that your pod will be in a running state even though not all containers are actually running. So, in the case of multiple containers, it's always best to double-check individual container states to be sure.\\xA0`}),`\n`,(0,n.jsxs)(e.h3,{id:\"succeededfailed\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#succeededfailed\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Succeeded/Failed\"]}),`\n`,(0,n.jsx)(e.p,{children:`Succeeded or failed is what comes after running. As you can imagine, you'll see \"succeeded\" when your pod did its job and finished as expected, and you'll see \"failed\" when your pod terminated due to some error. And again, in the case of multiple containers in one pod, you need to be aware that your pod will end up in a failed state if at least one of the containers ends up having issues.\\xA0`}),`\n`,(0,n.jsxs)(e.h3,{id:\"unknown\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#unknown\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Unknown\"]}),`\n`,(0,n.jsx)(e.p,{children:`The other phase a pod can be in is called \"unknown,\" and you probably won't see it often. A pod will be in a state unknown when Kubernetes literally doesn't know what's happening with the pod. This is usually due to networking issues between the Kubernetes control plane and the node on which the pod suppose to run. \\xA0\\xA0`}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-are-pods-used-for\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-are-pods-used-for\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What Are Pods Used for?\"]}),`\n`,(0,n.jsx)(e.p,{children:'Now, the big question: What are pods actually used for? The simple answer would be \"to run your application.\" At the end of the day, the point of running Kubernetes is to run containerized applications on it. And pods are the actual resources that make it possible. They encapsulate your containerized application and allow you to run it on your Kubernetes cluster.\\xA0'}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/05e25541f21a570d7cd3d31bfb7edba2.png\",alt:\"ApplicationDescription automatically generated with medium confidence\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"However, it's worth mentioning that usually you won't actually be deploying pods themselves. You'll be using other, higher-level Kubernetes resources like \",(0,n.jsx)(e.a,{href:\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\",children:\"Deployments\"}),\" or \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/kubernetes-daemonset-tutorial\",children:\"DaemonSets\"}),\" that will create pods for you.\\xA0\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"pods-vs-other-resources\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#pods-vs-other-resources\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Pods vs. Other Resources\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Pods are only one of many Kubernetes resource types. Most other types are directly or indirectly related to pods, because as we already said, pods are resources that will actually be running your application on the cluster. Therefore, pretty much anything that your application may need\\u2014be it a secret or storage or a load balancer\\u2014will all need to somehow relate or connect to a pod.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Kubernetes secrets can be consumed by pods. Kubernetes service resources used to expose a containerized application on your cluster to the network or internet need to reference a pod. Volumes in Kubernetes are mounted to pods. Kubernetes ConfigMaps used to store configuration files are loaded to pods. These are just a few examples, but in general, pods are usually at the center of everything that's happening on Kubernetes.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/ca65057279804f39a7884105ed6dfba7.jpeg\",alt:\"A picture containing pea, vegetable, edible-pod peaDescription automatically generated\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"how-to-create-a-pod\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#how-to-create-a-pod\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to Create A Pod\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"I'll show you how to create a pod, but be aware that normally you wouldn't create pods directly. You should use higher-level resources like \",(0,n.jsx)(e.a,{href:\"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/\",children:\"Deployments\"}),\" that will take care of creating pods for you. But if you ever need it for testing or learning purposes, you can create a pod with the following YAML definition:\\xA0\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`apiVersion: v1\nkind: Pod\nmetadata:\n  \\xA0name: nginx-pod-example\nspec:\n  \\xA0containers:\n  \\xA0 \\xA0- name: nginx\n  \\xA0 \\xA0 \\xA0image: nginx\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can apply it just like any other Kubernetes YAML definition, using \",(0,n.jsx)(e.strong,{children:\"kubectl apply -f:\"}),\"\\xA0\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`$ kubectl apply -f pod.yaml\npod/nginx-pod-example created\n\n$ kubectl get pod nginx-pod-example\nNAME \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0READY \\xA0 STATUS \\xA0 \\xA0RESTARTS \\xA0 AGE\nnginx-pod-example \\xA0 1/1 \\xA0 \\xA0 Running \\xA0 0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA06s\n`})}),`\n`,(0,n.jsxs)(e.h3,{id:\"pods-with-multiple-containers\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#pods-with-multiple-containers\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Pods With Multiple Containers\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We mentioned pods with multiple containers already, so let's dive into that a bit more. The first thing for you to know is that pods' ability to run multiple containers is not something you should overuse. For example, it's not meant to be used to combine front-end and back-end microservices into one pod. Quite the opposite; you actually shouldn't combine multiple functional microservices into one pod.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:\"Why does Kubernetes give you that option then? Well, it's for a different purpose. Putting more than one container into a single pod is useful for adding containers that are like assistants or helpers to your main container. A common example is log gathering containers. Their only job is to read logs from your main container and forward it (usually to some centralized log management solution). Another example is secret management containers. Their job is to securely load secrets from some secret vault and securely pass it to your main container.\\xA0\"}),`\n`,(0,n.jsx)(e.p,{children:'As you can see, multiple containers in a pod are typically used in the main container + secondary containers configuration. We call these secondary containers \"sidecar containers.\"\\xA0'}),`\n`,(0,n.jsx)(e.p,{children:\"Of course, even though it's not usually recommended, there's nothing stopping you from combining two containers into one pod. If you have a very specific use case and you think it would make sense in your case, you can add more containers to your pod. You just need to be aware of the consequences of such an approach. The main one is that, in the case of the failure of the pod, both containers will die.\\xA0\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"summary\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#summary\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Summary\"]}),`\n`,(0,n.jsx)(e.p,{children:\"As you can see, pods are pretty straightforward resources. In most cases, you can treat them the same as containers, but they do offer extra sidecar functionality when necessary.\\xA0\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Learned all you need to for pod basics? Read on to our advanced pod concepts article \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/kubernetes-pods-advanced-concepts-explained\",children:\"here\"}),\"!\"]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,n.jsx)(e,Object.assign({},o,{children:(0,n.jsx)(d,o)})):d(o)}var x=v;return w(K);})();\n;return Component;"
  },
  "_id": "blog/posts/kubernetes-pod-a-beginners-guide-to-an-essential-resource.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/kubernetes-pod-a-beginners-guide-to-an-essential-resource.mdx",
    "sourceFileName": "kubernetes-pod-a-beginners-guide-to-an-essential-resource.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/kubernetes-pod-a-beginners-guide-to-an-essential-resource"
  },
  "type": "BlogPost",
  "computedSlug": "kubernetes-pod-a-beginners-guide-to-an-essential-resource"
}