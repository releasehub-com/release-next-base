{
  "title": "Using Docker Environment Variables in Compose",
  "summary": "This post will explain what Docker Compose variables are, their use, and the risks involved with environment variables.",
  "publishDate": "Mon Jan 30 2023 08:31:35 GMT+0000 (Coordinated Universal Time)",
  "author": "mercy-kibet",
  "readingTime": 6,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "",
  "imageAlt": "",
  "showCTA": true,
  "ctaCopy": "Unlock streamlined environment management with Release.com for secure Docker Compose variables handling and efficient application configuration.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=using-docker-environment-variables-in-compose",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog/default-og-image.png",
  "excerpt": "This post will explain what Docker Compose variables are, their use, and the risks involved with environment variables.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nAs a developer, you probably use Docker to run your application efficiently. Containerizing helps you avoid the \"but it works on my computer\" problem. You might even use Docker Compose to manage different services that run on different containers.\n\nSome services managed by Docker Compose, like backend services, may have sensitive information that should be kept secret. This is where you need to use environment variables to specify your configuration. But what are Docker environment variables in Compose?\n\nThis post will explain what Docker Compose variables are, how you can use them in Compose, and the risks associated with putting secrets in an environment variable.\n\n![](/blog-images/9c896058ea675ccb883dc3596b6c371d.png)\n\n### What is a Docker Environment Variable?\n\nEnvironment variables are used in programs to store values that the program checks at runtime. This means that the value is not stored in code but is instead stored in a separate file.\n\nA Docker environment variable is a variable that's passed to a Docker container when it's created. You can use environment variables to configure your application. Also, you can use them to store sensitive information like keys and passwords.\n\nYou can set environment variables in several ways, such as using the **ENV** instruction in a Dockerfile, using the **\\-e** flag when running the **docker run** command, or using environment files.\n\nWhen a container is created, the environment variables are passed to it. You can access them within the container. For example, you can access environment variables in a Linux-based container using the **$** notation like **$APP_ENV** or echo $APP_ENV.\n\nUsing Docker environment variables keeps your application configuration flexible.\n\n### What is Docker Compose?\n\n[Docker Compose](https://docs.docker.com/compose/) is a tool that spins up instances of your Dockerfile where your Dockerfile is the blueprint of your application. It helps you manage and configure your app's specific requirements. It also gives you the flexibility to define different services your app needs. For example, you may have different Dockerfiles for different services, such as the frontend and the backend.\n\nBy using Docker Compose, you can use one file to configure the relationship between the two services. This single file gives you the ability to use only a single command to build your entire application.\n\n![](/blog-images/9e2d3acac8f698700a5019ce789f41ca.png)\n\n### Can I use Environment Variables in a Docker Compose File?\n\nYes, you can use environment variables in a Docker Compose file.\n\nDocker and Compose work together to provide a way to manage and run containers. When using Compose, you define your application's services, networks, and volumes in a single **docker-compose.yml** file.\n\nUse environment variables to set specific options in the Compose file, such as image name, command, ports, volumes, and links. You can set these values in different ways, such as by using the **environment** key in the compose file, by using the **\\-e** flag when running the Docker run command, or by using environment files.\n\nWhen you run the **docker-compose up** command, Compose reads the **docker-compose.yml** file and creates the specified services, networks, and volumes. As part of this process, Compose also sets the environment variables for each service as specified in the Compose file.\n\nUsing environment variables in a Compose file can make your application more flexible and configurable. You can use different environment variables to set different values for different stages of your application, such as development, staging, and production.\n\n### How to use Docker Environment Variables in Compose\n\nYou can set and pass Docker environment variables in several ways in Compose. Some of these ways include the following:\n**Environment Key:** You can configure a container by setting environment variables in the Compose file. If you want to use your app in production mode, you can set the value of the APP_ENV variable like so:\n\n`services:   web:     environment:       - APP_ENV=production`\n\n**\\-e Flag:** You can also set environment variables when running a container by using the -e flag. For example, you can set the variable APP_ENV with a value of production when running a container like this:\n\n`docker compose run -e APP_ENV=production myimage`\n\n**Environment Files:** You can also use environment files to set environment variables. This can be useful when you have multiple environment variables that you want to set or when you want to keep your environment variables separate from your Compose file.\n\n`services:   web:     env_file:       - Docker/web/web.env`\n\nTo use environment files, you can pass the --env-file flag when running the Compose command: docker-compose --env-file /path/toenv.env up. This will override the default path.\n**.env:** The .env file is a simple text file containing key-value pairs, with one pair per line. The .env file should be in the same directory as the **docker-compose.yml** file. You don't need to pass any flag when running the Compose command. Compose will automatically pick the .env file. If you defined a version to your web app in your .env file, this is how you'll use it in Compose:\n\n`services:   web:     image: \"webapp:${VERSION}\"`\n\nAlways remember that environment variables passed to a container are only visible to the processes running in that container. If you need to share environment variables between containers, you can use a tool such as Docker Compose's environment key or a third-party tool like a key-value store.\n\n### How to Substitute Environment Variables\n\nUsing environment variables in Compose allows substituting values at runtime rather than hard coding them in the Compose file. This makes it easy to switch between different [environments](https://release.com/blog/environments-as-a-service-eaas-top-3-benefits), such as development, staging, and production, without modifying the Compose file.\n\nOne way to manage this is by using multiple environment files, each with its own values. For example, you can have a **development.env** file with development-specific values and a **production.env** file with production-specific values.\n\nWhen running the Compose command, you can specify which environment file to use with the **\\-f** flag. For example, docker-compose -f docker-compose.yml -f development.env will start the containers with the values specified in the **development.env** file.\n\nThis approach allows you to keep your environment-specific values separate from your Compose file, making it easy to switch between environments and maintain different configurations for different application stages.\n\n### The Security Risks of Putting Secrets in Environment Variables\n\nThere are risks associated with putting secrets such as passwords and API keys in environment variables. Here are a few examples:\n\n- Anyone with access to the host system can access environment variables. If attackers gain access to the host system, they might access any secrets stored in environment variables.\n- Any process running on the host system can access environment variables. Thus, an attacker can run a malicious process to access the sensitive information stored in the environment variable and gain control of your application.\n- If an environment variable contains a secret, it might be logged or displayed in plain text, allowing anyone with access to the logs or display to see the secrets.\n- Suppose a developer pushes code to a public repository with a file containing secret environment variables. In that case, the secret might be exposed to anyone with access to the repository.\n- To mitigate these risks, it's important to be careful when using environment variables to store secrets and to use other secure methods, such as encrypted secrets stores or secret management tools, whenever possible.\n\n![](/blog-images/905a0239a88ecb381cd171d5404bd2e5.png)\n\n### Conclusion\n\nDocker environment variables are useful for configuring and managing containerized applications with Compose. You can use them to pass information to the containers at runtime and to override the default values defined in the Compose file. Be careful when handling sensitive information as environment variables are stored in plain text and visible to any process inside the container. Having looked at how you can use environment variables in Compose, you should also look at the [benefits of having environments as a service.](https://release.com/blog/environments-as-a-service-eaas-top-3-benefits)\n\n_This post was written by Mercy Kibet._ [_Mercy_](https://hashnode.com/@eiMJay) _is a full-stack developer with a knack for learning and writing about new and intriguing tech stacks._\n",
    "code": "var Component=(()=>{var m=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,v=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),g=(i,e)=>{for(var o in e)a(i,o,{get:e[o],enumerable:!0})},r=(i,e,o,t)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!v.call(i,s)&&s!==o&&a(i,s,{get:()=>e[s],enumerable:!(t=d(e,s))||t.enumerable});return i};var b=(i,e,o)=>(o=i!=null?m(u(i)):{},r(e||!i||!i.__esModule?a(o,\"default\",{value:i,enumerable:!0}):o,i)),y=i=>r(a({},\"__esModule\",{value:!0}),i);var l=f((T,c)=>{c.exports=_jsx_runtime});var D={};g(D,{default:()=>C,frontmatter:()=>k});var n=b(l()),k={title:\"Using Docker Environment Variables in Compose\",summary:\"This post will explain what Docker Compose variables are, their use, and the risks involved with environment variables.\",publishDate:\"Mon Jan 30 2023 08:31:35 GMT+0000 (Coordinated Universal Time)\",author:\"mercy-kibet\",readingTime:6,categories:[\"platform-engineering\",\"product\"],mainImage:\"\",imageAlt:\"\",showCTA:!0,ctaCopy:\"Unlock streamlined environment management with Release.com for secure Docker Compose variables handling and efficient application configuration.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=using-docker-environment-variables-in-compose\",relatedPosts:[\"\"],ogImage:\"/blog/default-og-image.png\",excerpt:\"This post will explain what Docker Compose variables are, their use, and the risks involved with environment variables.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function h(i){let e=Object.assign({p:\"p\",img:\"img\",h3:\"h3\",a:\"a\",span:\"span\",strong:\"strong\",code:\"code\",ul:\"ul\",li:\"li\",em:\"em\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:'As a developer, you probably use Docker to run your application efficiently. Containerizing helps you avoid the \"but it works on my computer\" problem. You might even use Docker Compose to manage different services that run on different containers.'}),`\n`,(0,n.jsx)(e.p,{children:\"Some services managed by Docker Compose, like backend services, may have sensitive information that should be kept secret. This is where you need to use environment variables to specify your configuration. But what are Docker environment variables in Compose?\"}),`\n`,(0,n.jsx)(e.p,{children:\"This post will explain what Docker Compose variables are, how you can use them in Compose, and the risks associated with putting secrets in an environment variable.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/9c896058ea675ccb883dc3596b6c371d.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-a-docker-environment-variable\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-a-docker-environment-variable\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is a Docker Environment Variable?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Environment variables are used in programs to store values that the program checks at runtime. This means that the value is not stored in code but is instead stored in a separate file.\"}),`\n`,(0,n.jsx)(e.p,{children:\"A Docker environment variable is a variable that's passed to a Docker container when it's created. You can use environment variables to configure your application. Also, you can use them to store sensitive information like keys and passwords.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can set environment variables in several ways, such as using the \",(0,n.jsx)(e.strong,{children:\"ENV\"}),\" instruction in a Dockerfile, using the \",(0,n.jsx)(e.strong,{children:\"-e\"}),\" flag when running the \",(0,n.jsx)(e.strong,{children:\"docker run\"}),\" command, or using environment files.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When a container is created, the environment variables are passed to it. You can access them within the container. For example, you can access environment variables in a Linux-based container using the \",(0,n.jsx)(e.strong,{children:\"$\"}),\" notation like \",(0,n.jsx)(e.strong,{children:\"$APP_ENV\"}),\" or echo $APP_ENV.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Using Docker environment variables keeps your application configuration flexible.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"what-is-docker-compose\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#what-is-docker-compose\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"What is Docker Compose?\"]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.a,{href:\"https://docs.docker.com/compose/\",children:\"Docker Compose\"}),\" is a tool that spins up instances of your Dockerfile where your Dockerfile is the blueprint of your application. It helps you manage and configure your app's specific requirements. It also gives you the flexibility to define different services your app needs. For example, you may have different Dockerfiles for different services, such as the frontend and the backend.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"By using Docker Compose, you can use one file to configure the relationship between the two services. This single file gives you the ability to use only a single command to build your entire application.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/9e2d3acac8f698700a5019ce789f41ca.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"can-i-use-environment-variables-in-a-docker-compose-file\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#can-i-use-environment-variables-in-a-docker-compose-file\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Can I use Environment Variables in a Docker Compose File?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Yes, you can use environment variables in a Docker Compose file.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Docker and Compose work together to provide a way to manage and run containers. When using Compose, you define your application's services, networks, and volumes in a single \",(0,n.jsx)(e.strong,{children:\"docker-compose.yml\"}),\" file.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Use environment variables to set specific options in the Compose file, such as image name, command, ports, volumes, and links. You can set these values in different ways, such as by using the \",(0,n.jsx)(e.strong,{children:\"environment\"}),\" key in the compose file, by using the \",(0,n.jsx)(e.strong,{children:\"-e\"}),\" flag when running the Docker run command, or by using environment files.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When you run the \",(0,n.jsx)(e.strong,{children:\"docker-compose up\"}),\" command, Compose reads the \",(0,n.jsx)(e.strong,{children:\"docker-compose.yml\"}),\" file and creates the specified services, networks, and volumes. As part of this process, Compose also sets the environment variables for each service as specified in the Compose file.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Using environment variables in a Compose file can make your application more flexible and configurable. You can use different environment variables to set different values for different stages of your application, such as development, staging, and production.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"how-to-use-docker-environment-variables-in-compose\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#how-to-use-docker-environment-variables-in-compose\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to use Docker Environment Variables in Compose\"]}),`\n`,(0,n.jsxs)(e.p,{children:[`You can set and pass Docker environment variables in several ways in Compose. Some of these ways include the following:\n`,(0,n.jsx)(e.strong,{children:\"Environment Key:\"}),\" You can configure a container by setting environment variables in the Compose file. If you want to use your app in production mode, you can set the value of the APP_ENV variable like so:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"services:  \\xA0web:  \\xA0 \\xA0environment:  \\xA0 \\xA0 \\xA0- APP_ENV=production\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"-e Flag:\"}),\" You can also set environment variables when running a container by using the -e flag. For example, you can set the variable APP_ENV with a value of production when running a container like this:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"docker compose run -e APP_ENV=production myimage\"})}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.strong,{children:\"Environment Files:\"}),\" You can also use environment files to set environment variables. This can be useful when you have multiple environment variables that you want to set or when you want to keep your environment variables separate from your Compose file.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:\"services:  \\xA0web:  \\xA0 \\xA0env_file:  \\xA0 \\xA0 \\xA0- Docker/web/web.env\"})}),`\n`,(0,n.jsxs)(e.p,{children:[`To use environment files, you can pass the --env-file flag when running the Compose command: docker-compose --env-file /path/toenv.env up. This will override the default path.\n`,(0,n.jsx)(e.strong,{children:\".env:\"}),\" The .env file is a simple text file containing key-value pairs, with one pair per line. The .env file should be in the same directory as the \",(0,n.jsx)(e.strong,{children:\"docker-compose.yml\"}),\" file. You don't need to pass any flag when running the Compose command. Compose will automatically pick the .env file. If you defined a version to your web app in your .env file, this is how you'll use it in Compose:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.code,{children:'services:  \\xA0web:  \\xA0 \\xA0image: \"webapp:${VERSION}\"'})}),`\n`,(0,n.jsx)(e.p,{children:\"Always remember that environment variables passed to a container are only visible to the processes running in that container. If you need to share environment variables between containers, you can use a tool such as Docker Compose's environment key or a third-party tool like a key-value store.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"how-to-substitute-environment-variables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#how-to-substitute-environment-variables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to Substitute Environment Variables\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Using environment variables in Compose allows substituting values at runtime rather than hard coding them in the Compose file. This makes it easy to switch between different \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/environments-as-a-service-eaas-top-3-benefits\",children:\"environments\"}),\", such as development, staging, and production, without modifying the Compose file.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"One way to manage this is by using multiple environment files, each with its own values. For example, you can have a \",(0,n.jsx)(e.strong,{children:\"development.env\"}),\" file with development-specific values and a \",(0,n.jsx)(e.strong,{children:\"production.env\"}),\" file with production-specific values.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"When running the Compose command, you can specify which environment file to use with the \",(0,n.jsx)(e.strong,{children:\"-f\"}),\" flag. For example, docker-compose -f docker-compose.yml -f development.env will start the containers with the values specified in the \",(0,n.jsx)(e.strong,{children:\"development.env\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"This approach allows you to keep your environment-specific values separate from your Compose file, making it easy to switch between environments and maintain different configurations for different application stages.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-security-risks-of-putting-secrets-in-environment-variables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-security-risks-of-putting-secrets-in-environment-variables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Security Risks of Putting Secrets in Environment Variables\"]}),`\n`,(0,n.jsx)(e.p,{children:\"There are risks associated with putting secrets such as passwords and API keys in environment variables. Here are a few examples:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"Anyone with access to the host system can access environment variables. If attackers gain access to the host system, they might access any secrets stored in environment variables.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Any process running on the host system can access environment variables. Thus, an attacker can run a malicious process to access the sensitive information stored in the environment variable and gain control of your application.\"}),`\n`,(0,n.jsx)(e.li,{children:\"If an environment variable contains a secret, it might be logged or displayed in plain text, allowing anyone with access to the logs or display to see the secrets.\"}),`\n`,(0,n.jsx)(e.li,{children:\"Suppose a developer pushes code to a public repository with a file containing secret environment variables. In that case, the secret might be exposed to anyone with access to the repository.\"}),`\n`,(0,n.jsx)(e.li,{children:\"To mitigate these risks, it's important to be careful when using environment variables to store secrets and to use other secure methods, such as encrypted secrets stores or secret management tools, whenever possible.\"}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/905a0239a88ecb381cd171d5404bd2e5.png\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"conclusion\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#conclusion\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Docker environment variables are useful for configuring and managing containerized applications with Compose. You can use them to pass information to the containers at runtime and to override the default values defined in the Compose file. Be careful when handling sensitive information as environment variables are stored in plain text and visible to any process inside the container. Having looked at how you can use environment variables in Compose, you should also look at the \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/environments-as-a-service-eaas-top-3-benefits\",children:\"benefits of having environments as a service.\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[(0,n.jsx)(e.em,{children:\"This post was written by Mercy Kibet.\"}),\" \",(0,n.jsx)(e.a,{href:\"https://hashnode.com/@eiMJay\",children:(0,n.jsx)(e.em,{children:\"Mercy\"})}),\" \",(0,n.jsx)(e.em,{children:\"is a full-stack developer with a knack for learning and writing about new and intriguing tech stacks.\"})]})]})}function w(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(h,i)})):h(i)}var C=w;return y(D);})();\n;return Component;"
  },
  "_id": "blog/posts/using-docker-environment-variables-in-compose.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/using-docker-environment-variables-in-compose.mdx",
    "sourceFileName": "using-docker-environment-variables-in-compose.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/using-docker-environment-variables-in-compose"
  },
  "type": "BlogPost",
  "computedSlug": "using-docker-environment-variables-in-compose"
}