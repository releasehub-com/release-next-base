{
  "title": "Three ways you're doing modern web development wrong",
  "summary": "Ensure that your team is using modern development practices with these 3 best practices",
  "publishDate": "Fri Dec 16 2022 22:05:19 GMT+0000 (Coordinated Universal Time)",
  "author": "nick-busey",
  "readingTime": 3,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/f6d54e0d3ec06d682bc6894ce90e2a79.jpg",
  "imageAlt": "a computer screen with a keyboard",
  "showCTA": true,
  "ctaCopy": "Improve development speed and quality by using Release for ephemeral environments and fresh production-like data.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=three-ways-youre-doing-modern-web-development-wrong",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/f6d54e0d3ec06d682bc6894ce90e2a79.jpg",
  "excerpt": "Ensure that your team is using modern development practices with these 3 best practices",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nModern web development has come a long way in the past 20 years, but many companies seem like they're still stuck in the late 90s with the way they do development.\n\nEnsuring that your team is using modern development practices is beneficial in many ways, including easier hiring and onboarding, faster feature development, reduced bugs, and increased developer velocity. Not to mention keeping your developers happy and “in the zone”. Make things easier on your developers, and they will be able to complete work faster, at a higher quality, and be happier while doing it. These problems may not be obvious at first, but as you scale, they quickly become more and more painful. Here are three common mistakes you are probably making right now.\n\n### Mistake #1: Working In A Fixed Number Of Environments\n\nYour developer has finally written code, and now wants QA to review and test it. QA should not be testing on their local machines, they should be testing in something that more closely resembles a production environment. This leaves only cloud or on-premises environments as viable options for testing.\n\nIf you haven't done the undifferentiated heavy lifting of setting up an in-house auto-scaling environment solution, then you are likely stuck with a fixed number of environments for developers and QA teams to share.\n\nThis can slow the entire team down, and the added overhead of coordinating who is using what environments can be painful. (\"Is anyone using dev3?\" Sound familiar?)\n\n#### Improvement #1: Get Ephemeral\n\nUse an EaaS platform like Release. Creating an internal EaaS system is likely not your business’s core competency, and isn’t going to differentiate you in your industry. Just like you probably shouldn’t try and roll your own email delivery system, you are better off focusing on providing your customers value through features and bug fixes, rather than reinventing the wheel on building something that has already been built in a more fully featured manner than what is likely to come from an internal tool.\n\n### Mistake #2: Not Using Production-Like Data\n\nSeeding your dev environment with a predefined set of records is a very common way to do things, and also a very common cause of uncaught bugs making their way into production.\n\nThere is simply no way that developers will be able to maintain a set of database seed files that will accurately represent the way your system is used in the real world.\n\nDeveloper-defined seed files tend to stay on the happy path, while the sad path, where data are incomplete, incorrect, or conflicting, often remains untested.\n\n#### Improvement #2: Fresh Data Every Time\n\nUse a system that provides your developers with access to a fresh copy of production-like data to use every time they start work on a new branch. With Release’s Instant Datasets feature, you can get this going on day one.\n\nIf you have sensitive data in your production database such as PII, you can use a tool like tonic.ai to fuzz or obfuscate sensitive data before using Release’s Instant Dataset feature, allowing every environment to have access to real, fresh, legally compliant data.\n\n### Mistake #3: Running Everything Locally\n\nWhile it is good to have the ability to run locally when needed (example: working without internet access), it tends to slow down actual development in modern stacks.\n\nRunning 10 different services when you're only working on or trying debug a single one of them, is an unnecessary drain on the battery, extra load on the developer’s machine, and can lead to what I refer to as \"hovercraft mode\", when the laptop fans spin so fast it sounds like your laptop is about to take off.\n\nIn addition to all of that, onboarding tends to be much slower due to having to get every new hire’s development machine setup exactly right with all the dependencies required across multiple different tech stacks.\n\n#### Improvement #3: Look To The Cloud\n\nInstead of relying on local dev for everything, you could utilize a cloud based development model. Release Remote Development Environments allow developers to work in the exact type of environment their code will eventually be executed in, which can reduce bugs that come from environment and configuration problems. Beyond that a hybrid approach can offer the best of both worlds and bridge the gap between fully committing to either method. For example, you can run only the frontend locally, while the rest of the stack runs in a shared cloud environment.\n\n### Time to Modernize\n\nTo avoid these issues and improve your team's development practices, consider investing in modern development tools and processes, such as [Remote Development Environments](https://release.com/blog/remote-development-environments) and using [Production Data for testing](https://docs.releasehub.com/reference-documentation/instant-datasets-aws). These changes may require some initial effort and investment, but they will pay off in the long run by making your team more efficient, effective, and happy.\n",
    "code": "var Component=(()=>{var h=Object.create;var i=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var o in e)i(t,o,{get:e[o],enumerable:!0})},s=(t,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!y.call(t,a)&&a!==o&&i(t,a,{get:()=>e[a],enumerable:!(r=m(e,a))||r.enumerable});return t};var v=(t,e,o)=>(o=t!=null?h(p(t)):{},s(e||!t||!t.__esModule?i(o,\"default\",{value:t,enumerable:!0}):o,t)),b=t=>s(i({},\"__esModule\",{value:!0}),t);var d=g((T,l)=>{l.exports=_jsx_runtime});var I={};f(I,{default:()=>x,frontmatter:()=>w});var n=v(d()),w={title:\"Three ways you're doing modern web development wrong\",summary:\"Ensure that your team is using modern development practices with these 3 best practices\",publishDate:\"Fri Dec 16 2022 22:05:19 GMT+0000 (Coordinated Universal Time)\",author:\"nick-busey\",readingTime:3,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/f6d54e0d3ec06d682bc6894ce90e2a79.jpg\",imageAlt:\"a computer screen with a keyboard\",showCTA:!0,ctaCopy:\"Improve development speed and quality by using Release for ephemeral environments and fresh production-like data.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=three-ways-youre-doing-modern-web-development-wrong\",relatedPosts:[\"\"],ogImage:\"/blog-images/f6d54e0d3ec06d682bc6894ce90e2a79.jpg\",excerpt:\"Ensure that your team is using modern development practices with these 3 best practices\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function c(t){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",h4:\"h4\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Modern web development has come a long way in the past 20 years, but many companies seem like they're still stuck in the late 90s with the way they do development.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Ensuring that your team is using modern development practices is beneficial in many ways, including easier hiring and onboarding, faster feature development, reduced bugs, and increased developer velocity. Not to mention keeping your developers happy and \\u201Cin the zone\\u201D. Make things easier on your developers, and they will be able to complete work faster, at a higher quality, and be happier while doing it. These problems may not be obvious at first, but as you scale, they quickly become more and more painful. Here are three common mistakes you are probably making right now.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"mistake-1-working-in-a-fixed-number-of-environments\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#mistake-1-working-in-a-fixed-number-of-environments\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Mistake #1: Working In A Fixed Number Of Environments\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Your developer has finally written code, and now wants QA to review and test it. QA should not be testing on their local machines, they should be testing in something that more closely resembles a production environment. This leaves only cloud or on-premises environments as viable options for testing.\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you haven't done the undifferentiated heavy lifting of setting up an in-house auto-scaling environment solution, then you are likely stuck with a fixed number of environments for developers and QA teams to share.\"}),`\n`,(0,n.jsx)(e.p,{children:'This can slow the entire team down, and the added overhead of coordinating who is using what environments can be painful. (\"Is anyone using dev3?\" Sound familiar?)'}),`\n`,(0,n.jsxs)(e.h4,{id:\"improvement-1-get-ephemeral\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#improvement-1-get-ephemeral\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Improvement #1: Get Ephemeral\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Use an EaaS platform like Release. Creating an internal EaaS system is likely not your business\\u2019s core competency, and isn\\u2019t going to differentiate you in your industry. Just like you probably shouldn\\u2019t try and roll your own email delivery system, you are better off focusing on providing your customers value through features and bug fixes, rather than reinventing the wheel on building something that has already been built in a more fully featured manner than what is likely to come from an internal tool.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"mistake-2-not-using-production-like-data\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#mistake-2-not-using-production-like-data\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Mistake #2: Not Using Production-Like Data\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Seeding your dev environment with a predefined set of records is a very common way to do things, and also a very common cause of uncaught bugs making their way into production.\"}),`\n`,(0,n.jsx)(e.p,{children:\"There is simply no way that developers will be able to maintain a set of database seed files that will accurately represent the way your system is used in the real world.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Developer-defined seed files tend to stay on the happy path, while the sad path, where data are incomplete, incorrect, or conflicting, often remains untested.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"improvement-2-fresh-data-every-time\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#improvement-2-fresh-data-every-time\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Improvement #2: Fresh Data Every Time\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Use a system that provides your developers with access to a fresh copy of production-like data to use every time they start work on a new branch. With Release\\u2019s Instant Datasets feature, you can get this going on day one.\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you have sensitive data in your production database such as PII, you can use a tool like tonic.ai to fuzz or obfuscate sensitive data before using Release\\u2019s Instant Dataset feature, allowing every environment to have access to real, fresh, legally compliant data.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"mistake-3-running-everything-locally\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#mistake-3-running-everything-locally\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Mistake #3: Running Everything Locally\"]}),`\n`,(0,n.jsx)(e.p,{children:\"While it is good to have the ability to run locally when needed (example: working without internet access), it tends to slow down actual development in modern stacks.\"}),`\n`,(0,n.jsx)(e.p,{children:`Running 10 different services when you're only working on or trying debug a single one of them, is an unnecessary drain on the battery, extra load on the developer\\u2019s machine, and can lead to what I refer to as \"hovercraft mode\", when the laptop fans spin so fast it sounds like your laptop is about to take off.`}),`\n`,(0,n.jsx)(e.p,{children:\"In addition to all of that, onboarding tends to be much slower due to having to get every new hire\\u2019s development machine setup exactly right with all the dependencies required across multiple different tech stacks.\"}),`\n`,(0,n.jsxs)(e.h4,{id:\"improvement-3-look-to-the-cloud\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#improvement-3-look-to-the-cloud\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Improvement #3: Look To The Cloud\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Instead of relying on local dev for everything, you could utilize a cloud based development model. Release Remote Development Environments allow developers to work in the exact type of environment their code will eventually be executed in, which can reduce bugs that come from environment and configuration problems. Beyond that a hybrid approach can offer the best of both worlds and bridge the gap between fully committing to either method. For example, you can run only the frontend locally, while the rest of the stack runs in a shared cloud environment.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"time-to-modernize\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#time-to-modernize\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Time to Modernize\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To avoid these issues and improve your team's development practices, consider investing in modern development tools and processes, such as \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/remote-development-environments\",children:\"Remote Development Environments\"}),\" and using \",(0,n.jsx)(e.a,{href:\"https://docs.releasehub.com/reference-documentation/instant-datasets-aws\",children:\"Production Data for testing\"}),\". These changes may require some initial effort and investment, but they will pay off in the long run by making your team more efficient, effective, and happy.\"]})]})}function k(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(c,t)})):c(t)}var x=k;return b(I);})();\n;return Component;"
  },
  "_id": "blog/posts/three-ways-youre-doing-modern-web-development-wrong.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/three-ways-youre-doing-modern-web-development-wrong.mdx",
    "sourceFileName": "three-ways-youre-doing-modern-web-development-wrong.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/three-ways-youre-doing-modern-web-development-wrong"
  },
  "type": "BlogPost",
  "computedSlug": "three-ways-youre-doing-modern-web-development-wrong"
}