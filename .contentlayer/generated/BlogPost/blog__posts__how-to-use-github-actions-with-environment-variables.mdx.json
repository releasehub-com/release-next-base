{
  "title": "How to Use GitHub Actions With Environment Variables",
  "summary": "We'll cover GitHub Actions & show you how to use it to automate your deployment workflow & save secrets",
  "publishDate": "Thu Aug 18 2022 17:07:54 GMT+0000 (Coordinated Universal Time)",
  "author": "ashley-penney",
  "readingTime": 8,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/f1faa433780d4d232b9bb49a72ccb7bf.jpg",
  "imageAlt": "How to Use GitHub Actions With Environment Variables",
  "showCTA": true,
  "ctaCopy": "Learn how Release.com's ephemeral environments automate deployment workflows, simplifying setup of environment variables and enabling seamless collaboration.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-use-github-actions-with-environment-variables",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/f1faa433780d4d232b9bb49a72ccb7bf.jpg",
  "excerpt": "We'll cover GitHub Actions & show you how to use it to automate your deployment workflow & save secrets",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nIn this post we'll cover GitHub Actions. We'll show you how to use it to automate your deployment workflow and how to use environment variables to save secrets.\n\nWe will deploy a simple Nest app using GitHub Actions. We'll start with a simple NestJS app. You don't need to know NestJS to get started, and you can use your own app if you wish. The starting point of the project can be taken from [here](https://drive.google.com/file/d/1CJFwKAXWL8lZ0ujf3YPpG5dpdOLQsHpF/view?usp=sharing).\n\n### GitHub Actions Environment Variables\n\nWe're going to store Docker secrets later in the post using secret variables from GitHub Actions. They can be easily found in the Settings tab and will help you during the automation process.\n\n### The Tasks\n\nLike in any production app, we'll create a feature branch from the main branch. After the changes are made, we'll create a pull request to the main branch.\n\nBefore merging, you need to ensure that this feature branch will not cause any breaking changes. For each pull request, you want to ensure that the build is successful and that all tests passed.\n\nIf you don’t use GitHub Actions, this will require a manual process. Suppose you’re happy with your pull request and want to merge it into the main branch. The next set of tasks is to build Docker image and push it into Docker hub. You can also automate these manual tasks with GitHub Actions.\n\n### The Setup\n\nYou need to extract the **Nest-App** from the link provided earlier in your local system and run **npm install** in it.\n\n![](/blog-images/61de738636b74a4216e630ff1024635f.jpeg)\n\nAfter that, create a new repository in GitHub and push your project.\n\n![](/blog-images/76ded41a7c03b2f5afb5abb7d123c616.jpeg)\n\nClick on the Actions tab. There you will find a lot of snippets for different projects.\n\n![](/blog-images/b9ec68025691256ab9cba2614a385b74.jpeg)\n\nSearch for **Node** and then click on the Configure button of a Node.js project.\n\n![](/blog-images/45d3290c126861a09d429bc2582bd944.jpeg)\n\nCopy all the code from this page, but don't save it. You are going to create it from VS Code in the next step.\n\n![](/blog-images/b82f17f22e01ffa6472fdc081c3495cc.jpeg)\n\nBack in your app, you need to create a **.github** folder and a **workflows** folder inside it. So inside it, create an **integrate.yml** file and paste the code from earlier. The .yml file basically says that on push or pull to the main branch, you need to run jobs. The first job name is **build**, and it runs-on an Ubuntu machine provided by GitHub. It also specifies the node version it will run.\n\nIn the steps below, you are using GitHub's Checkout Actions to check out into the build agent's directory. After that, you are setting up Node in that directory.\n\nLastly, the main command of **npm i** and **npm run build** are run.\n\n![](/blog-images/7aa0ea5d28b8b100aee5be0f64b6f28d.jpeg)\n\nYou will also create the workflow for your tests. Below, you are creating another job called **unit-tests** and doing the same setup again.\n\n![](/blog-images/98b73339a487e1bb24cb6bd6194ac428.jpeg)\n\n### The Failed Run\n\nNow create and push a remote branch that you'll use for your changes.\n\n![](/blog-images/fa1f72626c6431c4352d9f1b0ddec471.jpeg)\n\nBack in GitHub, you'll see a compare and pull request button that you need to click.\n\n![](/blog-images/dd9fcd4428c1e06c04a7ca4a3646b869.jpeg)\n\nIn the next screen, you just need to write a description and click the **Create pull request** button.\n\n![](/blog-images/98b160ae8870934a7cd483ca622baaab.jpeg)\n\nThe next screen says that a new branch got created called **new-actions**. Click on the **Actions** tab.\n\n![](/blog-images/7f19256ca772c9d9678d56bc8d3d0936.jpeg)\n\nOn the Actions page, you can see that your action failed. You need to click on the same to know the exact issue.\n\n![](/blog-images/63e3309115da67b74b5a6d779f9eab51.jpeg)\n\nThe next page shows that there is an issue in **unit-tests** in the **integrate.yml** file.\n\n![](/blog-images/a9829e0056013f757f67c1f13d22e684.jpeg)\n\n### The Successful Run\n\nUpon inspection, it's clear that there is no space in the unit tests. So, we're adding the space and again pushing the changes to new-actions.\n\n![](/blog-images/156ce8c10431fe1426a009fab5432af5.jpeg)\n\nBack in GitHub, you can see that a new action has been running.\n\n![](/blog-images/bb891d268168446141db309c475e2881.jpeg)\n\nThis time the build completed successfully.\n\nAlso notice that the build and unit-tests jobs were run on three versions of Node.js.\n\n![](/blog-images/26b26e641ffb845367e548b35dc7ba73.jpeg)\n\nNow you can Merge this pull request and will get a confirmation.\n\n![](/blog-images/292e6e4263ee046fa40b786a031f6e5e.jpeg)\n\n### The Docker Setup\n\nYou'll need to go to [https://hub.docker.com/](https://hub.docker.com/) and register if you don't have an account.\n\n![](/blog-images/6b410e32beebed28daf6bea9d6490921.jpeg)\n\nOnce you're logged in, click on the **Create Repository** button.\n\n![](/blog-images/a99532a999716f3bde75b620aa354502.jpeg)\n\nOn the next page, you need to give the app a name and a description. Then click the **Create** button.\n\n![](/blog-images/85961c4d417b3e66423920d66cde69f9.jpeg)\n\nOn the next page, you should see the success message. Then click on the user profile in the top-right corner and then click the **Account Settings** link.\n\n![](/blog-images/8ac4ab239e5e298f18683a64a93ba1c4.jpeg)\n\nOn the next screen, click on the **Security** tab and then the **New Access Token** button.\n\n![](/blog-images/ade3e8ac580bfad73508eae59e679b29.jpeg)\n\nA pop-up will open, and you need to give a description and permissions. After that, click the **Generate** button.\n\n![](/blog-images/52a843287e5ae1987ee99e9a7033ceed.jpeg)\n\nOn the next screen, you will get your username and the token. You'll need to copy those.\n\n![](/blog-images/d4bec72be3d4b04e38779e69e396406d.jpeg)\n\n### Environment Variables in GitHub\n\nYou cannot expose the Docker username and password, so you'll save them in GitHub environment variables.\n\nIn the GitHub repository, click **Settings**, **Secrets**, then **Actions**. You should see a button for **New repository secret**, and you'll need to click on it.\n\n![](/blog-images/6353eefbb121932e8ab2a8453666d341.jpeg)\n\nOn the next page, you will give the new secret a name of **DOCKER_PASSWORD**. Add the access token from the earlier section. After that, click on the **Add secret** button.\n\n![](/blog-images/6584dab387bacd7a8884bbc995b3ac87.jpeg)\n\nYou'll also create another variable of DOCKER_USERNAME and store the username here.\n\n![](/blog-images/7754383385a826feb41943a24da64a52.jpeg)\n\nNow you should see two Repository secrets in the Actions tab.\n\n![](/blog-images/a2bf3b669a7c118fd697a9211ad7daff.jpeg)\n\n### The Release Flow\n\nNext, you'll create the Docker release flow. Go to the main branch. Then get the updates and create a new branch of **release-flow**.\n\n![](/blog-images/36da4467aba4283357fc61ddfed95f5a.jpeg)\n\nNext, create a file **release.yml** in the **workflows** folder. Place the code below in it. Here, you're running the job **deploy** only when merging to the main branch. You just need to check out to the branch. After that, you will be running the Docker build command.\n\nNext, you'll use the username and password to log in to Docker using the secrets stored in GitHub in the previous section.\n\nLastly, you're running the push command to push to Docker.\n\n![](/blog-images/832271f36ff927eb9bbb671f38e243b5.jpeg)\n\n### The Docker Run\n\nFirst, you'll add these changes and then commit them to your new **release-flow** branch. After that, you'll push it to GitHub.\n\n![](/blog-images/d5590fff294bb7b3d89fba8b444062dd.jpeg)\n\nBack in GitHub, you should see a new **Compare & pull request** on the home page of your app.\n\nClick on it.\n\n![](/blog-images/1b55c04f275301aba88419232e4fd989.jpeg)\n\nOn the next page, you need to provide some descriptions and click the **Create pull request** button.\n\n![](/blog-images/329aa27963728a7dbdfdb7c519fcc060.jpeg)\n\nSince you've created a new branch, the integrate flow, the build, and the unit test jobs should run successfully.\n\n![](/blog-images/8405ed8cda6741f5000d54a8bf55d9d3.jpeg)\n\nNow you can merge your pull request in the main branch by clicking the **Merge pull request** button.\n\n![](/blog-images/73e3af43c41f41a1f3f441e33533148a.jpeg)\n\nYou will be asked to confirm this merge on the next page. Just click the **Confirm merge** button.\n\n![](/blog-images/d7f2b2cab41cae10bb97ba925b9fbb9f.jpeg)\n\nYour new actions of release-flow should run now, and you can see it in the Actions tab.\n\n![](/blog-images/29cf0c74c3a35e4b8cffbaaf1ff67d6c.jpeg)\n\nAfter clicking any of them, you should find that your Docker commands also ran.\n\n![](/blog-images/1d6be7566e7a5977a38bcdfb7c3d15f8.jpeg)\n\nAfter two or three minutes, your workflows should complete successfully.\n\n![](/blog-images/94954f42d12405ba1b7f217fbc0e8ee8.jpeg)\n\nYou can also confirm that the new Docker image was added in Docker hub.\n\n![](/blog-images/257d71668c191a3e7682cbf079802232.jpeg)\n\n### Conclusion\n\nIn this post, you pushed a simple Nest app to GitHub. Then you created two automated workflows on GitHub through GitHub Actions.\n\nFirst, you created an integrate workflow that ran when a pull request was made to main branch from a feature branch. It ran the build and test jobs. Next, you created integrate workflow for your Docker workflow. It ran after a push was made to the main branch. The job created a Docker build and a Docker image in Docker hub.\n\nDid you know you can easily spin up an environment on release directly from your docker-compose file? Give it a [shot](https://release.com/).\n",
    "code": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var m=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var a in e)o(t,a,{get:e[a],enumerable:!0})},c=(t,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of g(e))!b.call(t,i)&&i!==a&&o(t,i,{get:()=>e[i],enumerable:!(r=u(e,i))||r.enumerable});return t};var y=(t,e,a)=>(a=t!=null?d(p(t)):{},c(e||!t||!t.__esModule?o(a,\"default\",{value:t,enumerable:!0}):a,t)),w=t=>c(o({},\"__esModule\",{value:!0}),t);var l=m((x,s)=>{s.exports=_jsx_runtime});var A={};f(A,{default:()=>v,frontmatter:()=>k});var n=y(l()),k={title:\"How to Use GitHub Actions With Environment Variables\",summary:\"We'll cover GitHub Actions & show you how to use it to automate your deployment workflow & save secrets\",publishDate:\"Thu Aug 18 2022 17:07:54 GMT+0000 (Coordinated Universal Time)\",author:\"ashley-penney\",readingTime:8,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/f1faa433780d4d232b9bb49a72ccb7bf.jpg\",imageAlt:\"How to Use GitHub Actions With Environment Variables\",showCTA:!0,ctaCopy:\"Learn how Release.com's ephemeral environments automate deployment workflows, simplifying setup of environment variables and enabling seamless collaboration.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-use-github-actions-with-environment-variables\",relatedPosts:[\"\"],ogImage:\"/blog-images/f1faa433780d4d232b9bb49a72ccb7bf.jpg\",excerpt:\"We'll cover GitHub Actions & show you how to use it to automate your deployment workflow & save secrets\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function h(t){let e=Object.assign({p:\"p\",a:\"a\",h3:\"h3\",span:\"span\",strong:\"strong\",img:\"img\"},t.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"In this post we'll cover GitHub Actions. We'll show you how to use it to automate your deployment workflow and how to use environment variables to save secrets.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"We will deploy a simple Nest app using GitHub Actions. We'll start with a simple NestJS app. You don't need to know NestJS to get started, and you can use your own app if you wish. The starting point of the project can be taken from \",(0,n.jsx)(e.a,{href:\"https://drive.google.com/file/d/1CJFwKAXWL8lZ0ujf3YPpG5dpdOLQsHpF/view?usp=sharing\",children:\"here\"}),\".\"]}),`\n`,(0,n.jsxs)(e.h3,{id:\"github-actions-environment-variables\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#github-actions-environment-variables\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"GitHub Actions Environment Variables\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We're going to store Docker secrets later in the post using secret variables from GitHub Actions. They can be easily found in the Settings tab and will help you during the automation process.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-tasks\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-tasks\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Tasks\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Like in any production app, we'll create a feature branch from the main branch. After the changes are made, we'll create a pull request to the main branch.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Before merging, you need to ensure that this feature branch will not cause any breaking changes. For each pull request, you want to ensure that the build is successful and that all tests passed.\"}),`\n`,(0,n.jsx)(e.p,{children:\"If you don\\u2019t use GitHub Actions, this will require a manual process. Suppose you\\u2019re happy with your pull request and want to merge it into the main branch. The next set of tasks is to build Docker image and push it into Docker hub. You can also automate these manual tasks with GitHub Actions.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-setup\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-setup\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Setup\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You need to extract the \",(0,n.jsx)(e.strong,{children:\"Nest-App\"}),\" from the link provided earlier in your local system and run \",(0,n.jsx)(e.strong,{children:\"npm install\"}),\" in it.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/61de738636b74a4216e630ff1024635f.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After that, create a new repository in GitHub and push your project.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/76ded41a7c03b2f5afb5abb7d123c616.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Click on the Actions tab. There you will find a lot of snippets for different projects.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/b9ec68025691256ab9cba2614a385b74.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Search for \",(0,n.jsx)(e.strong,{children:\"Node\"}),\" and then click on the Configure button of a Node.js project.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/45d3290c126861a09d429bc2582bd944.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Copy all the code from this page, but don't save it. You are going to create it from VS Code in the next step.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/b82f17f22e01ffa6472fdc081c3495cc.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Back in your app, you need to create a \",(0,n.jsx)(e.strong,{children:\".github\"}),\" folder and a \",(0,n.jsx)(e.strong,{children:\"workflows\"}),\" folder inside it. So inside it, create an \",(0,n.jsx)(e.strong,{children:\"integrate.yml\"}),\" file and paste the code from earlier. The .yml file basically says that on push or pull to the main branch, you need to run jobs. The first job name is \",(0,n.jsx)(e.strong,{children:\"build\"}),\", and it runs-on an Ubuntu machine provided by GitHub. It also specifies the node version it will run.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In the steps below, you are using GitHub's Checkout Actions to check out into the build agent's directory. After that, you are setting up Node in that directory.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Lastly, the main command of \",(0,n.jsx)(e.strong,{children:\"npm i\"}),\" and \",(0,n.jsx)(e.strong,{children:\"npm run build\"}),\" are run.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/7aa0ea5d28b8b100aee5be0f64b6f28d.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will also create the workflow for your tests. Below, you are creating another job called \",(0,n.jsx)(e.strong,{children:\"unit-tests\"}),\" and doing the same setup again.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/98b73339a487e1bb24cb6bd6194ac428.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-failed-run\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-failed-run\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Failed Run\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now create and push a remote branch that you'll use for your changes.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/fa1f72626c6431c4352d9f1b0ddec471.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Back in GitHub, you'll see a compare and pull request button that you need to click.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/dd9fcd4428c1e06c04a7ca4a3646b869.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the next screen, you just need to write a description and click the \",(0,n.jsx)(e.strong,{children:\"Create pull request\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/98b160ae8870934a7cd483ca622baaab.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The next screen says that a new branch got created called \",(0,n.jsx)(e.strong,{children:\"new-actions\"}),\". Click on the \",(0,n.jsx)(e.strong,{children:\"Actions\"}),\" tab.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/7f19256ca772c9d9678d56bc8d3d0936.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"On the Actions page, you can see that your action failed. You need to click on the same to know the exact issue.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/63e3309115da67b74b5a6d779f9eab51.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The next page shows that there is an issue in \",(0,n.jsx)(e.strong,{children:\"unit-tests\"}),\" in the \",(0,n.jsx)(e.strong,{children:\"integrate.yml\"}),\" file.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a9829e0056013f757f67c1f13d22e684.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-successful-run\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-successful-run\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Successful Run\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Upon inspection, it's clear that there is no space in the unit tests. So, we're adding the space and again pushing the changes to new-actions.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/156ce8c10431fe1426a009fab5432af5.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Back in GitHub, you can see that a new action has been running.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/bb891d268168446141db309c475e2881.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This time the build completed successfully.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Also notice that the build and unit-tests jobs were run on three versions of Node.js.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/26b26e641ffb845367e548b35dc7ba73.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Now you can Merge this pull request and will get a confirmation.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/292e6e4263ee046fa40b786a031f6e5e.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-docker-setup\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-docker-setup\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Docker Setup\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"You'll need to go to \",(0,n.jsx)(e.a,{href:\"https://hub.docker.com/\",children:\"https://hub.docker.com/\"}),\" and register if you don't have an account.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/6b410e32beebed28daf6bea9d6490921.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Once you're logged in, click on the \",(0,n.jsx)(e.strong,{children:\"Create Repository\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a99532a999716f3bde75b620aa354502.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the next page, you need to give the app a name and a description. Then click the \",(0,n.jsx)(e.strong,{children:\"Create\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/85961c4d417b3e66423920d66cde69f9.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the next page, you should see the success message. Then click on the user profile in the top-right corner and then click the \",(0,n.jsx)(e.strong,{children:\"Account Settings\"}),\" link.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/8ac4ab239e5e298f18683a64a93ba1c4.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the next screen, click on the \",(0,n.jsx)(e.strong,{children:\"Security\"}),\" tab and then the \",(0,n.jsx)(e.strong,{children:\"New Access Token\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/ade3e8ac580bfad73508eae59e679b29.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"A pop-up will open, and you need to give a description and permissions. After that, click the \",(0,n.jsx)(e.strong,{children:\"Generate\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/52a843287e5ae1987ee99e9a7033ceed.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"On the next screen, you will get your username and the token. You'll need to copy those.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/d4bec72be3d4b04e38779e69e396406d.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"environment-variables-in-github\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#environment-variables-in-github\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Environment Variables in GitHub\"]}),`\n`,(0,n.jsx)(e.p,{children:\"You cannot expose the Docker username and password, so you'll save them in GitHub environment variables.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"In the GitHub repository, click \",(0,n.jsx)(e.strong,{children:\"Settings\"}),\", \",(0,n.jsx)(e.strong,{children:\"Secrets\"}),\", then \",(0,n.jsx)(e.strong,{children:\"Actions\"}),\". You should see a button for \",(0,n.jsx)(e.strong,{children:\"New repository secret\"}),\", and you'll need to click on it.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/6353eefbb121932e8ab2a8453666d341.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the next page, you will give the new secret a name of \",(0,n.jsx)(e.strong,{children:\"DOCKER_PASSWORD\"}),\". Add the access token from the earlier section. After that, click on the \",(0,n.jsx)(e.strong,{children:\"Add secret\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/6584dab387bacd7a8884bbc995b3ac87.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"You'll also create another variable of DOCKER_USERNAME and store the username here.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/7754383385a826feb41943a24da64a52.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Now you should see two Repository secrets in the Actions tab.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a2bf3b669a7c118fd697a9211ad7daff.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-release-flow\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-release-flow\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Release Flow\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, you'll create the Docker release flow. Go to the main branch. Then get the updates and create a new branch of \",(0,n.jsx)(e.strong,{children:\"release-flow\"}),\".\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/36da4467aba4283357fc61ddfed95f5a.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Next, create a file \",(0,n.jsx)(e.strong,{children:\"release.yml\"}),\" in the \",(0,n.jsx)(e.strong,{children:\"workflows\"}),\" folder. Place the code below in it. Here, you're running the job \",(0,n.jsx)(e.strong,{children:\"deploy\"}),\" only when merging to the main branch. You just need to check out to the branch. After that, you will be running the Docker build command.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Next, you'll use the username and password to log in to Docker using the secrets stored in GitHub in the previous section.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Lastly, you're running the push command to push to Docker.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/832271f36ff927eb9bbb671f38e243b5.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"the-docker-run\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#the-docker-run\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"The Docker Run\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"First, you'll add these changes and then commit them to your new \",(0,n.jsx)(e.strong,{children:\"release-flow\"}),\" branch. After that, you'll push it to GitHub.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/d5590fff294bb7b3d89fba8b444062dd.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Back in GitHub, you should see a new \",(0,n.jsx)(e.strong,{children:\"Compare & pull request\"}),\" on the home page of your app.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Click on it.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/1b55c04f275301aba88419232e4fd989.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"On the next page, you need to provide some descriptions and click the \",(0,n.jsx)(e.strong,{children:\"Create pull request\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/329aa27963728a7dbdfdb7c519fcc060.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Since you've created a new branch, the integrate flow, the build, and the unit test jobs should run successfully.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/8405ed8cda6741f5000d54a8bf55d9d3.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now you can merge your pull request in the main branch by clicking the \",(0,n.jsx)(e.strong,{children:\"Merge pull request\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/73e3af43c41f41a1f3f441e33533148a.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"You will be asked to confirm this merge on the next page. Just click the \",(0,n.jsx)(e.strong,{children:\"Confirm merge\"}),\" button.\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/d7f2b2cab41cae10bb97ba925b9fbb9f.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Your new actions of release-flow should run now, and you can see it in the Actions tab.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/29cf0c74c3a35e4b8cffbaaf1ff67d6c.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After clicking any of them, you should find that your Docker commands also ran.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/1d6be7566e7a5977a38bcdfb7c3d15f8.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"After two or three minutes, your workflows should complete successfully.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/94954f42d12405ba1b7f217fbc0e8ee8.jpeg\",alt:\"\"})}),`\n`,(0,n.jsx)(e.p,{children:\"You can also confirm that the new Docker image was added in Docker hub.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/257d71668c191a3e7682cbf079802232.jpeg\",alt:\"\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"conclusion\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#conclusion\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Conclusion\"]}),`\n`,(0,n.jsx)(e.p,{children:\"In this post, you pushed a simple Nest app to GitHub. Then you created two automated workflows on GitHub through GitHub Actions.\"}),`\n`,(0,n.jsx)(e.p,{children:\"First, you created an integrate workflow that ran when a pull request was made to main branch from a feature branch. It ran the build and test jobs. Next, you created integrate workflow for your Docker workflow. It ran after a push was made to the main branch. The job created a Docker build and a Docker image in Docker hub.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Did you know you can easily spin up an environment on release directly from your docker-compose file? Give it a \",(0,n.jsx)(e.a,{href:\"https://release.com/\",children:\"shot\"}),\".\"]})]})}function j(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var v=j;return w(A);})();\n;return Component;"
  },
  "_id": "blog/posts/how-to-use-github-actions-with-environment-variables.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/how-to-use-github-actions-with-environment-variables.mdx",
    "sourceFileName": "how-to-use-github-actions-with-environment-variables.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/how-to-use-github-actions-with-environment-variables"
  },
  "type": "BlogPost",
  "computedSlug": "how-to-use-github-actions-with-environment-variables"
}