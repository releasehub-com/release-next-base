{
  "title": "Kubernetes CRDs: What They Are and Why They Are Useful",
  "summary": "What are Kubernetes Custom Resource Definitions? What are they useful for and how to create your own? Read all about it",
  "publishDate": "Tue Feb 15 2022 22:12:00 GMT+0000 (Coordinated Universal Time)",
  "author": "dawid-ziolkowski",
  "readingTime": 7,
  "categories": [
    "kubernetes",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/25a8e0410945d3fe7afe1b2f30acc552.jpg",
  "imageAlt": "a close-up of a keyboard",
  "showCTA": true,
  "ctaCopy": "Unlock new possibilities with Release.com's ephemeral environments for managing custom resources in Kubernetes. Accelerate development cycles and streamline workflows.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-crds",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/25a8e0410945d3fe7afe1b2f30acc552.jpg",
  "excerpt": "What are Kubernetes Custom Resource Definitions? What are they useful for and how to create your own? Read all about it",
  "tags": [
    "kubernetes",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nOne of the main reasons that Kubernetes became so popular is the fact that it's so flexible. When we say Kubernetes, we typically think about deploying and managing containers. And while this is, in fact, Kubernetes's main job, it can actually do much more than that. This is possible thanks to something called Custom Resource Definitions, or CRDs for short. In this post, you'll learn what CRDs are and what you can use them for. We'll also take a look at how to create them.\n\n![](/blog-images/470546e1232748209628bb1f33220896.png)\n\n### Kubernetes API\n\nBefore we dive into custom resource definitions, let's first talk about Kubernetes in general. If I asked you, \"What is Kubernetes?\" then you'd probably answer, \"Kubernetes is a container orchestrator.\" This would, of course, be one correct answer.\n\nBut by looking under the Kubernetes hood, you could see that the main component of Kubernetes is an API server and etcd data store. And there are other, more important components like kube-scheduler, kube-controller-manager, and cloud-controller-manager, but pretty much any operation on your cluster needs to go through an API server.\n\nThat API has a few built-in objects that it understands. Things you may be familiar with like Pods, Namespaces, ConfigMaps, Services, or Nodes are all API objects. That's why whenever you execute **kubectl get pods** or **kubectl get nodes**, you get a list of pods or nodes. But if you try to get a list of objects that don't exist in the Kubernetes API—like, for example, **kubectl get biscuits**—you'd get a response similar to this:\n\nerror: the server doesn't have a resource type \"biscuits\"\n\nAnd this is because there is no such thing as \"biscuits\" defined in the Kubernetes API. Quite logical, right? Well, what if I told you that you could add a biscuits definition to your Kubernetes cluster? In fact, you can extend your Kubernetes API with any custom object you like. That's exactly what custom resource definitions are for.\n\n### Why CRDs?\n\nSo what's the point of adding a biscuits definition to your Kubernetes cluster? Remember when I mentioned earlier that the success of Kubernetes comes from its flexibility? The ability to extend the Kubernetes API with custom resource definitions is a really great feature that lets you do something magical. It allows you to instruct Kubernetes to manage more than just containers.\n\nWhy is that such a great thing? Because CRDs together with Kubernetes operators give you almost unlimited possibilities. You can adapt Kubernetes in a way that it will take care of older parts of your infrastructure. If you do it right, you'll be able to avoid bottlenecks and easily modernise things that normally would require long and costly redesigns.\n\n### CRDs on Your Cluster\n\nBefore we dive into creating our own CRD, you need to know two things.\n\nFirstly, creating a custom resource definition is an advanced topic. Many companies don't even need to create any CRDs. The Kubernetes community finds interesting solutions for common problems all the time, and it's likely that any use case you encounter probably already has a CRD you can use! And if you're still new to Kubernetes, you definitely shouldn't jump into CRDs before you understand the basics well.\n\nSecondly, as already mentioned, you don't need to create any CRDs yourself if you don't feel the need to. However, many Kubernetes tools will install their own CRDs, so even if you don't create any yourself, you'll probably still end up having some on your cluster.\n\nOne example is [cert-manager](https://cert-manager.io), a very popular Kubernetes tool for managing certificates. It installs a few CRDs on your cluster in order to do its job. If you execute **kubectl get clusterissuers** before installation of cert-manager, your cluster won't know what ClusterIssuers are:\n\n`error: the server doesn't have a resource type \"clusterissuers\"`\n\nBut if you execute the same command after cert-manager installation, you'll get the list of ClusterIssuers on your cluster.\n\nIn fact, you can list all custom resource definitions installed on your cluster by executing **kubectl get crd**:\n\n`$ kubectl get crd NAME                                    CREATED AT addons.k3s.cattle.io                    2022-01-23T12:48:31Z helmcharts.helm.cattle.io               2022-01-23T12:48:31Z helmchartconfigs.helm.cattle.io         2022-01-23T12:48:31Z serverstransports.traefik.containo.us   2022-01-23T12:49:48Z tlsoptions.traefik.containo.us          2022-01-23T12:49:48Z ingressroutetcps.traefik.containo.us    2022-01-23T12:49:48Z ingressroutes.traefik.containo.us       2022-01-23T12:49:48Z tlsstores.traefik.containo.us           2022-01-23T12:49:48Z middlewares.traefik.containo.us         2022-01-23T12:49:48Z traefikservices.traefik.containo.us     2022-01-23T12:49:48Z middlewaretcps.traefik.containo.us      2022-01-23T12:49:48Z ingressrouteudps.traefik.containo.us    2022-01-23T12:49:48Z`\n\nThe above output comes in the form of **OBJECT.GROUP** and tells me that I can execute commands like **kubectl get addons**...\n\n### How to Create CRDs\n\nOK, forget about biscuits. Let's take a look at some more realistic examples. Imagine that you want Kubernetes to somehow manage your custom routers in your datacenter. For that, you could create a custom resource definition similar to this one:\n\n`apiVersion: apiextensions.k8s.io/v1 kind: CustomResourceDefinition metadata:   # Name of your CRD. Must match the spec block below, and be in the form: .  name: routers.example.com spec: # Group name to use for REST API: /apis//  group: example.com  names: # Plural name to be used in the URL: /apis///    plural: routers    # Singular name to be used as an alias on the CLI and for display    singular: router    # Kind is normally the CamelCased singular type. Your resource manifests use this.    kind: Router    # ShortNames allow shorter string to match your resource on the CLI    shortNames:    - rt  # Scope can be either Namespaced or Cluster-wide  scope: Cluster  versions:    - name: v1      # Each version can be enabled/disabled by Served flag.      served: true      # One and only one version must be marked as the storage version.      storage: true      schema:        openAPIV3Schema:          type: object          properties:            spec:              type: object              properties:                dataCenter:                  type: string                rack:                  type: integer                type:                  type: string                  enum:                  - f5                  - virtual              required: [\"dataCenter\", \"rack\", \"type\"]          required: [\"spec\"]`\n\nYou can apply the above CRD to the cluster by executing **kubectl apply -f router-CRD.yaml**. Once you do that, your Kubernetes cluster will already know what \"router\" is. Therefore, you'll be able to execute **kubectl get routers**. Of course, we just applied the resource definition, not the resource itself. So **kubectl get routers** will return the following:\n\n`No resources found.`\n\nBut as you can see, it doesn't return this:\n\n`error: the server doesn't have a resource type \"routers\"`\n\nWhich means we successfully added a new object to the Kubernetes API. To add an actual router resource, you can construct a YAML definition file like with any other object:\n\n`apiVersion: example.com/v1 kind: Router metadata:  name: example-router spec:  dataCenter: eu-1  rack: 3  type: virtual`\n\n \n\nNow, you can create a new router on your cluster by executing **kubectl apply - f example-router.yaml**, and if you try to get the list of routers again with **kubectl get routers**, you should see one now:\n\n`$ kubectl get routers NAME             AGE example-router   4s`\n\n \n\nCongratulations! You just extended the Kubernetes API.\n\n![](/blog-images/785fbfe1e3cec8abffd9eff571966715.png)\n\n### **What to Do With CRDs**\n\nYou may be thinking, \"OK, great, but that router doesn't do anything!\" And yes, that's right. In its current form, our CRD doesn't do anything besides being processed and stored by the Kubernetes API. And while there are use cases where this is enough, usually CRDs are combined with custom controllers.\n\nCustom controllers are another concept in Kubernetes that lets you actually do something with your custom resources. In our case, we would like to actually create or configure the routers in our datacenter. Therefore, we'd have to write a custom controller and instruct it to listen to the Kubernetes API and wait for any changes to our custom **router** objects.\n\nCustom controllers under the hood are just applications or scripts written in your programming language of choice. They're deployed on the cluster as pods, and their job is to listen to the Kubernetes API and perform some actions based on defined logic.\n\n#### CRD vs. ConfigMap\n\nLast but not least, by looking at CRDs, you may see some similarities with a Kubernetes built-in object, ConfigMap. And if you use CRDs without a custom controller, they may, in fact, serve a similar purpose. They both can be used to store custom configurations. However, there are noticeable differences between them.\n\nFirst of all, ConfigMaps by design are meant to provide configuration for your pods. They can be mounted as files or environment variables into the pod. They work well if you have well-defined config files like, for example, Apache or MySQL config.\n\nCRDs can also be consumed by pods but only by contacting the Kubernetes API. They simply have a different purpose than ConfigMaps. They're not meant to be used to provide configuration to your pods but to extend the Kubernetes API in order to build custom automation.\n\n### Summary\n\nKubernetes's flexibility is what made it so successful (among other things, of course). Now, you can make use of that flexibility by creating your own Kubernetes objects. The possibilities are almost limitless, and it's only up to you how you'll make use of CRDs.\n\nCome back to us for more Kubernetes articles. [Here's](https://release.com/blog/kubernetes-daemonset-tutorial) our article explaining another Kubernetes object, DaemonSets. Also, feel free to take a look at our offerings. We simplify the development process by providing [Environments as a Service.](https://release.com/)\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),f=(o,e)=>{for(var n in e)s(o,n,{get:e[n],enumerable:!0})},i=(o,e,n,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!y.call(o,r)&&r!==n&&s(o,r,{get:()=>e[r],enumerable:!(a=d(e,r))||a.enumerable});return o};var g=(o,e,n)=>(n=o!=null?h(p(o)):{},i(e||!o||!o.__esModule?s(n,\"default\",{value:o,enumerable:!0}):n,o)),w=o=>i(s({},\"__esModule\",{value:!0}),o);var l=b((x,c)=>{c.exports=_jsx_runtime});var K={};f(K,{default:()=>v,frontmatter:()=>k});var t=g(l()),k={title:\"Kubernetes CRDs: What They Are and Why They Are Useful\",summary:\"What are Kubernetes Custom Resource Definitions? What are they useful for and how to create your own? Read all about it\",publishDate:\"Tue Feb 15 2022 22:12:00 GMT+0000 (Coordinated Universal Time)\",author:\"dawid-ziolkowski\",readingTime:7,categories:[\"kubernetes\",\"platform-engineering\"],mainImage:\"/blog-images/25a8e0410945d3fe7afe1b2f30acc552.jpg\",imageAlt:\"a close-up of a keyboard\",showCTA:!0,ctaCopy:\"Unlock new possibilities with Release.com's ephemeral environments for managing custom resources in Kubernetes. Accelerate development cycles and streamline workflows.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-crds\",relatedPosts:[\"\"],ogImage:\"/blog-images/25a8e0410945d3fe7afe1b2f30acc552.jpg\",excerpt:\"What are Kubernetes Custom Resource Definitions? What are they useful for and how to create your own? Read all about it\",tags:[\"kubernetes\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function u(o){let e=Object.assign({p:\"p\",img:\"img\",h3:\"h3\",a:\"a\",span:\"span\",strong:\"strong\",code:\"code\",h4:\"h4\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"One of the main reasons that Kubernetes became so popular is the fact that it's so flexible. When we say Kubernetes, we typically think about deploying and managing containers. And while this is, in fact, Kubernetes's main job, it can actually do much more than that. This is possible thanks to something called Custom Resource Definitions, or CRDs for short. In this post, you'll learn what CRDs are and what you can use them for. We'll also take a look at how to create them.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/470546e1232748209628bb1f33220896.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"kubernetes-api\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#kubernetes-api\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Kubernetes API\"]}),`\n`,(0,t.jsx)(e.p,{children:`Before we dive into custom resource definitions, let's first talk about Kubernetes in general. If I asked you, \"What is Kubernetes?\" then you'd probably answer, \"Kubernetes is a container orchestrator.\" This would, of course, be one correct answer.`}),`\n`,(0,t.jsx)(e.p,{children:\"But by looking under the Kubernetes hood, you could see that the main component of Kubernetes is an API server and etcd data store. And there are other, more important components like kube-scheduler, kube-controller-manager, and cloud-controller-manager, but pretty much any operation on your cluster needs to go through an API server.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"That API has a few built-in objects that it understands. Things you may be familiar with like Pods, Namespaces, ConfigMaps, Services, or Nodes are all API objects. That's why whenever you execute \",(0,t.jsx)(e.strong,{children:\"kubectl get pods\"}),\" or \",(0,t.jsx)(e.strong,{children:\"kubectl get nodes\"}),\", you get a list of pods or nodes. But if you try to get a list of objects that don't exist in the Kubernetes API\\u2014like, for example, \",(0,t.jsx)(e.strong,{children:\"kubectl get biscuits\"}),\"\\u2014you'd get a response similar to this:\"]}),`\n`,(0,t.jsx)(e.p,{children:`error: the server doesn't have a resource type \"biscuits\"`}),`\n`,(0,t.jsx)(e.p,{children:`And this is because there is no such thing as \"biscuits\" defined in the Kubernetes API. Quite logical, right? Well, what if I told you that you could add a biscuits definition to your Kubernetes cluster? In fact, you can extend your Kubernetes API with any custom object you like. That's exactly what custom resource definitions are for.`}),`\n`,(0,t.jsxs)(e.h3,{id:\"why-crds\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#why-crds\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Why CRDs?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"So what's the point of adding a biscuits definition to your Kubernetes cluster? Remember when I mentioned earlier that the success of Kubernetes comes from its flexibility? The ability to extend the Kubernetes API with custom resource definitions is a really great feature that lets you do something magical. It allows you to instruct Kubernetes to manage more than just containers.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Why is that such a great thing? Because CRDs together with Kubernetes operators give you almost unlimited possibilities. You can adapt Kubernetes in a way that it will take care of older parts of your infrastructure. If you do it right, you'll be able to avoid bottlenecks and easily modernise things that normally would require long and costly redesigns.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"crds-on-your-cluster\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#crds-on-your-cluster\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"CRDs on Your Cluster\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Before we dive into creating our own CRD, you need to know two things.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Firstly, creating a custom resource definition is an advanced topic. Many companies don't even need to create any CRDs. The Kubernetes community finds interesting solutions for common problems all the time, and it's likely that any use case you encounter probably already has a CRD you can use! And if you're still new to Kubernetes, you definitely shouldn't jump into CRDs before you understand the basics well.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Secondly, as already mentioned, you don't need to create any CRDs yourself if you don't feel the need to. However, many Kubernetes tools will install their own CRDs, so even if you don't create any yourself, you'll probably still end up having some on your cluster.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"One example is \",(0,t.jsx)(e.a,{href:\"https://cert-manager.io\",children:\"cert-manager\"}),\", a very popular Kubernetes tool for managing certificates. It installs a few CRDs on your cluster in order to do its job. If you execute \",(0,t.jsx)(e.strong,{children:\"kubectl get clusterissuers\"}),\" before installation of cert-manager, your cluster won't know what ClusterIssuers are:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:`error: the server doesn't have a resource type \"clusterissuers\"`})}),`\n`,(0,t.jsx)(e.p,{children:\"But if you execute the same command after cert-manager installation, you'll get the list of ClusterIssuers on your cluster.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"In fact, you can list all custom resource definitions installed on your cluster by executing \",(0,t.jsx)(e.strong,{children:\"kubectl get crd\"}),\":\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"$ kubectl get crd NAME \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0CREATED AT addons.k3s.cattle.io \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA02022-01-23T12:48:31Z helmcharts.helm.cattle.io \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 2022-01-23T12:48:31Z helmchartconfigs.helm.cattle.io \\xA0 \\xA0 \\xA0 \\xA0 2022-01-23T12:48:31Z serverstransports.traefik.containo.us \\xA0 2022-01-23T12:49:48Z tlsoptions.traefik.containo.us \\xA0 \\xA0 \\xA0 \\xA0 \\xA02022-01-23T12:49:48Z ingressroutetcps.traefik.containo.us \\xA0 \\xA02022-01-23T12:49:48Z ingressroutes.traefik.containo.us \\xA0 \\xA0 \\xA0 2022-01-23T12:49:48Z tlsstores.traefik.containo.us \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 2022-01-23T12:49:48Z middlewares.traefik.containo.us \\xA0 \\xA0 \\xA0 \\xA0 2022-01-23T12:49:48Z traefikservices.traefik.containo.us \\xA0 \\xA0 2022-01-23T12:49:48Z middlewaretcps.traefik.containo.us \\xA0 \\xA0 \\xA02022-01-23T12:49:48Z ingressrouteudps.traefik.containo.us \\xA0 \\xA02022-01-23T12:49:48Z\"})}),`\n`,(0,t.jsxs)(e.p,{children:[\"The above output comes in the form of \",(0,t.jsx)(e.strong,{children:\"OBJECT.GROUP\"}),\" and tells me that I can execute commands like \",(0,t.jsx)(e.strong,{children:\"kubectl get addons\"}),\"...\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"how-to-create-crds\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#how-to-create-crds\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"How to Create CRDs\"]}),`\n`,(0,t.jsx)(e.p,{children:\"OK, forget about biscuits. Let's take a look at some more realistic examples. Imagine that you want Kubernetes to somehow manage your custom routers in your datacenter. For that, you could create a custom resource definition similar to this one:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:'apiVersion: apiextensions.k8s.io/v1 kind: CustomResourceDefinition metadata:  \\xA0# Name of your CRD. Must match the spec block below, and be in the form: .  name: routers.example.com spec: # Group name to use for REST API: /apis//  group: example.com  names: # Plural name to be used in the URL: /apis///  \\xA0 plural: routers  \\xA0 # Singular name to be used as an alias on the CLI and for display  \\xA0 singular: router  \\xA0 # Kind is normally the CamelCased singular type. Your resource manifests use this.  \\xA0 kind: Router  \\xA0 # ShortNames allow shorter string to match your resource on the CLI  \\xA0 shortNames:  \\xA0 - rt  # Scope can be either Namespaced or Cluster-wide  scope: Cluster  versions:  \\xA0 - name: v1  \\xA0 \\xA0 # Each version can be enabled/disabled by Served flag.  \\xA0 \\xA0 served: true  \\xA0 \\xA0 # One and only one version must be marked as the storage version.  \\xA0 \\xA0 storage: true  \\xA0 \\xA0 schema:  \\xA0 \\xA0 \\xA0 openAPIV3Schema:  \\xA0 \\xA0 \\xA0 \\xA0 type: object  \\xA0 \\xA0 \\xA0 \\xA0 properties:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 spec:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type: object  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 properties:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 dataCenter:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type: string  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 rack:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type: integer  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 type: string  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 enum:  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 - f5  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 - virtual  \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 required: [\"dataCenter\", \"rack\", \"type\"]  \\xA0 \\xA0 \\xA0 \\xA0 required: [\"spec\"]'})}),`\n`,(0,t.jsxs)(e.p,{children:[\"You can apply the above CRD to the cluster by executing \",(0,t.jsx)(e.strong,{children:\"kubectl apply -f router-CRD.yaml\"}),`. Once you do that, your Kubernetes cluster will already know what \"router\" is. Therefore, you'll be able to execute `,(0,t.jsx)(e.strong,{children:\"kubectl get routers\"}),\". Of course, we just applied the resource definition, not the resource itself. So \",(0,t.jsx)(e.strong,{children:\"kubectl get routers\"}),\" will return the following:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"No resources found.\"})}),`\n`,(0,t.jsx)(e.p,{children:\"But as you can see, it doesn't return this:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:`error: the server doesn't have a resource type \"routers\"`})}),`\n`,(0,t.jsx)(e.p,{children:\"Which means we successfully added a new object to the Kubernetes API. To add an actual router resource, you can construct a YAML definition file like with any other object:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"apiVersion: example.com/v1 kind: Router metadata:  name: example-router spec:  dataCenter: eu-1  rack: 3  type: virtual\"})}),`\n`,(0,t.jsx)(e.p,{children:\"\\xA0\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now, you can create a new router on your cluster by executing \",(0,t.jsx)(e.strong,{children:\"kubectl apply - f example-router.yaml\"}),\", and if you try to get the list of routers again with \",(0,t.jsx)(e.strong,{children:\"kubectl get routers\"}),\", you should see one now:\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.code,{children:\"$ kubectl get routers NAME \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 AGE example-router \\xA0 4s\"})}),`\n`,(0,t.jsx)(e.p,{children:\"\\xA0\"}),`\n`,(0,t.jsx)(e.p,{children:\"Congratulations! You just extended the Kubernetes API.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/785fbfe1e3cec8abffd9eff571966715.png\",alt:\"\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"what-to-do-with-crds\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#what-to-do-with-crds\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),(0,t.jsx)(e.strong,{children:\"What to Do With CRDs\"})]}),`\n`,(0,t.jsx)(e.p,{children:`You may be thinking, \"OK, great, but that router doesn't do anything!\" And yes, that's right. In its current form, our CRD doesn't do anything besides being processed and stored by the Kubernetes API. And while there are use cases where this is enough, usually CRDs are combined with custom controllers.`}),`\n`,(0,t.jsxs)(e.p,{children:[\"Custom controllers are another concept in Kubernetes that lets you actually do something with your custom resources. In our case, we would like to actually create or configure the routers in our datacenter. Therefore, we'd have to write a custom controller and instruct it to listen to the Kubernetes API and wait for any changes to our custom \",(0,t.jsx)(e.strong,{children:\"router\"}),\" objects.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Custom controllers under the hood are just applications or scripts written in your programming language of choice. They're deployed on the cluster as pods, and their job is to listen to the Kubernetes API and perform some actions based on defined logic.\"}),`\n`,(0,t.jsxs)(e.h4,{id:\"crd-vs-configmap\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#crd-vs-configmap\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"CRD vs. ConfigMap\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Last but not least, by looking at CRDs, you may see some similarities with a Kubernetes built-in object, ConfigMap. And if you use CRDs without a custom controller, they may, in fact, serve a similar purpose. They both can be used to store custom configurations. However, there are noticeable differences between them.\"}),`\n`,(0,t.jsx)(e.p,{children:\"First of all, ConfigMaps by design are meant to provide configuration for your pods. They can be mounted as files or environment variables into the pod. They work well if you have well-defined config files like, for example, Apache or MySQL config.\"}),`\n`,(0,t.jsx)(e.p,{children:\"CRDs can also be consumed by pods but only by contacting the Kubernetes API. They simply have a different purpose than ConfigMaps. They're not meant to be used to provide configuration to your pods but to extend the Kubernetes API in order to build custom automation.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"summary\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#summary\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Summary\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Kubernetes's flexibility is what made it so successful (among other things, of course). Now, you can make use of that flexibility by creating your own Kubernetes objects. The possibilities are almost limitless, and it's only up to you how you'll make use of CRDs.\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Come back to us for more Kubernetes articles. \",(0,t.jsx)(e.a,{href:\"https://release.com/blog/kubernetes-daemonset-tutorial\",children:\"Here's\"}),\" our article explaining another Kubernetes object, DaemonSets. Also, feel free to take a look at our offerings. We simplify the development process by providing \",(0,t.jsx)(e.a,{href:\"https://release.com/\",children:\"Environments as a Service.\"})]})]})}function C(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(u,o)})):u(o)}var v=C;return w(K);})();\n;return Component;"
  },
  "_id": "blog/posts/kubernetes-crds.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/kubernetes-crds.mdx",
    "sourceFileName": "kubernetes-crds.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/kubernetes-crds"
  },
  "type": "BlogPost",
  "computedSlug": "kubernetes-crds"
}