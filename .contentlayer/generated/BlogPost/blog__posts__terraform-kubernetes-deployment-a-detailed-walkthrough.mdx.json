{
  "title": "Terraform Kubernetes Deployment: A Detailed Walkthrough",
  "summary": " Did you know that you can use Terraform for deployment of your Kubernetes clusters? Learn how and why to do it here.",
  "publishDate": "Sat Aug 06 2022 22:18:19 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 6,
  "categories": [
    "kubernetes",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/93cadc79db3755d6a026b27fe882105c.jpg",
  "imageAlt": "Terraform Kubernetes Deployment: A Detailed Walkthrough",
  "showCTA": true,
  "ctaCopy": "Looking to streamline Kubernetes deployment workflows? Try Release.com for ephemeral environments that mirror production, enabling faster testing and deployment cycles.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=terraform-kubernetes-deployment-a-detailed-walkthrough",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/93cadc79db3755d6a026b27fe882105c.jpg",
  "excerpt": " Did you know that you can use Terraform for deployment of your Kubernetes clusters? Learn how and why to do it here.",
  "tags": [
    "kubernetes",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nTerraform and Kubernetes are two of the most popular tools in their categories. Terraform is widely adopted as the tool of choice for infrastructure as code, and Kubernetes is number one when it comes to orchestrating containers. Is it possible to combine both? Sure! You can use Terraform to deploy your Kubernetes clusters. It's actually quite common, and it lets you deploy Kubernetes just like the rest of your infrastructure. In this post, you'll learn how to do it.\n\n### Terraform + Kubernetes: How and Why?\n\nWe have two main questions to answer here. How can you deploy Kubernetes with Terraform, and why would you do that? Let's start with the latter.\n\n![ApplicationDescription automatically generated with medium confidence](/blog-images/a82632ed72605aab10dcbb180de0d4d1.png)\n\nThe answer doesn't differ from \"Why would you deploy anything with Terraform?\" From that perspective, there's nothing special about Kubernetes, and you get the same benefit by using Terraform to deploy it as with any other infrastructure. You get automation, infrastructure versioning, reliability, and even the ability to perform infrastructure security scanning.\n\nAs for how, the answer is actually similar. You can deploy Kubernetes with Terraform just like any other infrastructure. Meaning, you first need to find a Kubernetes resource definition for Terraform (we'll show you that shortly), adjust some parameters for your needs, add it to your Terraform code, and you're done. And just like with any other resource, Terraform will be able to track changes to your cluster and update its configuration after you make changes to the code.\n\n### Deploying Kubernetes: First Steps\n\nEnough theory. Let's see how it works in practice. First, you need to find a Terraform provider for your cloud. If you want to deploy Kubernetes on [DigitalOcean](https://www.digitalocean.com/), you'd need to follow [this documentation](https://registry.terraform.io/providers/digitalocean/digitalocean/latest/docs/resources/kubernetes_cluster). For [Microsoft Azure](https://azure.microsoft.com/en-us/), you'd need to head [here](https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster) for details. And for [Google Cloud](https://cloud.google.com/), you need to check [here](https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/container_cluster). These are just a few examples. But no matter which cloud provider you're using, the general approach will be the same. For today's example, we'll use DigitalOcean.\n\nTo start from nothing, in the simplest scenario, you need to create two files named **provider.tf** and **main.tf**. You could do it all in one file, but it's a good practice to separate providers and main resource definitions. In the code below, you can define your DigitalOcean provider for Terraform and pass your DigitalOcean token:\n\n```yaml\n\nterraform {\n  required_providers {\n    digitalocean = {\n      source = \"digitalocean/digitalocean\"\n      version = \"~> 2.0\"\n    }\n  }\n}\nvariable \"do_token\" {\n  default = \"[replace_with_your_token]\"\n}\n\n# Configure the DigitalOcean Provider\n\nprovider \"digitalocean\" {\n  token = var.do_token\n}\n\n```\n\nIn **main.tf** you can now define your Kubernetes.\n\n```yaml\nresource \"digitalocean_kubernetes_cluster\" \"test\" {\nname   = \"test_cluster\"\nregion = \"nyc1\"\nversion = \"1.22.11-do.0\"\nnode_pool {\nname       = \"worker-pool\"\nsize       = \"s-2vcpu-2gb\"\nnode_count = 3\n}\n}\n```\n\nNow that you have your Terraform files prepared, you need three things. First, you need to initiate the DigitalOcean provider. You can do that with **terraform init**.\n\n```yaml\n\n# terraform init\n\nInitializing the backend...\nInitializing provider plugins...\n- Finding digitalocean/digitalocean versions matching \"~> 2.0\"...\n- Installing digitalocean/digitalocean v2.21.0...\n- Installed digitalocean/digitalocean v2.21.0 (signed by a HashiCorp partner, key ID F82037E524B9C0E8)\nPartner and community providers are signed by their developers.\nIf you'd like to know more about provider signing, you can read about it here:\nhttps://www.terraform.io/docs/cli/plugins/signing.html\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run \"terraform init\" in the future.\nTerraform has been successfully initialized!\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\n```\n\nThen you can run your **terraform plan**, which will show you planned changes to the infrastructure (which in this case should be creating a new Kubernetes cluster).\n\n```yaml\n\n# terraform plan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following\nsymbols:\n  + create\nTerraform will perform the following actions:\n  # digitalocean_kubernetes_cluster.test will be created\n  + resource \"digitalocean_kubernetes_cluster\" \"test\" {\n      + cluster_subnet = (known after apply)\n      + created_at     = (known after apply)\n      + endpoint       = (known after apply)\n      + ha             = false\n      + id             = (known after apply)\n      + ipv4_address   = (known after apply)\n      + kube_config    = (sensitive value)\n      + name           = \"test-cluster\"\n      + region         = \"nyc1\"\n      + service_subnet = (known after apply)\n      + status         = (known after apply)\n      + surge_upgrade  = true\n      + updated_at     = (known after apply)\n      + urn            = (known after apply)\n      + version        = \"1.22.11-do.0\"\n      + vpc_uuid       = (known after apply)\n      + maintenance_policy {\n          + day        = (known after apply)\n          + duration   = (known after apply)\n          + start_time = (known after apply)\n        }\n      + node_pool {\n          + actual_node_count = (known after apply)\n          + auto_scale        = false\n          + id                = (known after apply)\n          + name              = \"worker-pool\"\n          + node_count        = 3\n          + nodes             = (known after apply)\n          + size              = \"s-2vcpu-2gb\"\n        }\n    }\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n```\n\nThe plan looks good. One resource will be added, and that's your Kubernetes cluster, so you can go ahead and apply the changes with **terraform apply**.\n\n```yaml\n\n# terraform apply\n\n(...)\nPlan: 1 to add, 0 to change, 0 to destroy.\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\ndigitalocean_kubernetes_cluster.test: Creating...\ndigitalocean_kubernetes_cluster.test: Still creating... [10s elapsed]\n(...)\ndigitalocean_kubernetes_cluster.test: Still creating... [7m10s elapsed]\ndigitalocean_kubernetes_cluster.test: Creation complete after 7m16s [id=49fd0517-a4a5-41e8-997d-1412c081e000]\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\n```\n\nIf you now head to your DigitalOcean portal to validate, you can indeed see it there.\n\n![DigitalOcean portal](/blog-images/4ae1114850cfa16a93e987103c7eb5e0.png)\n\nAnd that's it! That's how you deploy Kubernetes with Terraform.\n\n![A picture containing device, control panelDescription automatically generated](/blog-images/14771b0c5e49d3c50009a99ebfdcd091.jpeg)\n\n### Deploying Kubernetes: Next Steps\n\nNow that you know how it works in general, there are a few things that you need to learn next. First, all you've done is deploy basic, minimal Kubernetes. In more realistic scenarios, you'll probably want to parametrize more options for your Kubernetes. This, however, will highly depend on what you actually need. If you know what you need, you can head to the Terraform documentation and check [**argument reference**](https://registry.terraform.io/providers/digitalocean/digitalocean/latest/docs/resources/kubernetes_cluster#argument-reference) for your Kubernetes resource. Find what you need and add it to your code.\n\nFor example, if you'd like your Kubernetes cluster to automatically upgrade, you can find the following in the documentation:\n\n![Auto upgrade](/blog-images/0a5e2c452dafd796806726969310f5a2.png)\n\nTo make your freshly deployed cluster automatically upgrade, you just need to add the following to your Kubernetes resource definition in **main.tf** as follows:\n\n```yaml\nresource \"digitalocean_kubernetes_cluster\" \"test\" {\nname   = \"test-cluster\"\nregion = \"nyc1\"\nversion = \"1.22.11-do.0\"\nauto_upgrade = true\nnode_pool {\nname       = \"worker-pool\"\nsize       = \"s-2vcpu-2gb\"\nnode_count = 3\n}\n}\n```\n\nBut you're not there yet. You can quickly see in the DigitalOcean portal that the cluster currently does not automatically upgrade.\n\n![auto upgrade in portal](/blog-images/a2dfca6ce7870345b1829ffe4f4a457e.png)\n\nAutomatic upgrades are disabled now, so you can run **terraform plan** again to check what Terraform will try to do.\n\n```yaml\n# terraform plan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:  ~ update in-place\nTerraform will perform the following actions:\n   # digitalocean_kubernetes_cluster.test will be updated in-place\n  ~ resource \"digitalocean_kubernetes_cluster\" \"test\" {\n  ~ auto_upgrade   = false -> true\n  id             = \"49fd0517-a4a5-41e8-997d-1412c081e000\"\n  name           = \"test-cluster\"\n  tags           = []\n  # (13 unchanged attributes hidden)\n  # (2 unchanged blocks hidden)\n  }\nPlan: 0 to add, 1 to change, 0 to destroy\n```\n\nAs expected, Terraform will now try to update your cluster in place and add an auto-upgrade option to it. Let's go ahead and apply that change.\n\n```yaml\n\n# terraform apply\n\n(...)\nPlan: 0 to add, 1 to change, 0 to destroy.\nDo you want to perform these actions?\n  Terraform will perform the actions described above.\n  Only 'yes' will be accepted to approve.\n  Enter a value: yes\ndigitalocean_kubernetes_cluster.test: Modifying... [id=49fd0517-a4a5-41e8-997d-1412c081e000]\ndigitalocean_kubernetes_cluster.test: Modifications complete after 2s [id=49fd0517-a4a5-41e8-997d-1412c081e000]\nApply complete! Resources: 0 added, 1 changed, 0 destroyed.\n\n```\n\nThe change was quickly applied to your cluster, and if you double check in the portal again, you can see that, indeed, the auto-upgrade option is now enabled.\n\n![auto-upgrade enabled](/blog-images/9730642cc35deb2d6c3b63888fe4d71e.png)\n\n### Destroying Kubernetes\n\nIf you no longer want your Kubernetes cluster, you can destroy it just as easily as you deployed it. All you need to do is execute **terraform destroy**.\n\n```yaml\n\n# terraform destroy\n\ndigitalocean_kubernetes_cluster.test: Refreshing state... [id=49fd0517-a4a5-41e8-997d-1412c081e000]\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\nTerraform will perform the following actions:\n  # digitalocean_kubernetes_cluster.test will be destroyed\n  - resource \"digitalocean_kubernetes_cluster\" \"test\" {\n      - auto_upgrade   = true -> null\n      - cluster_subnet = \"10.244.0.0/16\" -> null\n      - created_at     = \"2022-07-24 06:15:34 +0000 UTC\" -> null\n      - endpoint       = \"https://49fd0517-a4a5-41e8-997d-1412c081e000.k8s.ondigitalocean.com\" -> null\n      - ha             = false -> null\n      - id             = \"49fd0517-a4a5-41e8-997d-1412c081e000\" -> null\n      - kube_config    = (sensitive value)\n      - name           = \"test-cluster\" -> null\n      - region         = \"nyc1\" -> null\n      - service_subnet = \"10.245.0.0/16\" -> null\n      - status         = \"running\" -> null\n      - surge_upgrade  = true -> null\n      - tags           = [] -> null\n      - updated_at     = \"2022-07-24 06:37:27 +0000 UTC\" -> null\n      - urn            = \"do:kubernetes:49fd0517-a4a5-41e8-997d-1412c081e000\" -> null\n      - version        = \"1.22.11-do.0\" -> null\n      - vpc_uuid       = \"877cc187-97ad-426c-9301-079e3683d351\" -> null\n      - maintenance_policy {\n          - day        = \"any\" -> null\n          - duration   = \"4h0m0s\" -> null\n          - start_time = \"10:00\" -> null\n        }\n      - node_pool {\n          - actual_node_count = 3 -> null\n          - auto_scale        = false -> null\n          - id                = \"8df9b48c-329d-41f5-899e-b7b896e28e15\" -> null\n          - labels            = {} -> null\n          - max_nodes         = 0 -> null\n          - min_nodes         = 0 -> null\n          - name              = \"worker-pool\" -> null\n          - node_count        = 3 -> null\n          - nodes             = [\n              - {\n                  - created_at = \"2022-07-24 06:15:34 +0000 UTC\"\n                  - droplet_id = \"309670716\"\n                  - id         = \"b82aeb19-78d8-4571-91e6-a0c2cffdb1db\"\n                  - name       = \"worker-pool-c1766\"\n                  - status     = \"running\"\n                  - updated_at = \"2022-07-24 06:19:09 +0000 UTC\"\n                },\n              - {\n                  - created_at = \"2022-07-24 06:15:34 +0000 UTC\"\n                  - droplet_id = \"309670715\"\n                  - id         = \"6b0d1ecf-4e48-427b-99a9-0e153056238d\"\n                  - name       = \"worker-pool-c176t\"\n                  - status     = \"running\"\n                  - updated_at = \"2022-07-24 06:18:27 +0000 UTC\"\n                },\n              - {\n                  - created_at = \"2022-07-24 06:15:34 +0000 UTC\"\n                  - droplet_id = \"309670717\"\n                  - id         = \"5ea0e536-96aa-4171-8602-dc0ab19e9888\"\n                  - name       = \"worker-pool-c176l\"\n                  - status     = \"running\"\n                  - updated_at = \"2022-07-24 06:18:27 +0000 UTC\"\n                },\n            ] -> null\n          - size              = \"s-2vcpu-2gb\" -> null\n          - tags              = [] -> null\n        }\n    }\nPlan: 0 to add, 0 to change, 1 to destroy.\nDo you really want to destroy all resources?\n  Terraform will destroy all your managed infrastructure, as shown above.\n  There is no undo. Only 'yes' will be accepted to confirm.\n  Enter a value: yes\ndigitalocean_kubernetes_cluster.test: Destroying... [id=49fd0517-a4a5-41e8-997d-1412c081e000]\ndigitalocean_kubernetes_cluster.test: Destruction complete after 1s\nDestroy complete! Resources: 1 destroyed.\n\n```\n\nJust like that, the cluster is gone.\n\n### Summary\n\nAnd there you have it. That's how you can manage Kubernetes clusters with Terraform. You used DigitalOcean Kubernetes for this purpose, but as mentioned before, the process will be exactly the same for other providers. You'll just need to initiate different providers in **provider.tf** and then adjust the Kubernetes resource definition in **main.tf**. It's best to follow Terraform documentation for that. You'll find examples and argument references for major cloud providers.\n\nManaging infrastructure with Terraform definitely helps you save time, but did you know that you can also easily spin up an environment on [Release](https://release.com/) directly from your docker-compose file? [Give it a shot here](https://release.com/), and if you want to expand your Terraform knowledge further, take a look at our [post about for_each](https://release.com/blog/terraforms-for-each-examples).\n",
    "code": "var Component=(()=>{var u=Object.create;var a=Object.defineProperty;var h=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var g=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),y=(r,e)=>{for(var t in e)a(r,t,{get:e[t],enumerable:!0})},l=(r,e,t,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of p(e))!m.call(r,o)&&o!==t&&a(r,o,{get:()=>e[o],enumerable:!(i=h(e,o))||i.enumerable});return r};var b=(r,e,t)=>(t=r!=null?u(g(r)):{},l(e||!r||!r.__esModule?a(t,\"default\",{value:r,enumerable:!0}):t,r)),w=r=>l(a({},\"__esModule\",{value:!0}),r);var d=f((K,s)=>{s.exports=_jsx_runtime});var T={};y(T,{default:()=>v,frontmatter:()=>k});var n=b(d()),k={title:\"Terraform Kubernetes Deployment: A Detailed Walkthrough\",summary:\" Did you know that you can use Terraform for deployment of your Kubernetes clusters? Learn how and why to do it here.\",publishDate:\"Sat Aug 06 2022 22:18:19 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:6,categories:[\"kubernetes\",\"platform-engineering\"],mainImage:\"/blog-images/93cadc79db3755d6a026b27fe882105c.jpg\",imageAlt:\"Terraform Kubernetes Deployment: A Detailed Walkthrough\",showCTA:!0,ctaCopy:\"Looking to streamline Kubernetes deployment workflows? Try Release.com for ephemeral environments that mirror production, enabling faster testing and deployment cycles.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=terraform-kubernetes-deployment-a-detailed-walkthrough\",relatedPosts:[\"\"],ogImage:\"/blog-images/93cadc79db3755d6a026b27fe882105c.jpg\",excerpt:\" Did you know that you can use Terraform for deployment of your Kubernetes clusters? Learn how and why to do it here.\",tags:[\"kubernetes\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function c(r){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",img:\"img\",strong:\"strong\",pre:\"pre\",code:\"code\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"Terraform and Kubernetes are two of the most popular tools in their categories. Terraform is widely adopted as the tool of choice for infrastructure as code, and Kubernetes is number one when it comes to orchestrating containers. Is it possible to combine both? Sure! You can use Terraform to deploy your Kubernetes clusters. It's actually quite common, and it lets you deploy Kubernetes just like the rest of your infrastructure. In this post, you'll learn how to do it.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"terraform--kubernetes-how-and-why\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#terraform--kubernetes-how-and-why\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Terraform + Kubernetes: How and Why?\"]}),`\n`,(0,n.jsx)(e.p,{children:\"We have two main questions to answer here. How can you deploy Kubernetes with Terraform, and why would you do that? Let's start with the latter.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a82632ed72605aab10dcbb180de0d4d1.png\",alt:\"ApplicationDescription automatically generated with medium confidence\"})}),`\n`,(0,n.jsx)(e.p,{children:`The answer doesn't differ from \"Why would you deploy anything with Terraform?\" From that perspective, there's nothing special about Kubernetes, and you get the same benefit by using Terraform to deploy it as with any other infrastructure. You get automation, infrastructure versioning, reliability, and even the ability to perform infrastructure security scanning.`}),`\n`,(0,n.jsx)(e.p,{children:\"As for how, the answer is actually similar. You can deploy Kubernetes with Terraform just like any other infrastructure. Meaning, you first need to find a Kubernetes resource definition for Terraform (we'll show you that shortly), adjust some parameters for your needs, add it to your Terraform code, and you're done. And just like with any other resource, Terraform will be able to track changes to your cluster and update its configuration after you make changes to the code.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"deploying-kubernetes-first-steps\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#deploying-kubernetes-first-steps\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Deploying Kubernetes: First Steps\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Enough theory. Let's see how it works in practice. First, you need to find a Terraform provider for your cloud. If you want to deploy Kubernetes on \",(0,n.jsx)(e.a,{href:\"https://www.digitalocean.com/\",children:\"DigitalOcean\"}),\", you'd need to follow \",(0,n.jsx)(e.a,{href:\"https://registry.terraform.io/providers/digitalocean/digitalocean/latest/docs/resources/kubernetes_cluster\",children:\"this documentation\"}),\". For \",(0,n.jsx)(e.a,{href:\"https://azure.microsoft.com/en-us/\",children:\"Microsoft Azure\"}),\", you'd need to head \",(0,n.jsx)(e.a,{href:\"https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/kubernetes_cluster\",children:\"here\"}),\" for details. And for \",(0,n.jsx)(e.a,{href:\"https://cloud.google.com/\",children:\"Google Cloud\"}),\", you need to check \",(0,n.jsx)(e.a,{href:\"https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/container_cluster\",children:\"here\"}),\". These are just a few examples. But no matter which cloud provider you're using, the general approach will be the same. For today's example, we'll use DigitalOcean.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"To start from nothing, in the simplest scenario, you need to create two files named \",(0,n.jsx)(e.strong,{children:\"provider.tf\"}),\" and \",(0,n.jsx)(e.strong,{children:\"main.tf\"}),\". You could do it all in one file, but it's a good practice to separate providers and main resource definitions. In the code below, you can define your DigitalOcean provider for Terraform and pass your DigitalOcean token:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\nterraform {\n \\xA0required_providers {\n \\xA0 \\xA0digitalocean = {\n \\xA0 \\xA0 \\xA0source = \"digitalocean/digitalocean\"\n \\xA0 \\xA0 \\xA0version = \"~> 2.0\"\n \\xA0 \\xA0}\n \\xA0}\n}\nvariable \"do_token\" {\n \\xA0default = \"[replace_with_your_token]\"\n}\n\n# Configure the DigitalOcean Provider\n\nprovider \"digitalocean\" {\n \\xA0token = var.do_token\n}\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"In \",(0,n.jsx)(e.strong,{children:\"main.tf\"}),\" you can now define your Kubernetes.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`resource \"digitalocean_kubernetes_cluster\" \"test\" {\nname \\xA0 = \"test_cluster\"\nregion = \"nyc1\"\nversion = \"1.22.11-do.0\"\nnode_pool {\nname \\xA0 \\xA0 \\xA0 = \"worker-pool\"\nsize \\xA0 \\xA0 \\xA0 = \"s-2vcpu-2gb\"\nnode_count = 3\n}\n}\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that you have your Terraform files prepared, you need three things. First, you need to initiate the DigitalOcean provider. You can do that with \",(0,n.jsx)(e.strong,{children:\"terraform init\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\n# terraform init\n\nInitializing the backend...\nInitializing provider plugins...\n- Finding digitalocean/digitalocean versions matching \"~> 2.0\"...\n- Installing digitalocean/digitalocean v2.21.0...\n- Installed digitalocean/digitalocean v2.21.0 (signed by a HashiCorp partner, key ID F82037E524B9C0E8)\nPartner and community providers are signed by their developers.\nIf you'd like to know more about provider signing, you can read about it here:\nhttps://www.terraform.io/docs/cli/plugins/signing.html\nTerraform has created a lock file .terraform.lock.hcl to record the provider\nselections it made above. Include this file in your version control repository\nso that Terraform can guarantee to make the same selections by default when\nyou run \"terraform init\" in the future.\nTerraform has been successfully initialized!\nYou may now begin working with Terraform. Try running \"terraform plan\" to see\nany changes that are required for your infrastructure. All Terraform commands\nshould now work.\nIf you ever set or change modules or backend configuration for Terraform,\nrerun this command to reinitialize your working directory. If you forget, other\ncommands will detect it and remind you to do so if necessary.\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Then you can run your \",(0,n.jsx)(e.strong,{children:\"terraform plan\"}),\", which will show you planned changes to the infrastructure (which in this case should be creating a new Kubernetes cluster).\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\n# terraform plan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following\nsymbols:\n \\xA0+ create\nTerraform will perform the following actions:\n \\xA0# digitalocean_kubernetes_cluster.test will be created\n \\xA0+ resource \"digitalocean_kubernetes_cluster\" \"test\" {\n \\xA0 \\xA0 \\xA0+ cluster_subnet = (known after apply)\n \\xA0 \\xA0 \\xA0+ created_at \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ endpoint \\xA0 \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ ha \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = false\n \\xA0 \\xA0 \\xA0+ id \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ ipv4_address \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ kube_config \\xA0 \\xA0= (sensitive value)\n \\xA0 \\xA0 \\xA0+ name \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = \"test-cluster\"\n \\xA0 \\xA0 \\xA0+ region \\xA0 \\xA0 \\xA0 \\xA0 = \"nyc1\"\n \\xA0 \\xA0 \\xA0+ service_subnet = (known after apply)\n \\xA0 \\xA0 \\xA0+ status \\xA0 \\xA0 \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ surge_upgrade \\xA0= true\n \\xA0 \\xA0 \\xA0+ updated_at \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ urn \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= (known after apply)\n \\xA0 \\xA0 \\xA0+ version \\xA0 \\xA0 \\xA0 \\xA0= \"1.22.11-do.0\"\n \\xA0 \\xA0 \\xA0+ vpc_uuid \\xA0 \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0+ maintenance_policy {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ day \\xA0 \\xA0 \\xA0 \\xA0= (known after apply)\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ duration \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ start_time = (known after apply)\n \\xA0 \\xA0 \\xA0 \\xA0}\n \\xA0 \\xA0 \\xA0+ node_pool {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ actual_node_count = (known after apply)\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ auto_scale \\xA0 \\xA0 \\xA0 \\xA0= false\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ id \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= (known after apply)\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ name \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= \"worker-pool\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ node_count \\xA0 \\xA0 \\xA0 \\xA0= 3\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ nodes \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = (known after apply)\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0+ size \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= \"s-2vcpu-2gb\"\n \\xA0 \\xA0 \\xA0 \\xA0}\n \\xA0 \\xA0}\nPlan: 1 to add, 0 to change, 0 to destroy.\n\n`})}),`\n`,(0,n.jsxs)(e.p,{children:[\"The plan looks good. One resource will be added, and that's your Kubernetes cluster, so you can go ahead and apply the changes with \",(0,n.jsx)(e.strong,{children:\"terraform apply\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\n# terraform apply\n\n(...)\nPlan: 1 to add, 0 to change, 0 to destroy.\nDo you want to perform these actions?\n \\xA0Terraform will perform the actions described above.\n \\xA0Only 'yes' will be accepted to approve.\n \\xA0Enter a value: yes\ndigitalocean_kubernetes_cluster.test: Creating...\ndigitalocean_kubernetes_cluster.test: Still creating... [10s elapsed]\n(...)\ndigitalocean_kubernetes_cluster.test: Still creating... [7m10s elapsed]\ndigitalocean_kubernetes_cluster.test: Creation complete after 7m16s [id=49fd0517-a4a5-41e8-997d-1412c081e000]\nApply complete! Resources: 1 added, 0 changed, 0 destroyed.\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"If you now head to your DigitalOcean portal to validate, you can indeed see it there.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/4ae1114850cfa16a93e987103c7eb5e0.png\",alt:\"DigitalOcean portal\"})}),`\n`,(0,n.jsx)(e.p,{children:\"And that's it! That's how you deploy Kubernetes with Terraform.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/14771b0c5e49d3c50009a99ebfdcd091.jpeg\",alt:\"A picture containing device, control panelDescription automatically generated\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"deploying-kubernetes-next-steps\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#deploying-kubernetes-next-steps\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Deploying Kubernetes: Next Steps\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now that you know how it works in general, there are a few things that you need to learn next. First, all you've done is deploy basic, minimal Kubernetes. In more realistic scenarios, you'll probably want to parametrize more options for your Kubernetes. This, however, will highly depend on what you actually need. If you know what you need, you can head to the Terraform documentation and check \",(0,n.jsx)(e.a,{href:\"https://registry.terraform.io/providers/digitalocean/digitalocean/latest/docs/resources/kubernetes_cluster#argument-reference\",children:(0,n.jsx)(e.strong,{children:\"argument reference\"})}),\" for your Kubernetes resource. Find what you need and add it to your code.\"]}),`\n`,(0,n.jsx)(e.p,{children:\"For example, if you'd like your Kubernetes cluster to automatically upgrade, you can find the following in the documentation:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/0a5e2c452dafd796806726969310f5a2.png\",alt:\"Auto upgrade\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"To make your freshly deployed cluster automatically upgrade, you just need to add the following to your Kubernetes resource definition in \",(0,n.jsx)(e.strong,{children:\"main.tf\"}),\" as follows:\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`resource \"digitalocean_kubernetes_cluster\" \"test\" {\nname \\xA0 = \"test-cluster\"\nregion = \"nyc1\"\nversion = \"1.22.11-do.0\"\nauto_upgrade = true\nnode_pool {\nname \\xA0 \\xA0 \\xA0 = \"worker-pool\"\nsize \\xA0 \\xA0 \\xA0 = \"s-2vcpu-2gb\"\nnode_count = 3\n}\n}\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"But you're not there yet. You can quickly see in the DigitalOcean portal that the cluster currently does not automatically upgrade.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/a2dfca6ce7870345b1829ffe4f4a457e.png\",alt:\"auto upgrade in portal\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Automatic upgrades are disabled now, so you can run \",(0,n.jsx)(e.strong,{children:\"terraform plan\"}),\" again to check what Terraform will try to do.\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`# terraform plan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols: \\xA0~ update in-place\nTerraform will perform the following actions:\n  \\xA0# digitalocean_kubernetes_cluster.test will be updated in-place\n  ~ resource \"digitalocean_kubernetes_cluster\" \"test\" {\n  ~ auto_upgrade \\xA0 = false -> true\n  id \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = \"49fd0517-a4a5-41e8-997d-1412c081e000\"\n  name \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = \"test-cluster\"\n  tags \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = []\n  # (13 unchanged attributes hidden)\n  # (2 unchanged blocks hidden)\n  }\nPlan: 0 to add, 1 to change, 0 to destroy\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"As expected, Terraform will now try to update your cluster in place and add an auto-upgrade option to it. Let's go ahead and apply that change.\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\n# terraform apply\n\n(...)\nPlan: 0 to add, 1 to change, 0 to destroy.\nDo you want to perform these actions?\n \\xA0Terraform will perform the actions described above.\n \\xA0Only 'yes' will be accepted to approve.\n \\xA0Enter a value: yes\ndigitalocean_kubernetes_cluster.test: Modifying... [id=49fd0517-a4a5-41e8-997d-1412c081e000]\ndigitalocean_kubernetes_cluster.test: Modifications complete after 2s [id=49fd0517-a4a5-41e8-997d-1412c081e000]\nApply complete! Resources: 0 added, 1 changed, 0 destroyed.\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"The change was quickly applied to your cluster, and if you double check in the portal again, you can see that, indeed, the auto-upgrade option is now enabled.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/9730642cc35deb2d6c3b63888fe4d71e.png\",alt:\"auto-upgrade enabled\"})}),`\n`,(0,n.jsxs)(e.h3,{id:\"destroying-kubernetes\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#destroying-kubernetes\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Destroying Kubernetes\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"If you no longer want your Kubernetes cluster, you can destroy it just as easily as you deployed it. All you need to do is execute \",(0,n.jsx)(e.strong,{children:\"terraform destroy\"}),\".\"]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`\n# terraform destroy\n\ndigitalocean_kubernetes_cluster.test: Refreshing state... [id=49fd0517-a4a5-41e8-997d-1412c081e000]\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n \\xA0- destroy\nTerraform will perform the following actions:\n \\xA0# digitalocean_kubernetes_cluster.test will be destroyed\n \\xA0- resource \"digitalocean_kubernetes_cluster\" \"test\" {\n \\xA0 \\xA0 \\xA0- auto_upgrade \\xA0 = true -> null\n \\xA0 \\xA0 \\xA0- cluster_subnet = \"10.244.0.0/16\" -> null\n \\xA0 \\xA0 \\xA0- created_at \\xA0 \\xA0 = \"2022-07-24 06:15:34 +0000 UTC\" -> null\n \\xA0 \\xA0 \\xA0- endpoint \\xA0 \\xA0 \\xA0 = \"https://49fd0517-a4a5-41e8-997d-1412c081e000.k8s.ondigitalocean.com\" -> null\n \\xA0 \\xA0 \\xA0- ha \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = false -> null\n \\xA0 \\xA0 \\xA0- id \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = \"49fd0517-a4a5-41e8-997d-1412c081e000\" -> null\n \\xA0 \\xA0 \\xA0- kube_config \\xA0 \\xA0= (sensitive value)\n \\xA0 \\xA0 \\xA0- name \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = \"test-cluster\" -> null\n \\xA0 \\xA0 \\xA0- region \\xA0 \\xA0 \\xA0 \\xA0 = \"nyc1\" -> null\n \\xA0 \\xA0 \\xA0- service_subnet = \"10.245.0.0/16\" -> null\n \\xA0 \\xA0 \\xA0- status \\xA0 \\xA0 \\xA0 \\xA0 = \"running\" -> null\n \\xA0 \\xA0 \\xA0- surge_upgrade \\xA0= true -> null\n \\xA0 \\xA0 \\xA0- tags \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = [] -> null\n \\xA0 \\xA0 \\xA0- updated_at \\xA0 \\xA0 = \"2022-07-24 06:37:27 +0000 UTC\" -> null\n \\xA0 \\xA0 \\xA0- urn \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= \"do:kubernetes:49fd0517-a4a5-41e8-997d-1412c081e000\" -> null\n \\xA0 \\xA0 \\xA0- version \\xA0 \\xA0 \\xA0 \\xA0= \"1.22.11-do.0\" -> null\n \\xA0 \\xA0 \\xA0- vpc_uuid \\xA0 \\xA0 \\xA0 = \"877cc187-97ad-426c-9301-079e3683d351\" -> null\n \\xA0 \\xA0 \\xA0- maintenance_policy {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- day \\xA0 \\xA0 \\xA0 \\xA0= \"any\" -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- duration \\xA0 = \"4h0m0s\" -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- start_time = \"10:00\" -> null\n \\xA0 \\xA0 \\xA0 \\xA0}\n \\xA0 \\xA0 \\xA0- node_pool {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- actual_node_count = 3 -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- auto_scale \\xA0 \\xA0 \\xA0 \\xA0= false -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- id \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= \"8df9b48c-329d-41f5-899e-b7b896e28e15\" -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- labels \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= {} -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- max_nodes \\xA0 \\xA0 \\xA0 \\xA0 = 0 -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- min_nodes \\xA0 \\xA0 \\xA0 \\xA0 = 0 -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- name \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= \"worker-pool\" -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- node_count \\xA0 \\xA0 \\xA0 \\xA0= 3 -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- nodes \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 = [\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- created_at = \"2022-07-24 06:15:34 +0000 UTC\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- droplet_id = \"309670716\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- id \\xA0 \\xA0 \\xA0 \\xA0 = \"b82aeb19-78d8-4571-91e6-a0c2cffdb1db\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- name \\xA0 \\xA0 \\xA0 = \"worker-pool-c1766\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- status \\xA0 \\xA0 = \"running\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- updated_at = \"2022-07-24 06:19:09 +0000 UTC\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0},\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- created_at = \"2022-07-24 06:15:34 +0000 UTC\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- droplet_id = \"309670715\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- id \\xA0 \\xA0 \\xA0 \\xA0 = \"6b0d1ecf-4e48-427b-99a9-0e153056238d\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- name \\xA0 \\xA0 \\xA0 = \"worker-pool-c176t\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- status \\xA0 \\xA0 = \"running\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- updated_at = \"2022-07-24 06:18:27 +0000 UTC\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0},\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- {\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- created_at = \"2022-07-24 06:15:34 +0000 UTC\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- droplet_id = \"309670717\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- id \\xA0 \\xA0 \\xA0 \\xA0 = \"5ea0e536-96aa-4171-8602-dc0ab19e9888\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- name \\xA0 \\xA0 \\xA0 = \"worker-pool-c176l\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- status \\xA0 \\xA0 = \"running\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- updated_at = \"2022-07-24 06:18:27 +0000 UTC\"\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0},\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0] -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- size \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= \"s-2vcpu-2gb\" -> null\n \\xA0 \\xA0 \\xA0 \\xA0 \\xA0- tags \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0 \\xA0= [] -> null\n \\xA0 \\xA0 \\xA0 \\xA0}\n \\xA0 \\xA0}\nPlan: 0 to add, 0 to change, 1 to destroy.\nDo you really want to destroy all resources?\n \\xA0Terraform will destroy all your managed infrastructure, as shown above.\n \\xA0There is no undo. Only 'yes' will be accepted to confirm.\n \\xA0Enter a value: yes\ndigitalocean_kubernetes_cluster.test: Destroying... [id=49fd0517-a4a5-41e8-997d-1412c081e000]\ndigitalocean_kubernetes_cluster.test: Destruction complete after 1s\nDestroy complete! Resources: 1 destroyed.\n\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Just like that, the cluster is gone.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"summary\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#summary\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Summary\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"And there you have it. That's how you can manage Kubernetes clusters with Terraform. You used DigitalOcean Kubernetes for this purpose, but as mentioned before, the process will be exactly the same for other providers. You'll just need to initiate different providers in \",(0,n.jsx)(e.strong,{children:\"provider.tf\"}),\" and then adjust the Kubernetes resource definition in \",(0,n.jsx)(e.strong,{children:\"main.tf\"}),\". It's best to follow Terraform documentation for that. You'll find examples and argument references for major cloud providers.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Managing infrastructure with Terraform definitely helps you save time, but did you know that you can also easily spin up an environment on \",(0,n.jsx)(e.a,{href:\"https://release.com/\",children:\"Release\"}),\" directly from your docker-compose file? \",(0,n.jsx)(e.a,{href:\"https://release.com/\",children:\"Give it a shot here\"}),\", and if you want to expand your Terraform knowledge further, take a look at our \",(0,n.jsx)(e.a,{href:\"https://release.com/blog/terraforms-for-each-examples\",children:\"post about for_each\"}),\".\"]})]})}function _(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(c,r)})):c(r)}var v=_;return w(T);})();\n;return Component;"
  },
  "_id": "blog/posts/terraform-kubernetes-deployment-a-detailed-walkthrough.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/terraform-kubernetes-deployment-a-detailed-walkthrough.mdx",
    "sourceFileName": "terraform-kubernetes-deployment-a-detailed-walkthrough.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/terraform-kubernetes-deployment-a-detailed-walkthrough"
  },
  "type": "BlogPost",
  "computedSlug": "terraform-kubernetes-deployment-a-detailed-walkthrough"
}