{
  "title": "Kubernetes Secrets Management: A Practical Guide",
  "summary": "What are Kubernetes secrets? Learn how to do Kubernetes secrets management in this post.",
  "publishDate": "Wed Aug 31 2022 15:40:56 GMT+0000 (Coordinated Universal Time)",
  "author": "ashley-penney",
  "readingTime": 5,
  "categories": [
    "kubernetes",
    "platform-engineering"
  ],
  "mainImage": "/blog-images/a805033176a0e06862c60397cda841da.jpg",
  "imageAlt": "a laptop on a table",
  "showCTA": true,
  "ctaCopy": "Looking to enhance Kubernetes secrets security? Try Release for managing ephemeral environments securely.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-secrets-management-a-practical-guide",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/a805033176a0e06862c60397cda841da.jpg",
  "excerpt": "What are Kubernetes secrets? Learn how to do Kubernetes secrets management in this post.",
  "tags": [
    "kubernetes",
    "platform-engineering"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nIf you've worked with Kubernetes, you've probably heard of or used Kubernetes secrets. They are one of many Kubernetes resources. As the name suggests, they're meant to be used with secrets in your cluster. Imagine that your application running in a pod on a Kubernetes cluster needs some credentials. \n\nUsing a Kubernetes secret is the most straightforward way to provide these credentials to your application. But are they actually secure? What's the best way to use them? Should you use some other secret management solutions for your Kubernetes cluster? Read on to learn everything about Kubernetes secrets management. \n\n### Why Is Secret Management Important?\n\nBefore we dive into the do's and don'ts of Kubernetes secret management, let's take a moment to discuss why it's important in the first place. You see, Kubernetes secrets are a nice built-in semi-secret management solution, but they are not entirely secret (we'll get to that later), and they don't create a complete secret management solution. The typical problem that quickly arises when you use Kubernetes secrets is how to create and store them securely before they end up in a Kubernetes cluster. Kubernetes doesn't come with any integration to secret vaults out of the box. Therefore, they need a bit more engineering effort beyond simple creation to be secure. \n\n![TextDescription automatically generated](/blog-images/512dd9da29c34e645475ece9aca536a6.png)\n\n### Are Kubernetes Secrets Actually Secure?\n\nAs we mentioned, a critical aspect of Kubernetes secret management is the fact that Kubernetes secrets are not actually that secret. You may be surprised to hear that, but Kubernetes secrets are not encrypted and can be easily read by anyone with access to the cluster. Kubernetes secrets are only encoded using basic [base64](https://en.wikipedia.org/wiki/Base64) format. Let me show you. I'll apply the following YAML definition file of my Kubernetes secret to the cluster using the **kubectl apply** command: \n\n```yaml\n\n$ cat  | kubectl apply -f -\napiVersion: v1\nkind: Secret\nmetadata:\n  name: example-secret\ntype: Opaque\nstringData:\n  username: admin\n  password: super_secret_password\nEOF\nsecret/example-secret created\n\n```\n\nNow that we've created a secret, you'd expect it to be difficult to get the plain text values again from the cluster. If I execute **kubectl describe** on our secret value, Kubernetes won't show you the values by default: \n\n```yaml\n\nkubectl describe secret example-secret\nName:         example-secret\nNamespace:    default\nLabels:      \nAnnotations:  \nType:         Opaque\n\nData\n====\npassword:  21 bytes\nusername:  5 bytes\n\n```\n\nHowever, you can force it to show the values as follows: \n\n```yaml\n$ kubectl get secret example-secret -o jsonpath='{.data}'\n{password:c3VwZXJfc2VjcmV0X3Bhc3N3b3Jk username:YWRtaW4=}\n```\n\nNow, we can see the values, but as you would expect, they're not in plain text. However, as we mentioned before, the values are in base64, which is very easy to decode using base64 binary that comes installed on all modern operating systems. You only need to pipe the above output to a **base64 --decode** command: \n\n```yaml\n$ kubectl get secret example-secret -o jsonpath='{.data.username}' | base64 --decode\nadmin\n$ kubectl get secret example-secret -o jsonpath='{.data.password}' | base64 --decode\nsuper_secret_password\n```\n\nAs you can see, I didn't need to specify any encryption key or certificate. Anyone who has access to my cluster could do the same. \n\n### Is This a Problem?\n\nIs this a Kubernetes bug or vulnerability? No, not really. Kubernetes is simply not a secret management tool. It allows you to use Kubernetes secrets out of the box to get you started, but if you really want to stay secure, you'd use an external secret management solution. Another aspect of this is that it's possible to make Kubernetes secrets a bit more secure by applying RBAC rules to your cluster.\n\n![A picture containing insect, colorful, brightDescription automatically generated](/blog-images/6154afb5901303cb94833156057919d1.jpeg)\n\nAlso, in non-multi-tenant clusters, it's not that big of an issue since access to the cluster is limited to one team anyway. Everyone who has access to the cluster can probably access the secrets too. So, the fact that Kubernetes secrets are not that secret isn't automatically bad. It simply depends on the use case. \n\nFor customers who use Release in AWS, we automatically assign a KMS key at cluster creation so that their secrets are actually encrypted at rest. If you are managing your own EKS cluster, you can find out how to do that by following [these instructions](https://docs.aws.amazon.com/eks/latest/userguide/enable-kms.html).\n\nLet's get into how to actually manage secrets in Kubernetes. \n\n### Secrets vs. GitOps\n\nOne of the most common issues regarding secrets in Kubernetes is that you can't simply commit secret YAML definition files to your Git repository. This is because your secret would be there in plain text (or base64-encoded values if you use **data** instead of **stringData**—but as we just showed, base64 is easy to decode). And since manually applying secrets would be slow and not scalable, you need to find a way to store your YAML secrets definition securely. There are two popular approaches to doing so. Let's discuss both. \n\n### External Secrets\n\nThe first option is to use the [External Secrets](https://external-secrets.io/) tool. The idea behind it is quite clever. You store your secret values in a safe secret vault and only commit to Git repository YAML definition files that, instead of having the actual values, hold the reference to them. Then, you install External Secrets Operator on your cluster. And once you apply this reference YAML file, the ESO will go to your secrets vault, grab the true secret value, and create your ordinary Kubernetes secret on your cluster for you. Here's an example external secret resource definition: \n\n```yaml\n\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n  name: example\nspec:\n  refreshInterval: 1h\n  secretStoreRef:\n    name: secretstore-sample\n    kind: SecretStore\n  target:\n    name: secret-to-be-created\n    creationPolicy: Owner\n  data:\n  - secretKey: secret-key-to-be-managed\n    remoteRef:\n      key: provider-key\n      version: provider-key-version\n      property: provider-key-property\n  dataFrom:\n  - extract:\n      key: remote-key-in-the-provider\n\n```\n\nAs you can see, there are no actual secret values here, just pointers to where that value is. So, if that file were exposed and read by someone that shouldn't read it, they still wouldn't know your actual secrets without getting access to your secrets vault. \n\n### SealedSecrets\n\nAnother alternative is to use [SealedSecrets](https://github.com/bitnami-labs/sealed-secrets) project. It works differently but achieves the same result. SealedSecrets lets you encrypt the content of your Kubernetes secret YAML definition file. After encrypting, the file can be safely committed to the Git repository. It could even be exposed to the internet because only the SealedSecrets controller running in your cluster will be able to decrypt it. Here's what it looks like: \n\n```yaml\napiVersion: bitnami.com/v1alpha1\nkind: SealedSecret\nmetadata:\n   name: mysecret\n   namespace: mynamespace\nspec:\n   encryptedData:\n     foo: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEq.....\n```\n\nAfter the controller decrypts it, SealedSecrets will create an ordinary Kubernetes secret for you. Therefore, you won't need to adjust your application code. \n\n### Bypassing Kubernetes Secrets\n\nThe tools mentioned above have one thing in common: at the end of the day, they still create ordinary Kubernetes secrets. In highly regulated environments with strict security rules, it may be necessary to avoid Kubernetes secrets completely because they're only base64 encoded. In such cases, you need to find another solution for passing secrets to your pods. \n\n![TextDescription automatically generated with medium confidence](/blog-images/b3fc341ebfb84d4e7f0620414b5a8a24.png)\n\n### Kubernetes Secrets Store CSI Driver\n\nOne option is to use Kubernetes's own new [Secrets Store CSI Driver](https://secrets-store-csi-driver.sigs.k8s.io/). With this option, you store your secrets in the external secrets store. Then Secrets Store CSI Driver will load them from there and mount them directly to your pods as volumes. Therefore, you'll bypass Kubernetes secrets resources completely. \n\nHowever, there are two downsides to this approach. First is the fact that you'll need to adjust your application to load secrets from files instead of from [environment variables](https://release.com/blog/kubernetes-environment-variables) like with normal Kubernetes secrets. Second, Secrets Store CSI Driver currently has alpha functionality, so it may not be fully stable. \n\n### Hashicorp Vault Injector\n\nAnother option is to use Hashicorp Vault together with their [Secret Injection](https://www.vaultproject.io/docs/platform/k8s/injector) option. The concept is similar to the Kubernetes Secrets Store CSI Driver. You store your secrets in Hashicorp Vault. Then, Hashicorp Vault Agent Injector will get the secrets for you and load them directly to the pod, bypassing Kubernetes secrets. And similarly to CSI Driver, Hashicorp Injector will load your secrets as volumes. However, in the case of Hashicorp, it will be shared memory volume instead of standard inline volume. \n\n![A picture containing wall, indoor, white, oldDescription automatically generated](/blog-images/3916b4e78a41bb0ec3bf7b5f5bd7e78d.jpeg)\n\n### Keep Your Secrets Safe\n\nAs you can see, Kubernetes secret management isn't as straightforward as one may think. It's not as simple as creating Kubernetes secret resources for your pods. Besides the fact that these secrets are not so secret, you must also consider the whole secret life cycle. Even if base64 encoding is enough in your case, you still need to figure out how to store your Kubernetes secret YAML definitions without exposing them. \n\nIn this post, you learned a few ways to do that—and how to bypass Kubernetes secrets completely and pass your credentials directly to your pods. Your choice of option will depend on your use case and company specifics. \n\nIf you want to learn more about Kubernetes or Security, look at [our blog](https://release.com/blog) for more articles.\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,y=Object.prototype.hasOwnProperty;var b=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),g=(s,e)=>{for(var n in e)a(s,n,{get:e[n],enumerable:!0})},c=(s,e,n,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of m(e))!y.call(s,r)&&r!==n&&a(s,r,{get:()=>e[r],enumerable:!(o=d(e,r))||o.enumerable});return s};var f=(s,e,n)=>(n=s!=null?h(p(s)):{},c(e||!s||!s.__esModule?a(n,\"default\",{value:s,enumerable:!0}):n,s)),w=s=>c(a({},\"__esModule\",{value:!0}),s);var l=b((A,i)=>{i.exports=_jsx_runtime});var K={};g(K,{default:()=>S,frontmatter:()=>v});var t=f(l()),v={title:\"Kubernetes Secrets Management: A Practical Guide\",summary:\"What are Kubernetes secrets? Learn how to do Kubernetes secrets management in this post.\",publishDate:\"Wed Aug 31 2022 15:40:56 GMT+0000 (Coordinated Universal Time)\",author:\"ashley-penney\",readingTime:5,categories:[\"kubernetes\",\"platform-engineering\"],mainImage:\"/blog-images/a805033176a0e06862c60397cda841da.jpg\",imageAlt:\"a laptop on a table\",showCTA:!0,ctaCopy:\"Looking to enhance Kubernetes secrets security? Try Release for managing ephemeral environments securely.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=kubernetes-secrets-management-a-practical-guide\",relatedPosts:[\"\"],ogImage:\"/blog-images/a805033176a0e06862c60397cda841da.jpg\",excerpt:\"What are Kubernetes secrets? Learn how to do Kubernetes secrets management in this post.\",tags:[\"kubernetes\",\"platform-engineering\"],ctaButton:\"Try Release for Free\"};function u(s){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",img:\"img\",strong:\"strong\",pre:\"pre\",code:\"code\"},s.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"If you've worked with Kubernetes, you've probably heard of or used Kubernetes secrets. They are one of many Kubernetes resources. As the name suggests, they're meant to be used with secrets in your cluster. Imagine that your application running in a pod on a Kubernetes cluster needs some credentials.\\xA0\"}),`\n`,(0,t.jsx)(e.p,{children:\"Using a Kubernetes secret is the most straightforward way to provide these credentials to your application. But are they actually secure? What's the best way to use them? Should you use some other secret management solutions for your Kubernetes cluster? Read on to learn everything about Kubernetes secrets management.\\xA0\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"why-is-secret-management-important\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#why-is-secret-management-important\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Why Is Secret Management Important?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Before we dive into the do's and don'ts of Kubernetes secret management, let's take a moment to discuss why it's important in the first place. You see, Kubernetes secrets are a nice built-in semi-secret management solution, but they are not entirely secret (we'll get to that later), and they don't create a complete secret management solution. The typical problem that quickly arises when you use Kubernetes secrets is how to create and store them securely before they end up in a Kubernetes cluster. Kubernetes doesn't come with any integration to secret vaults out of the box. Therefore, they need a bit more engineering effort beyond simple creation to be secure.\\xA0\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/512dd9da29c34e645475ece9aca536a6.png\",alt:\"TextDescription automatically generated\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"are-kubernetes-secrets-actually-secure\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#are-kubernetes-secrets-actually-secure\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Are Kubernetes Secrets Actually Secure?\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"As we mentioned, a critical aspect of Kubernetes secret management is the fact that Kubernetes secrets are not actually that secret. You may be surprised to hear that, but Kubernetes secrets are not encrypted and can be easily read by anyone with access to the cluster. Kubernetes secrets are only encoded using basic \",(0,t.jsx)(e.a,{href:\"https://en.wikipedia.org/wiki/Base64\",children:\"base64\"}),\" format. Let me show you. I'll apply the following YAML definition file of my Kubernetes secret to the cluster using the \",(0,t.jsx)(e.strong,{children:\"kubectl apply\"}),\" command:\\xA0\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`\n$ cat \\xA0| kubectl apply -f -\napiVersion: v1\nkind: Secret\nmetadata:\n \\xA0name: example-secret\ntype: Opaque\nstringData:\n \\xA0username: admin\n \\xA0password: super_secret_password\nEOF\nsecret/example-secret created\n\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now that we've created a secret, you'd expect it to be difficult to get the plain text values again from the cluster. If I execute \",(0,t.jsx)(e.strong,{children:\"kubectl describe\"}),\" on our secret value, Kubernetes won't show you the values by default:\\xA0\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`\nkubectl describe secret example-secret\nName: \\xA0 \\xA0 \\xA0 \\xA0 example-secret\nNamespace: \\xA0 \\xA0default\nLabels: \\xA0 \\xA0 \\xA0\nAnnotations: \\xA0\nType: \\xA0 \\xA0 \\xA0 \\xA0 Opaque\n\nData\n====\npassword: \\xA021 bytes\nusername: \\xA05 bytes\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"However, you can force it to show the values as follows:\\xA0\"}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`$ kubectl get secret example-secret -o jsonpath='{.data}'\n{password:c3VwZXJfc2VjcmV0X3Bhc3N3b3Jk username:YWRtaW4=}\n`})}),`\n`,(0,t.jsxs)(e.p,{children:[\"Now, we can see the values, but as you would expect, they're not in plain text. However, as we mentioned before, the values are in base64, which is very easy to decode using base64 binary that comes installed on all modern operating systems. You only need to pipe the above output to a \",(0,t.jsx)(e.strong,{children:\"base64 --decode\"}),\" command:\\xA0\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`$ kubectl get secret example-secret -o jsonpath='{.data.username}' | base64 --decode\nadmin\n$ kubectl get secret example-secret -o jsonpath='{.data.password}' | base64 --decode\nsuper_secret_password\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"As you can see, I didn't need to specify any encryption key or certificate. Anyone who has access to my cluster could do the same.\\xA0\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"is-this-a-problem\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#is-this-a-problem\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Is This a Problem?\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Is this a Kubernetes bug or vulnerability? No, not really. Kubernetes is simply not a secret management tool. It allows you to use Kubernetes secrets out of the box to get you started, but if you really want to stay secure, you'd use an external secret management solution. Another aspect of this is that it's possible to make Kubernetes secrets a bit more secure by applying RBAC rules to your cluster.\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/6154afb5901303cb94833156057919d1.jpeg\",alt:\"A picture containing insect, colorful, brightDescription automatically generated\"})}),`\n`,(0,t.jsx)(e.p,{children:\"Also, in non-multi-tenant clusters, it's not that big of an issue since access to the cluster is limited to one team anyway. Everyone who has access to the cluster can probably access the secrets too. So, the fact that Kubernetes secrets are not that secret isn't automatically bad. It simply depends on the use case.\\xA0\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"For customers who use Release in AWS, we automatically assign a KMS key at cluster creation so that their secrets are actually encrypted at rest. If you are managing your own EKS cluster, you can find out how to do that by following \",(0,t.jsx)(e.a,{href:\"https://docs.aws.amazon.com/eks/latest/userguide/enable-kms.html\",children:\"these instructions\"}),\".\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Let's get into how to actually manage secrets in Kubernetes.\\xA0\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"secrets-vs-gitops\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#secrets-vs-gitops\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Secrets vs. GitOps\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"One of the most common issues regarding secrets in Kubernetes is that you can't simply commit secret YAML definition files to your Git repository. This is because your secret would be there in plain text (or base64-encoded values if you use \",(0,t.jsx)(e.strong,{children:\"data\"}),\" instead of \",(0,t.jsx)(e.strong,{children:\"stringData\"}),\"\\u2014but as we just showed, base64 is easy to decode). And since manually applying secrets would be slow and not scalable, you need to find a way to store your YAML secrets definition securely. There are two popular approaches to doing so. Let's discuss both.\\xA0\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"external-secrets\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#external-secrets\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"External Secrets\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"The first option is to use the \",(0,t.jsx)(e.a,{href:\"https://external-secrets.io/\",children:\"External Secrets\"}),\" tool. The idea behind it is quite clever. You store your secret values in a safe secret vault and only commit to Git repository YAML definition files that, instead of having the actual values, hold the reference to them. Then, you install External Secrets Operator on your cluster. And once you apply this reference YAML file, the ESO will go to your secrets vault, grab the true secret value, and create your ordinary Kubernetes secret on your cluster for you. Here's an example external secret resource definition:\\xA0\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`\napiVersion: external-secrets.io/v1beta1\nkind: ExternalSecret\nmetadata:\n \\xA0name: example\nspec:\n \\xA0refreshInterval: 1h\n \\xA0secretStoreRef:\n \\xA0 \\xA0name: secretstore-sample\n \\xA0 \\xA0kind: SecretStore\n \\xA0target:\n \\xA0 \\xA0name: secret-to-be-created\n \\xA0 \\xA0creationPolicy: Owner\n \\xA0data:\n \\xA0- secretKey: secret-key-to-be-managed\n \\xA0 \\xA0remoteRef:\n \\xA0 \\xA0 \\xA0key: provider-key\n \\xA0 \\xA0 \\xA0version: provider-key-version\n \\xA0 \\xA0 \\xA0property: provider-key-property\n \\xA0dataFrom:\n \\xA0- extract:\n \\xA0 \\xA0 \\xA0key: remote-key-in-the-provider\n\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"As you can see, there are no actual secret values here, just pointers to where that value is. So, if that file were exposed and read by someone that shouldn't read it, they still wouldn't know your actual secrets without getting access to your secrets vault.\\xA0\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"sealedsecrets\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#sealedsecrets\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"SealedSecrets\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another alternative is to use \",(0,t.jsx)(e.a,{href:\"https://github.com/bitnami-labs/sealed-secrets\",children:\"SealedSecrets\"}),\" project. It works differently but achieves the same result. SealedSecrets lets you encrypt the content of your Kubernetes secret YAML definition file. After encrypting, the file can be safely committed to the Git repository. It could even be exposed to the internet because only the SealedSecrets controller running in your cluster will be able to decrypt it. Here's what it looks like:\\xA0\"]}),`\n`,(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:\"language-yaml\",children:`apiVersion: bitnami.com/v1alpha1\nkind: SealedSecret\nmetadata:\n  \\xA0name: mysecret\n  \\xA0namespace: mynamespace\nspec:\n  \\xA0encryptedData:\n  \\xA0 \\xA0foo: AgBy3i4OJSWK+PiTySYZZA9rO43cGDEq.....\n`})}),`\n`,(0,t.jsx)(e.p,{children:\"After the controller decrypts it, SealedSecrets will create an ordinary Kubernetes secret for you. Therefore, you won't need to adjust your application code.\\xA0\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"bypassing-kubernetes-secrets\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#bypassing-kubernetes-secrets\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Bypassing Kubernetes Secrets\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The tools mentioned above have one thing in common: at the end of the day, they still create ordinary Kubernetes secrets. In highly regulated environments with strict security rules, it may be necessary to avoid Kubernetes secrets completely because they're only base64 encoded. In such cases, you need to find another solution for passing secrets to your pods.\\xA0\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/b3fc341ebfb84d4e7f0620414b5a8a24.png\",alt:\"TextDescription automatically generated with medium confidence\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"kubernetes-secrets-store-csi-driver\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#kubernetes-secrets-store-csi-driver\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Kubernetes Secrets Store CSI Driver\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"One option is to use Kubernetes's own new \",(0,t.jsx)(e.a,{href:\"https://secrets-store-csi-driver.sigs.k8s.io/\",children:\"Secrets Store CSI Driver\"}),\". With this option, you store your secrets in the external secrets store. Then Secrets Store CSI Driver will load them from there and mount them directly to your pods as volumes. Therefore, you'll bypass Kubernetes secrets resources completely.\\xA0\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"However, there are two downsides to this approach. First is the fact that you'll need to adjust your application to load secrets from files instead of from \",(0,t.jsx)(e.a,{href:\"https://release.com/blog/kubernetes-environment-variables\",children:\"environment variables\"}),\" like with normal Kubernetes secrets. Second, Secrets Store CSI Driver currently has alpha functionality, so it may not be fully stable.\\xA0\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"hashicorp-vault-injector\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#hashicorp-vault-injector\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Hashicorp Vault Injector\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Another option is to use Hashicorp Vault together with their \",(0,t.jsx)(e.a,{href:\"https://www.vaultproject.io/docs/platform/k8s/injector\",children:\"Secret Injection\"}),\" option. The concept is similar to the Kubernetes Secrets Store CSI Driver. You store your secrets in Hashicorp Vault. Then, Hashicorp Vault Agent Injector will get the secrets for you and load them directly to the pod, bypassing Kubernetes secrets. And similarly to CSI Driver, Hashicorp Injector will load your secrets as volumes. However, in the case of Hashicorp, it will be shared memory volume instead of standard inline volume.\\xA0\"]}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"/blog-images/3916b4e78a41bb0ec3bf7b5f5bd7e78d.jpeg\",alt:\"A picture containing wall, indoor, white, oldDescription automatically generated\"})}),`\n`,(0,t.jsxs)(e.h3,{id:\"keep-your-secrets-safe\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#keep-your-secrets-safe\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Keep Your Secrets Safe\"]}),`\n`,(0,t.jsx)(e.p,{children:\"As you can see, Kubernetes secret management isn't as straightforward as one may think. It's not as simple as creating Kubernetes secret resources for your pods. Besides the fact that these secrets are not so secret, you must also consider the whole secret life cycle. Even if base64 encoding is enough in your case, you still need to figure out how to store your Kubernetes secret YAML definitions without exposing them.\\xA0\"}),`\n`,(0,t.jsx)(e.p,{children:\"In this post, you learned a few ways to do that\\u2014and how to bypass Kubernetes secrets completely and pass your credentials directly to your pods. Your choice of option will depend on your use case and company specifics.\\xA0\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"If you want to learn more about Kubernetes or Security, look at \",(0,t.jsx)(e.a,{href:\"https://release.com/blog\",children:\"our blog\"}),\" for more articles.\"]})]})}function k(s={}){let{wrapper:e}=s.components||{};return e?(0,t.jsx)(e,Object.assign({},s,{children:(0,t.jsx)(u,s)})):u(s)}var S=k;return w(K);})();\n;return Component;"
  },
  "_id": "blog/posts/kubernetes-secrets-management-a-practical-guide.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/kubernetes-secrets-management-a-practical-guide.mdx",
    "sourceFileName": "kubernetes-secrets-management-a-practical-guide.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/kubernetes-secrets-management-a-practical-guide"
  },
  "type": "BlogPost",
  "computedSlug": "kubernetes-secrets-management-a-practical-guide"
}