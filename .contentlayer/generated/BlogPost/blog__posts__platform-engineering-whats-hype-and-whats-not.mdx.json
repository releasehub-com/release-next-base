{
  "title": "Platform Engineering: What’s Hype and What’s Not?",
  "summary": "Platform engineering is all the rage these days. Separate the facts from the hype with this roundup.",
  "publishDate": "Tue Jan 30 2024 21:35:44 GMT+0000 (Coordinated Universal Time)",
  "author": "tommy-mcclung",
  "readingTime": 5,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/aa447085214bc561a527d812197f6e52.png",
  "imageAlt": "Platform Engineering: What’s Hype and What’s Not?",
  "showCTA": true,
  "ctaCopy": "Looking to streamline software delivery at scale like platform engineering? Try Release for on-demand environments mirroring production.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=platform-engineering-whats-hype-and-whats-not",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/aa447085214bc561a527d812197f6e52.png",
  "excerpt": "Platform engineering is all the rage these days. Separate the facts from the hype with this roundup.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nThere’s a sea change happening in the software development world. The merging of developers and operations that gave us DevOps may be entering a new chapter. In this new world, the emerging discipline of platform engineering is quickly gaining popularity.\n\nPlatform engineering is the practice of designing and building self-service capabilities to reduce cognitive load for developers and to facilitate fast-flow software delivery. Many large organizations have struggled to reap the benefits of DevOps, in part because shifting more operational and security concerns “left” and into the domain of software developers has created bottlenecks for dev teams. At the same time, faced with a growing cognitive burden of repetitive, time-consuming tasks that kick them out of the flow state of highly productive coding, many devs want less and less to do with ops and the “you build it, you run it” paradigm.\n\nPlatform engineering is emerging as the solution to many of these challenges. But in all the buzz around it, it’s hard to know what’s real and what’s not. To help you separate the facts from the hype, here’s a round-up of viewpoints on what platform engineering is and is not.\n\n### Platform Engineering Is New – Hype\n\nThere are those who hail platform engineering as [the new kid on the block](https://www.youtube.com/watch?v=wXyNHngEN-s). But there’s nothing new about the building of digital platforms as a means of delivering software at scale. It even pre-dates the birth of the DevOps movement in the mid-2000s. According to [Puppet’s _2023 State of DevOps Report_](https://support.puppet.com/hc/en-us/articles/221368047-The-2023-State-of-DevOps-Report-is-here-), large software companies have been taking a platform approach for decades as a way to enable developer teams to build, ship, and operate applications more quickly and at higher quality.\n\nWhat is new, especially in the enterprise space, is the rapidly growing traction of platform engineering as a way for larger companies to improve software delivery at scale. Gartner identified platform engineering (which it interchangeably calls “platform ops”) as one of the [Top Strategic Technology Trends of 2023](https://www.gartner.com/en/information-technology/insights/top-technology-trends). Gartner analysts predict that 80% of software engineering organizations will establish platform teams by 2026, and 75% of those will include developer self-service portals.\n\n### Platform Engineering Has Toppled DevOps – Hype\n\nThose who claim that DevOps is dead and that platform engineering has supplanted it are engaging in hyperbole. “DevOps is dead, long live Platform Engineering!” [tweeted](https://twitter.com/sidpalas/status/1551936840453820417) software engineer and DevOps commentator Sid Palas in 2022. “1. Developers don’t like dealing with infra, 2. Companies need control of their infra as they grow. Platform engineering enables these two facts to coexist.”\n\n### Platform Engineering Is the Next Evolution of DevOps and SRE – Fact\n\nRather than dealing a death blow to DevOps, a more accurate take is that platform engineering is the next evolution of DevOps and SRE (site reliability engineering). In particular, it benefits developers struggling with code production bottlenecks as they wait on internal approvals or fulfillment. It also helps devs deliver on their own timeline rather than that of their IT team. And it helps operator types (such as SREs or DevOps engineers) who are feeling the pain of repetitive request fulfillment and operational firefighting — busy work that keeps them from building their vision for the future.\n\n### Platform Engineering Should Embrace DevOps Culture – Fact\n\nThe agile development practices that are at the core of DevOps culture — such as collaboration, communication, and continuous improvement — have not extended to the operations domain. This has hobbled the ability of agile development teams to quickly deliver products. In order not to perpetuate this dynamic, DevOps team culture should evolve to support platform engineering, and platform teams should embrace DevOps team culture.\n\n### Platform Engineering Is a Con – Hype\n\nThere are those, like independent technology consultant Sam Newman, who argue [platform engineering is just another vendor-generated label to be slapped on to old practices](https://samnewman.io/blog/2023/02/08/dont-call-it-a-platform/) in a bid to mask the horrendously complex technology ecosystems we’ve accumulated. Newman’s concern is that “single-issue” platform teams risk becoming the very bottleneck they’re supposed to alleviate, and can become so focused on managing the tool that they forget about outcomes. Rather than using names like Platform Team, Newman suggests more outcome-oriented labels such as “Delivery Support” or even better “Delivery Enablement.”\n\n### Platform Engineering Is All about Scaling – Fact\n\nPlatform engineering solves the challenges of scaling and accelerating DevOps adoption by dedicating a team to the delivery of a shared self-service platform for app developers. It works best for enterprises with more mature DevOps practices who need to scale and move fast. It often does not make sense in smaller companies, for a single development team, or when multiple divergent platforms need to be supported, where scale is not a driving factor of success yet.\n\n### Platform Engineering Centers on IDPs and Golden Paths – Fact\n\nOne definition of platform engineering is the practice of creating a reusable set of standardized tools, components, and automated processes, often referred to as an [internal developer platform](https://internaldeveloperplatform.org/what-is-an-internal-developer-platform/) (IDP). IDPs, and the teams that build them, provide paths of least resistance that developers can take to complete their day-to-day tasks. These “golden paths” come with recommended tools and best security practices built in, enabling developers to self-serve and self-manage their code.\n\n### Platform Engineering Requires a Platform as Product Approach – Fact\n\nGartner and others recommend treating your platform as a product by treating the developers who use it as your customers, so that they in turn can deliver services to your organization’s customers. Like any other product, pushing your platform on to developers without their input is unlikely to produce positive outcomes. So it’s essential to talk to your internal consumers to solve for their needs. Many traditional infrastructure teams don’t do this and often don’t even understand the workloads running on their platforms.\n\n## Striking a Balance\n\nSuccessful IDPs achieve a balance between allowing developers to remain in the flow state of highly productive coding while eliminating repetitive tasks through automated, full-stack environments. Developers can deliver apps faster because platform engineers smooth the path for them, enabling them to create their own environment with every check-in. This allows devs to review, share, and test apps without waiting in line or worrying about code conflicts. When done well, platform engineering delivers best-in-class developer experiences; provides choices of leading tools, platforms and clouds across the software development lifecycle; and gives self-service access to full-stack environments to every developer.\n",
    "code": "var Component=(()=>{var p=Object.create;var i=Object.defineProperty;var d=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,f=Object.prototype.hasOwnProperty;var u=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),v=(n,e)=>{for(var a in e)i(n,a,{get:e[a],enumerable:!0})},s=(n,e,a,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let o of g(e))!f.call(n,o)&&o!==a&&i(n,o,{get:()=>e[o],enumerable:!(r=d(e,o))||r.enumerable});return n};var w=(n,e,a)=>(a=n!=null?p(m(n)):{},s(e||!n||!n.__esModule?i(a,\"default\",{value:n,enumerable:!0}):a,n)),y=n=>s(i({},\"__esModule\",{value:!0}),n);var c=u((T,l)=>{l.exports=_jsx_runtime});var P={};v(P,{default:()=>D,frontmatter:()=>b});var t=w(c()),b={title:\"Platform Engineering: What\\u2019s Hype and What\\u2019s Not?\",summary:\"Platform engineering is all the rage these days. Separate the facts from the hype with this roundup.\",publishDate:\"Tue Jan 30 2024 21:35:44 GMT+0000 (Coordinated Universal Time)\",author:\"tommy-mcclung\",readingTime:5,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/aa447085214bc561a527d812197f6e52.png\",imageAlt:\"Platform Engineering: What\\u2019s Hype and What\\u2019s Not?\",showCTA:!0,ctaCopy:\"Looking to streamline software delivery at scale like platform engineering? Try Release for on-demand environments mirroring production.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=platform-engineering-whats-hype-and-whats-not\",relatedPosts:[\"\"],ogImage:\"/blog-images/aa447085214bc561a527d812197f6e52.png\",excerpt:\"Platform engineering is all the rage these days. Separate the facts from the hype with this roundup.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function h(n){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",em:\"em\",h2:\"h2\"},n.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:\"There\\u2019s a sea change happening in the software development world. The merging of developers and operations that gave us DevOps may be entering a new chapter. In this new world, the emerging discipline of platform engineering is quickly gaining popularity.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Platform engineering is the practice of designing and building self-service capabilities to reduce cognitive load for developers and to facilitate fast-flow software delivery. Many large organizations have struggled to reap the benefits of DevOps, in part because shifting more operational and security concerns \\u201Cleft\\u201D and into the domain of software developers has created bottlenecks for dev teams. At the same time, faced with a growing cognitive burden of repetitive, time-consuming tasks that kick them out of the flow state of highly productive coding, many devs want less and less to do with ops and the \\u201Cyou build it, you run it\\u201D paradigm.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Platform engineering is emerging as the solution to many of these challenges. But in all the buzz around it, it\\u2019s hard to know what\\u2019s real and what\\u2019s not. To help you separate the facts from the hype, here\\u2019s a round-up of viewpoints on what platform engineering is and is not.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-is-new--hype\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-is-new--hype\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Is New \\u2013 Hype\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"There are those who hail platform engineering as \",(0,t.jsx)(e.a,{href:\"https://www.youtube.com/watch?v=wXyNHngEN-s\",children:\"the new kid on the block\"}),\". But there\\u2019s nothing new about the building of digital platforms as a means of delivering software at scale. It even pre-dates the birth of the DevOps movement in the mid-2000s. According to \",(0,t.jsxs)(e.a,{href:\"https://support.puppet.com/hc/en-us/articles/221368047-The-2023-State-of-DevOps-Report-is-here-\",children:[\"Puppet\\u2019s \",(0,t.jsx)(e.em,{children:\"2023 State of DevOps Report\"})]}),\", large software companies have been taking a platform approach for decades as a way to enable developer teams to build, ship, and operate applications more quickly and at higher quality.\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"What is new, especially in the enterprise space, is the rapidly growing traction of platform engineering as a way for larger companies to improve software delivery at scale. Gartner identified platform engineering (which it interchangeably calls \\u201Cplatform ops\\u201D) as one of the \",(0,t.jsx)(e.a,{href:\"https://www.gartner.com/en/information-technology/insights/top-technology-trends\",children:\"Top Strategic Technology Trends of 2023\"}),\". Gartner analysts predict that 80% of software engineering organizations will establish platform teams by 2026, and 75% of those will include developer self-service portals.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-has-toppled-devops--hype\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-has-toppled-devops--hype\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Has Toppled DevOps \\u2013 Hype\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Those who claim that DevOps is dead and that platform engineering has supplanted it are engaging in hyperbole. \\u201CDevOps is dead, long live Platform Engineering!\\u201D \",(0,t.jsx)(e.a,{href:\"https://twitter.com/sidpalas/status/1551936840453820417\",children:\"tweeted\"}),\" software engineer and DevOps commentator Sid Palas in 2022. \\u201C1. Developers don\\u2019t like dealing with infra, 2. Companies need control of their infra as they grow. Platform engineering enables these two facts to coexist.\\u201D\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-is-the-next-evolution-of-devops-and-sre--fact\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-is-the-next-evolution-of-devops-and-sre--fact\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Is the Next Evolution of DevOps and SRE \\u2013 Fact\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Rather than dealing a death blow to DevOps, a more accurate take is that platform engineering is the next evolution of DevOps and SRE (site reliability engineering). In particular, it benefits developers struggling with code production bottlenecks as they wait on internal approvals or fulfillment. It also helps devs deliver on their own timeline rather than that of their IT team. And it helps operator types (such as SREs or DevOps engineers) who are feeling the pain of repetitive request fulfillment and operational firefighting \\u2014 busy work that keeps them from building their vision for the future.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-should-embrace-devops-culture--fact\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-should-embrace-devops-culture--fact\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Should Embrace DevOps Culture \\u2013 Fact\"]}),`\n`,(0,t.jsx)(e.p,{children:\"The agile development practices that are at the core of DevOps culture \\u2014 such as collaboration, communication, and continuous improvement \\u2014 have not extended to the operations domain. This has hobbled the ability of agile development teams to quickly deliver products. In order not to perpetuate this dynamic, DevOps team culture should evolve to support platform engineering, and platform teams should embrace DevOps team culture.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-is-a-con--hype\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-is-a-con--hype\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Is a Con \\u2013 Hype\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"There are those, like independent technology consultant Sam Newman, who argue \",(0,t.jsx)(e.a,{href:\"https://samnewman.io/blog/2023/02/08/dont-call-it-a-platform/\",children:\"platform engineering is just another vendor-generated label to be slapped on to old practices\"}),\" in a bid to mask the horrendously complex technology ecosystems we\\u2019ve accumulated. Newman\\u2019s concern is that \\u201Csingle-issue\\u201D platform teams risk becoming the very bottleneck they\\u2019re supposed to alleviate, and can become so focused on managing the tool that they forget about outcomes. Rather than using names like Platform Team, Newman suggests more outcome-oriented labels such as \\u201CDelivery Support\\u201D or even better \\u201CDelivery Enablement.\\u201D\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-is-all-about-scaling--fact\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-is-all-about-scaling--fact\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Is All about Scaling \\u2013 Fact\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Platform engineering solves the challenges of scaling and accelerating DevOps adoption by dedicating a team to the delivery of a shared self-service platform for app developers. It works best for enterprises with more mature DevOps practices who need to scale and move fast. It often does not make sense in smaller companies, for a single development team, or when multiple divergent platforms need to be supported, where scale is not a driving factor of success yet.\"}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-centers-on-idps-and-golden-paths--fact\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-centers-on-idps-and-golden-paths--fact\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Centers on IDPs and Golden Paths \\u2013 Fact\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"One definition of platform engineering is the practice of creating a reusable set of standardized tools, components, and automated processes, often referred to as an \",(0,t.jsx)(e.a,{href:\"https://internaldeveloperplatform.org/what-is-an-internal-developer-platform/\",children:\"internal developer platform\"}),\" (IDP). IDPs, and the teams that build them, provide paths of least resistance that developers can take to complete their day-to-day tasks. These \\u201Cgolden paths\\u201D come with recommended tools and best security practices built in, enabling developers to self-serve and self-manage their code.\"]}),`\n`,(0,t.jsxs)(e.h3,{id:\"platform-engineering-requires-a-platform-as-product-approach--fact\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#platform-engineering-requires-a-platform-as-product-approach--fact\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Platform Engineering Requires a Platform as Product Approach \\u2013 Fact\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Gartner and others recommend treating your platform as a product by treating the developers who use it as your customers, so that they in turn can deliver services to your organization\\u2019s customers. Like any other product, pushing your platform on to developers without their input is unlikely to produce positive outcomes. So it\\u2019s essential to talk to your internal consumers to solve for their needs. Many traditional infrastructure teams don\\u2019t do this and often don\\u2019t even understand the workloads running on their platforms.\"}),`\n`,(0,t.jsxs)(e.h2,{id:\"striking-a-balance\",children:[(0,t.jsx)(e.a,{className:\"anchor\",href:\"#striking-a-balance\",children:(0,t.jsx)(e.span,{className:\"icon icon-link\"})}),\"Striking a Balance\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Successful IDPs achieve a balance between allowing developers to remain in the flow state of highly productive coding while eliminating repetitive tasks through automated, full-stack environments. Developers can deliver apps faster because platform engineers smooth the path for them, enabling them to create their own environment with every check-in. This allows devs to review, share, and test apps without waiting in line or worrying about code conflicts. When done well, platform engineering delivers best-in-class developer experiences; provides choices of leading tools, platforms and clouds across the software development lifecycle; and gives self-service access to full-stack environments to every developer.\"})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var D=k;return y(P);})();\n;return Component;"
  },
  "_id": "blog/posts/platform-engineering-whats-hype-and-whats-not.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/platform-engineering-whats-hype-and-whats-not.mdx",
    "sourceFileName": "platform-engineering-whats-hype-and-whats-not.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/platform-engineering-whats-hype-and-whats-not"
  },
  "type": "BlogPost",
  "computedSlug": "platform-engineering-whats-hype-and-whats-not"
}