{
  "title": "How to edit a file in a Docker container",
  "summary": "See how to edit files in Docker containers with command line editors or through connecting VS Code.",
  "publishDate": "Tue Jul 19 2022 07:37:33 GMT+0000 (Coordinated Universal Time)",
  "author": "regis-wilson",
  "readingTime": 3,
  "categories": [
    "platform-engineering",
    "product"
  ],
  "mainImage": "/blog-images/9ad01e7b63d384efa30ad9fe35b9e74b.jpg",
  "imageAlt": "Some files on a table",
  "showCTA": true,
  "ctaCopy": "Looking to edit files in Docker containers hassle-free? Try Release.com for ephemeral environments that simplify setup and teardown.",
  "ctaLink": "https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-edit-a-file-in-a-docker-container",
  "relatedPosts": [
    ""
  ],
  "ogImage": "/blog-images/9ad01e7b63d384efa30ad9fe35b9e74b.jpg",
  "excerpt": "See how to edit files in Docker containers with command line editors or through connecting VS Code.",
  "tags": [
    "platform-engineering",
    "product"
  ],
  "ctaButton": "Try Release for Free",
  "body": {
    "raw": "\nYou want to edit a file in your Docker container, but you've run into an error that leaves you with none of the tools you need to make your changes. Now what?\n\nDocker intentionally keeps containers as lean as possible with no unnecessary packages installed to maximize performance and stability. Unfortunately, this also means Docker containers don't have a file editor like Vim or Nano preinstalled.\n\nIn this guide, we'll show you how to install an editor, make the changes you need to, and return the container to its original state, both from the command line and using the Docker extension inside VS Code.\n\nFirst, though, some housekeeping. It's considered bad practice to edit Docker files currently running in a production environment, and, once you've made your change, you should remove any packages you installed to do so (the editor, for example).\n\nHere's our step-by-step guide to editing a file in Docker.\n\n### Option 1: Edit from the command line\n\n#### #1 Log in to your container\n\nIf your container is not already running, run the container with the following:\n\n```yaml\ndocker run --name  -d -t\n```\n\nTo check all your running containers, you can use the command:\n\n```yaml\ndocker ps\n```\n\nYou should be met with something like this:\n\n![The console showing the output of docker ps listing the container ID and other information.](/blog-images/5269f2732d8885273f30405faaabebd6.png)\n\nThis list indicates your target container is up and running. Note that every container has a discrete ID, which we'll need to gain root access to the container.\n\nTo gain root access to the container, run:\n\n```yaml\ndocker exec -it\n```\n\nYou should see something like this:\n\n![A prompt showing that root login has succeeded.](/blog-images/449be2be0b420fbd7378193201c1564d.png)\n\nAs you can see, **root@CONTAINER_ID:/#** indicates we now have root access to the container.\n\n#### #2 Install the editor\n\nIt's a good idea to update your package manager before you install the editor. This ensures that you install the latest stable release of the editor. On Ubuntu, that command is:\n\n```yaml\napt-get update\n```\n\nTo install your preferred editor, such as Vim, Nano or GNU Emacs:\n\n```yaml\napt-get install\n```\n\nFor example, to install Vim:\n\n```yaml\napt-get install vim\n```\n\n#### #3 Edit the File\n\nTo edit the file, ensure you are in the appropriate directory and use the command:\n\n```yaml\nvim yourfilename.yaml\n```\n\nOnce you've made the edit to the file, you can remove the editor (in our case, Vim) like this:\n\n```yaml\napt-get remove vim\n```\n\nOr like this:\n\n```yaml\napt-get purge vim\n```\n\nThe command \"remove\" will remove only Vim, and no other config files or dependencies involved in the initial install. The command \"purge\" will remove all config files associated with Vim. In the interest of leaving no trace, the purge command is probably appropriate in this case.\n\nYour package manager may change depending on your OS. These commands are associated with Ubuntu and Vim.\n\n### Persisting an editor for regular changes\n\nThe above steps are useful for one-off changes, but if you need to make changes often – in a development environment, for example – it's best to add your editor to your Dockerfile. This will ensure your chosen editor is always available whenever you spin up another instance of your container.\n\nAdd your editor to the Dockerfile like this:\n\n```yaml\nRUN[\"apt-get\", \"update\"]\nRUN[\"apt-get\", \"install\", \"vim\"]\n```\n\nEvery image created with that Dockerfile will have Vim pre-installed and ready to go.\n\nYou can replace \"Vim\" with your editor of choice, such as Nano or GNU Emacs. Keep in mind that the commands in the square brackets are specific to Ubuntu Linux. You may need to adapt these to the operating system you are running in your Docker container.\n\n### Option 2: Edit from VS Code\n\nIf you prefer to use a GUI editor (for example, if you'd like to use your mouse to navigate through large files, or cut and paste text), you can use VS Code.\n\nThis option requires both the Visual Studio Code IDE and the Docker extension from Microsoft. To install the extension, navigate to the extensions tab in VS Code and type in \"Docker\".\n\n![Search results in VS Code extensions for docker.](/blog-images/c65ee7d20b5528430ddb2927aaac44c2.png)\n\nBe sure to select the Docker extension from Microsoft. This extension allows you to easily manage any containers on your system directly from its UI.\n\n![VS Code displaying a file inside the docker container.](/blog-images/70ac9ac2bf3cda7f1eba36a594a7cc7e.png)\n\nFrom here, treating a container like any file directory, you can navigate to and open files in that container, and make your changes right in VS Code.\n\n### Closing remarks\n\nNow that you know how to edit files in a Docker file, it's important to take note of the best practice for it.\n\nEditing files in a running Docker container is only recommended when working in a development environment during conceptualisation and when building proof-of-concepts.\n\nOnce you've made changes to your project in Docker containers, save a new image with those changes in place. This leaves flexibility for testing two containers comparatively while ensuring stability and consistency across containers.\n\n‍\n\n‍\n",
    "code": "var Component=(()=>{var h=Object.create;var t=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),y=(i,e)=>{for(var o in e)t(i,o,{get:e[o],enumerable:!0})},c=(i,e,o,r)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of u(e))!g.call(i,a)&&a!==o&&t(i,a,{get:()=>e[a],enumerable:!(r=m(e,a))||r.enumerable});return i};var k=(i,e,o)=>(o=i!=null?h(p(i)):{},c(e||!i||!i.__esModule?t(o,\"default\",{value:i,enumerable:!0}):o,i)),b=i=>c(t({},\"__esModule\",{value:!0}),i);var l=f((T,s)=>{s.exports=_jsx_runtime});var D={};y(D,{default:()=>N,frontmatter:()=>w});var n=k(l()),w={title:\"How to edit a file in a Docker container\",summary:\"See how to edit files in Docker containers with command line editors or through connecting VS Code.\",publishDate:\"Tue Jul 19 2022 07:37:33 GMT+0000 (Coordinated Universal Time)\",author:\"regis-wilson\",readingTime:3,categories:[\"platform-engineering\",\"product\"],mainImage:\"/blog-images/9ad01e7b63d384efa30ad9fe35b9e74b.jpg\",imageAlt:\"Some files on a table\",showCTA:!0,ctaCopy:\"Looking to edit files in Docker containers hassle-free? Try Release.com for ephemeral environments that simplify setup and teardown.\",ctaLink:\"https://release.com/signup?utm_source=blog&utm_medium=cta&utm_campaign=blog-cta&utm_content=how-to-edit-a-file-in-a-docker-container\",relatedPosts:[\"\"],ogImage:\"/blog-images/9ad01e7b63d384efa30ad9fe35b9e74b.jpg\",excerpt:\"See how to edit files in Docker containers with command line editors or through connecting VS Code.\",tags:[\"platform-engineering\",\"product\"],ctaButton:\"Try Release for Free\"};function d(i){let e=Object.assign({p:\"p\",h3:\"h3\",a:\"a\",span:\"span\",h4:\"h4\",pre:\"pre\",code:\"code\",img:\"img\",strong:\"strong\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"You want to edit a file in your Docker container, but you've run into an error that leaves you with none of the tools you need to make your changes. Now what?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Docker intentionally keeps containers as lean as possible with no unnecessary packages installed to maximize performance and stability. Unfortunately, this also means Docker containers don't have a file editor like Vim or Nano preinstalled.\"}),`\n`,(0,n.jsx)(e.p,{children:\"In this guide, we'll show you how to install an editor, make the changes you need to, and return the container to its original state, both from the command line and using the Docker extension inside VS Code.\"}),`\n`,(0,n.jsx)(e.p,{children:\"First, though, some housekeeping. It's considered bad practice to edit Docker files currently running in a production environment, and, once you've made your change, you should remove any packages you installed to do so (the editor, for example).\"}),`\n`,(0,n.jsx)(e.p,{children:\"Here's our step-by-step guide to editing a file in Docker.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"option-1-edit-from-the-command-line\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#option-1-edit-from-the-command-line\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Option 1: Edit from the command line\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"1-log-in-to-your-container\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#1-log-in-to-your-container\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"#1 Log in to your container\"]}),`\n`,(0,n.jsx)(e.p,{children:\"If your container is not already running, run the container with the following:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`docker run --name  -d -t\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"To check all your running containers, you can use the command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`docker ps\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You should be met with something like this:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/5269f2732d8885273f30405faaabebd6.png\",alt:\"The console showing the output of docker ps listing the container ID and other information.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"This list indicates your target container is up and running. Note that every container has a discrete ID, which we'll need to gain root access to the container.\"}),`\n`,(0,n.jsx)(e.p,{children:\"To gain root access to the container, run:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`docker exec -it\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"You should see something like this:\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/449be2be0b420fbd7378193201c1564d.png\",alt:\"A prompt showing that root login has succeeded.\"})}),`\n`,(0,n.jsxs)(e.p,{children:[\"As you can see, \",(0,n.jsx)(e.strong,{children:\"root@CONTAINER_ID:/#\"}),\" indicates we now have root access to the container.\"]}),`\n`,(0,n.jsxs)(e.h4,{id:\"2-install-the-editor\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#2-install-the-editor\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"#2 Install the editor\"]}),`\n`,(0,n.jsx)(e.p,{children:\"It's a good idea to update your package manager before you install the editor. This ensures that you install the latest stable release of the editor. On Ubuntu, that command is:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`apt-get update\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"To install your preferred editor, such as Vim, Nano or GNU Emacs:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`apt-get install\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"For example, to install Vim:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`apt-get install vim\n`})}),`\n`,(0,n.jsxs)(e.h4,{id:\"3-edit-the-file\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#3-edit-the-file\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"#3 Edit the File\"]}),`\n`,(0,n.jsx)(e.p,{children:\"To edit the file, ensure you are in the appropriate directory and use the command:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`vim yourfilename.yaml\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Once you've made the edit to the file, you can remove the editor (in our case, Vim) like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`apt-get remove vim\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Or like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`apt-get purge vim\n`})}),`\n`,(0,n.jsx)(e.p,{children:'The command \"remove\" will remove only Vim, and no other config files or dependencies involved in the initial install. The command \"purge\" will remove all config files associated with Vim. In the interest of leaving no trace, the purge command is probably appropriate in this case.'}),`\n`,(0,n.jsx)(e.p,{children:\"Your package manager may change depending on your OS. These commands are associated with Ubuntu and Vim.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"persisting-an-editor-for-regular-changes\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#persisting-an-editor-for-regular-changes\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Persisting an editor for regular changes\"]}),`\n`,(0,n.jsx)(e.p,{children:\"The above steps are useful for one-off changes, but if you need to make changes often \\u2013 in a development environment, for example \\u2013 it's best to add your editor to your Dockerfile. This will ensure your chosen editor is always available whenever you spin up another instance of your container.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Add your editor to the Dockerfile like this:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"language-yaml\",children:`RUN[\"apt-get\", \"update\"]\nRUN[\"apt-get\", \"install\", \"vim\"]\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Every image created with that Dockerfile will have Vim pre-installed and ready to go.\"}),`\n`,(0,n.jsx)(e.p,{children:'You can replace \"Vim\" with your editor of choice, such as Nano or GNU Emacs. Keep in mind that the commands in the square brackets are specific to Ubuntu Linux. You may need to adapt these to the operating system you are running in your Docker container.'}),`\n`,(0,n.jsxs)(e.h3,{id:\"option-2-edit-from-vs-code\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#option-2-edit-from-vs-code\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Option 2: Edit from VS Code\"]}),`\n`,(0,n.jsx)(e.p,{children:\"If you prefer to use a GUI editor (for example, if you'd like to use your mouse to navigate through large files, or cut and paste text), you can use VS Code.\"}),`\n`,(0,n.jsx)(e.p,{children:'This option requires both the Visual Studio Code IDE and the Docker extension from Microsoft. To install the extension, navigate to the extensions tab in VS Code and type in \"Docker\".'}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/c65ee7d20b5528430ddb2927aaac44c2.png\",alt:\"Search results in VS Code extensions for docker.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"Be sure to select the Docker extension from Microsoft. This extension allows you to easily manage any containers on your system directly from its UI.\"}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"/blog-images/70ac9ac2bf3cda7f1eba36a594a7cc7e.png\",alt:\"VS Code displaying a file inside the docker container.\"})}),`\n`,(0,n.jsx)(e.p,{children:\"From here, treating a container like any file directory, you can navigate to and open files in that container, and make your changes right in VS Code.\"}),`\n`,(0,n.jsxs)(e.h3,{id:\"closing-remarks\",children:[(0,n.jsx)(e.a,{className:\"anchor\",href:\"#closing-remarks\",children:(0,n.jsx)(e.span,{className:\"icon icon-link\"})}),\"Closing remarks\"]}),`\n`,(0,n.jsx)(e.p,{children:\"Now that you know how to edit files in a Docker file, it's important to take note of the best practice for it.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Editing files in a running Docker container is only recommended when working in a development environment during conceptualisation and when building proof-of-concepts.\"}),`\n`,(0,n.jsx)(e.p,{children:\"Once you've made changes to your project in Docker containers, save a new image with those changes in place. This leaves flexibility for testing two containers comparatively while ensuring stability and consistency across containers.\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u200D\"}),`\n`,(0,n.jsx)(e.p,{children:\"\\u200D\"})]})}function v(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(d,i)})):d(i)}var N=v;return b(D);})();\n;return Component;"
  },
  "_id": "blog/posts/how-to-edit-a-file-in-a-docker-container.mdx",
  "_raw": {
    "sourceFilePath": "blog/posts/how-to-edit-a-file-in-a-docker-container.mdx",
    "sourceFileName": "how-to-edit-a-file-in-a-docker-container.mdx",
    "sourceFileDir": "blog/posts",
    "contentType": "mdx",
    "flattenedPath": "blog/posts/how-to-edit-a-file-in-a-docker-container"
  },
  "type": "BlogPost",
  "computedSlug": "how-to-edit-a-file-in-a-docker-container"
}