{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import { defineDocumentType, makeSource } from \"contentlayer/source-files\";\nimport remarkGfm from \"remark-gfm\";\nimport rehypeSlug from \"rehype-slug\";\nimport rehypeAutolinkHeadings from \"rehype-autolink-headings\";\n\nexport const BlogPost = defineDocumentType(() => ({\n  name: \"BlogPost\",\n  filePathPattern: `**/blog/posts/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\", required: true },\n    publishDate: { type: \"string\", required: true },\n    author: { type: \"string\", required: true },\n    readingTime: { type: \"number\", required: true },\n    categories: { type: \"list\", of: { type: \"string\" }, required: true },\n    mainImage: { type: \"string\", required: true },\n    imageAlt: { type: \"string\", required: true },\n    showCTA: { type: \"boolean\", required: true },\n    ctaCopy: { type: \"string\", required: false },\n    ctaLink: { type: \"string\", required: false },\n    relatedPosts: { type: \"list\", of: { type: \"string\" }, required: true },\n    ogImage: { type: \"string\", required: true },\n    excerpt: { type: \"string\", required: true },\n    tags: { type: \"list\", of: { type: \"string\" }, required: true },\n    ctaButton: { type: \"string\", required: false },\n    date: { type: \"string\", required: false },\n    thumbnail: { type: \"string\", required: false }\n  },\n  computedFields: {\n    computedSlug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\")\n    }\n  }\n}));\n\nexport const CaseStudy = defineDocumentType(() => ({\n  name: \"CaseStudy\",\n  filePathPattern: \"case-studies/content/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\", required: false },\n    logo: { type: \"string\", required: false },\n    logoAlt: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n    publishDate: { type: \"date\", required: false },\n    thumbnail: { type: \"string\", required: false },\n    companySize: { type: \"string\", required: false },\n    industry: { type: \"string\", required: false },\n    location: { type: \"string\", required: false },\n    developmentVelocity: { type: \"string\", required: false },\n    developerExperience: { type: \"string\", required: false },\n    leanOperations: { type: \"string\", required: false },\n  },\n  computedFields: {\n    computedSlug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport const Legal = defineDocumentType(() => ({\n  name: \"Legal\",\n  filePathPattern: `**/legal/content/**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    publishDate: { type: \"string\", required: false },\n    slug: { type: \"string\", required: false },\n  },\n  computedFields: {\n    computedSlug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.flattenedPath.replace(/legal\\/content\\//, \"\"),\n    },\n  },\n}));\n\nexport const Partner = defineDocumentType(() => ({\n  name: \"Partner\",\n  filePathPattern: \"partners/content/**/*.mdx\",\n  contentType: \"mdx\",\n  fields: {\n    title: { type: \"string\", required: true },\n    summary: { type: \"string\", required: false },\n    logo: { type: \"string\", required: false },\n    logoAlt: { type: \"string\", required: false },\n    slug: { type: \"string\", required: false },\n    description: { type: \"string\", required: false },\n    category: { type: \"string\", required: false },\n    thumbnail: { type: \"string\", required: false },\n    mainImage: { type: \"string\", required: false },\n    featureImage: { type: \"string\", required: false },\n    buttonCopy: { type: \"string\", required: false },\n    buttonLink: { type: \"string\", required: false },\n    featureTitle: { type: \"string\", required: false },\n    featureList: { type: \"string\", required: false },\n    betterTitle: { type: \"string\", required: false },\n    betterDescription: { type: \"string\", required: false },\n    betterCards: { type: \"list\", of: { type: \"string\" }, required: false },\n    publishDate: { type: \"date\", required: false },\n  },\n  computedFields: {\n    computedSlug: {\n      type: \"string\",\n      resolve: (doc) => doc._raw.sourceFileName.replace(/\\.mdx$/, \"\"),\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"app\",\n  documentTypes: [BlogPost, CaseStudy, Legal, Partner],\n  mdx: {\n    remarkPlugins: [remarkGfm],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          properties: {\n            className: [\"anchor\"],\n          },\n        },\n      ],\n    ],\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
